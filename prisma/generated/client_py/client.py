# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template client.py.jinja --
import warnings
import logging
from datetime import timedelta
from pathlib import Path
from types import TracebackType
from typing_extensions import override

from pydantic import BaseModel

from . import types, models, errors, actions
from ._base_client import BasePrisma, UseClientDefault, USE_CLIENT_DEFAULT
from .types import DatasourceOverride, HttpConfig, MetricsFormat
from ._types import BaseModelT, PrismaMethod, TransactionId, Datasource
from .bases import _PrismaModel
from ._builder import QueryBuilder, dumps
from .generator.models import EngineType, OptionalValueFromEnvVar, BinaryPaths
from ._compat import removeprefix, model_parse
from ._constants import DEFAULT_CONNECT_TIMEOUT, DEFAULT_TX_MAX_WAIT, DEFAULT_TX_TIMEOUT
from ._raw_query import deserialize_raw_results
from ._metrics import Metrics
from .metadata import PRISMA_MODELS, RELATIONAL_FIELD_MAPPINGS
from ._transactions import AsyncTransactionManager, SyncTransactionManager

# re-exports
from ._base_client import SyncBasePrisma, AsyncBasePrisma, load_env as load_env
from ._registry import (
    register as register,
    get_client as get_client,
    RegisteredClient as RegisteredClient,
)


__all__ = (
    'ENGINE_TYPE',
    'SCHEMA_PATH',
    'BINARY_PATHS',
    'Batch',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

log: logging.Logger = logging.getLogger(__name__)

SCHEMA_PATH = Path('D:/Capstone/capstone_project/prisma/schema.prisma')
PACKAGED_SCHEMA_PATH = Path(__file__).parent.joinpath('schema.prisma')
ENGINE_TYPE: EngineType = EngineType.binary
BINARY_PATHS = model_parse(BinaryPaths, {'queryEngine': {'windows': 'C:\\Users\\ADMIN\\.cache\\prisma-python\\binaries\\5.11.0\\efd2449663b3d73d637ea1fd226bafbcf45b3102\\node_modules\\prisma\\query-engine-windows.exe'}, 'introspectionEngine': {}, 'migrationEngine': {}, 'libqueryEngine': {}, 'prismaFmt': {}})


class Prisma(SyncBasePrisma):
    # Note: these property names can be customised using `/// @Python(instance_name: '...')`
    # https://prisma-client-py.readthedocs.io/en/stable/reference/schema-extensions/#instance_name
    user: 'actions.userActions[models.user]'
    rating_user: 'actions.rating_userActions[models.rating_user]'
    rating_com: 'actions.rating_comActions[models.rating_com]'
    contact: 'actions.contactActions[models.contact]'
    category: 'actions.categoryActions[models.category]'
    experience: 'actions.experienceActions[models.experience]'
    career: 'actions.careerActions[models.career]'
    user_career: 'actions.user_careerActions[models.user_career]'
    job: 'actions.jobActions[models.job]'
    history: 'actions.historyActions[models.history]'
    job_exp: 'actions.job_expActions[models.job_exp]'
    bookmark: 'actions.bookmarkActions[models.bookmark]'
    post: 'actions.postActions[models.post]'

    __slots__ = (
        'user',
        'rating_user',
        'rating_com',
        'contact',
        'category',
        'experience',
        'career',
        'user_career',
        'job',
        'history',
        'job_exp',
        'bookmark',
        'post',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: DatasourceOverride | None = None,
        connect_timeout: int | timedelta = DEFAULT_CONNECT_TIMEOUT,
        http: HttpConfig | None = None,
    ) -> None:
        super().__init__(
            http=http,
            use_dotenv=use_dotenv,
            log_queries=log_queries,
            datasource=datasource,
            connect_timeout=connect_timeout,
        )
        self._set_generated_properties(
            schema_path=SCHEMA_PATH,
            engine_type=ENGINE_TYPE,
            prisma_models=PRISMA_MODELS,
            packaged_schema_path=PACKAGED_SCHEMA_PATH,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
            active_provider='postgresql',
            default_datasource_name='db',
        )

        self.user = actions.userActions[models.user](self, models.user)
        self.rating_user = actions.rating_userActions[models.rating_user](self, models.rating_user)
        self.rating_com = actions.rating_comActions[models.rating_com](self, models.rating_com)
        self.contact = actions.contactActions[models.contact](self, models.contact)
        self.category = actions.categoryActions[models.category](self, models.category)
        self.experience = actions.experienceActions[models.experience](self, models.experience)
        self.career = actions.careerActions[models.career](self, models.career)
        self.user_career = actions.user_careerActions[models.user_career](self, models.user_career)
        self.job = actions.jobActions[models.job](self, models.job)
        self.history = actions.historyActions[models.history](self, models.history)
        self.job_exp = actions.job_expActions[models.job_exp](self, models.job_exp)
        self.bookmark = actions.bookmarkActions[models.bookmark](self, models.bookmark)
        self.post = actions.postActions[models.post](self, models.post)

        if auto_register:
            register(self)

    @property
    @override
    def _default_datasource(self) -> Datasource:
        return {
            'name': 'db',
            'url': OptionalValueFromEnvVar(**{'value': None, 'fromEnvVar': 'DATABASE_URL'}).resolve(),
        }

    def execute_raw(self, query: LiteralString, *args: Any) -> int:
        resp = self._execute(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=None,
        )
        return int(resp['data']['result'])

    @overload
    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> dict[str, Any]:
        ...

    @overload
    def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> Optional[BaseModelT]:
        ...

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[Optional[BaseModelT], dict[str, Any]]:
        """This function is the exact same as `query_raw()` but returns the first result.

        If model is given, the returned record is converted to the pydantic model first,
        otherwise a raw dictionary will be returned.
        """
        results: Sequence[Union[BaseModelT, dict[str, Any]]]
        if model is not None:
            results = self.query_raw(query, *args, model=model)
        else:
            results = self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[dict[str, Any]]:
        ...

    @overload
    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> List[BaseModelT]:
        ...

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[List[BaseModelT], List[dict[str, Any]]]:
        """Execute a raw SQL query against the database.

        If model is given, each returned record is converted to the pydantic model first,
        otherwise results will be raw dictionaries.
        """
        resp = self._execute(
            method='query_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=model,
        )
        result = resp['data']['result']
        if model is not None:
            return deserialize_raw_results(result, model=model)

        return deserialize_raw_results(result)

    def batch_(self) -> Batch:
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    def tx(
        self,
        *,
        max_wait: Union[int, timedelta] = DEFAULT_TX_MAX_WAIT,
        timeout: Union[int, timedelta] = DEFAULT_TX_TIMEOUT,
    ) -> TransactionManager:
        """Returns a context manager for executing queries within a database transaction.

        Entering the context manager returns a new Prisma instance wrapping all
        actions within a transaction, queries will be isolated to the Prisma instance and
        will not be commited to the database until the context manager exits.

        By default, Prisma will wait a maximum of 2 seconds to acquire a transaction from the database. You can modify this
        default with the `max_wait` argument which accepts a value in milliseconds or `datetime.timedelta`.

        By default, Prisma will cancel and rollback ay transactions that last longer than 5 seconds. You can modify this timeout
        with the `timeout` argument which accepts a value in milliseconds or `datetime.timedelta`.

        Example usage:

        ```py
        with client.tx() as transaction:
            user1 = client.user.create({'name': 'Robert'})
            user2 = client.user.create({'name': 'Tegan'})
        ```

        In the above example, if the first database call succeeds but the second does not then neither of the records will be created.
        """
        return TransactionManager(
            client=self,
            max_wait=max_wait,
            timeout=timeout,
        )


TransactionManager = SyncTransactionManager[Prisma]


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    user: 'userBatchActions'
    rating_user: 'rating_userBatchActions'
    rating_com: 'rating_comBatchActions'
    contact: 'contactBatchActions'
    category: 'categoryBatchActions'
    experience: 'experienceBatchActions'
    career: 'careerBatchActions'
    user_career: 'user_careerBatchActions'
    job: 'jobBatchActions'
    history: 'historyBatchActions'
    job_exp: 'job_expBatchActions'
    bookmark: 'bookmarkBatchActions'
    post: 'postBatchActions'

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.user = userBatchActions(self)
        self.rating_user = rating_userBatchActions(self)
        self.rating_com = rating_comBatchActions(self)
        self.contact = contactBatchActions(self)
        self.category = categoryBatchActions(self)
        self.experience = experienceBatchActions(self)
        self.career = careerBatchActions(self)
        self.user_career = user_careerBatchActions(self)
        self.job = jobBatchActions(self)
        self.history = historyBatchActions(self)
        self.job_exp = job_expBatchActions(self)
        self.bookmark = bookmarkBatchActions(self)
        self.post = postBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(
            **kwargs,
            prisma_models=PRISMA_MODELS,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
        )
        self.__queries.append(builder.build_query())

    def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        self.__client._engine.query(
            dumps(payload),
            tx_id=self.__client._tx_id,
        )

    def execute_raw(self, query: LiteralString, *args: Any) -> None:
        self._add(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )

    def __enter__(self) -> 'Batch':
        return self

    def __exit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class userBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.userCreateInput,
        include: Optional[types.userInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.user,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.userCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.user,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.userWhereUniqueInput,
        include: Optional[types.userInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.user,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.userUpdateInput,
        where: types.userWhereUniqueInput,
        include: Optional[types.userInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.user,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.userWhereUniqueInput,
        data: types.userUpsertInput,
        include: Optional[types.userInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.user,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.userUpdateManyMutationInput,
        where: types.userWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.user,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.userWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.user,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class rating_userBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.rating_userCreateInput,
        include: Optional[types.rating_userInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.rating_user,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.rating_userCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.rating_user,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.rating_userWhereUniqueInput,
        include: Optional[types.rating_userInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.rating_user,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.rating_userUpdateInput,
        where: types.rating_userWhereUniqueInput,
        include: Optional[types.rating_userInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.rating_user,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.rating_userWhereUniqueInput,
        data: types.rating_userUpsertInput,
        include: Optional[types.rating_userInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.rating_user,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.rating_userUpdateManyMutationInput,
        where: types.rating_userWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.rating_user,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.rating_userWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.rating_user,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class rating_comBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.rating_comCreateInput,
        include: Optional[types.rating_comInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.rating_com,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.rating_comCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.rating_com,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.rating_comWhereUniqueInput,
        include: Optional[types.rating_comInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.rating_com,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.rating_comUpdateInput,
        where: types.rating_comWhereUniqueInput,
        include: Optional[types.rating_comInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.rating_com,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.rating_comWhereUniqueInput,
        data: types.rating_comUpsertInput,
        include: Optional[types.rating_comInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.rating_com,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.rating_comUpdateManyMutationInput,
        where: types.rating_comWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.rating_com,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.rating_comWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.rating_com,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class contactBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.contactCreateInput,
        include: Optional[types.contactInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.contact,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.contactCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.contact,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.contactWhereUniqueInput,
        include: Optional[types.contactInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.contact,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.contactUpdateInput,
        where: types.contactWhereUniqueInput,
        include: Optional[types.contactInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.contact,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.contactWhereUniqueInput,
        data: types.contactUpsertInput,
        include: Optional[types.contactInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.contact,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.contactUpdateManyMutationInput,
        where: types.contactWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.contact,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.contactWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.contact,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class categoryBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.categoryCreateInput,
        include: Optional[types.categoryInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.category,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.categoryCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.category,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.categoryWhereUniqueInput,
        include: Optional[types.categoryInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.category,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.categoryUpdateInput,
        where: types.categoryWhereUniqueInput,
        include: Optional[types.categoryInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.category,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.categoryWhereUniqueInput,
        data: types.categoryUpsertInput,
        include: Optional[types.categoryInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.category,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.categoryUpdateManyMutationInput,
        where: types.categoryWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.category,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.categoryWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.category,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class experienceBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.experienceCreateInput,
        include: Optional[types.experienceInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.experience,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.experienceCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.experience,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.experienceWhereUniqueInput,
        include: Optional[types.experienceInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.experience,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.experienceUpdateInput,
        where: types.experienceWhereUniqueInput,
        include: Optional[types.experienceInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.experience,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.experienceWhereUniqueInput,
        data: types.experienceUpsertInput,
        include: Optional[types.experienceInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.experience,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.experienceUpdateManyMutationInput,
        where: types.experienceWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.experience,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.experienceWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.experience,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class careerBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.careerCreateInput,
        include: Optional[types.careerInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.career,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.careerCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.career,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.careerWhereUniqueInput,
        include: Optional[types.careerInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.career,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.careerUpdateInput,
        where: types.careerWhereUniqueInput,
        include: Optional[types.careerInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.career,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.careerWhereUniqueInput,
        data: types.careerUpsertInput,
        include: Optional[types.careerInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.career,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.careerUpdateManyMutationInput,
        where: types.careerWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.career,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.careerWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.career,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class user_careerBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.user_careerCreateInput,
        include: Optional[types.user_careerInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.user_career,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.user_careerCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.user_career,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.user_careerWhereUniqueInput,
        include: Optional[types.user_careerInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.user_career,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.user_careerUpdateInput,
        where: types.user_careerWhereUniqueInput,
        include: Optional[types.user_careerInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.user_career,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.user_careerWhereUniqueInput,
        data: types.user_careerUpsertInput,
        include: Optional[types.user_careerInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.user_career,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.user_careerUpdateManyMutationInput,
        where: types.user_careerWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.user_career,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.user_careerWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.user_career,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class jobBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.jobCreateInput,
        include: Optional[types.jobInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.job,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.jobCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.job,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.jobWhereUniqueInput,
        include: Optional[types.jobInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.job,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.jobUpdateInput,
        where: types.jobWhereUniqueInput,
        include: Optional[types.jobInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.job,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.jobWhereUniqueInput,
        data: types.jobUpsertInput,
        include: Optional[types.jobInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.job,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.jobUpdateManyMutationInput,
        where: types.jobWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.job,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.jobWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.job,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class historyBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.historyCreateInput,
        include: Optional[types.historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.history,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.historyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.history,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.historyWhereUniqueInput,
        include: Optional[types.historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.history,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.historyUpdateInput,
        where: types.historyWhereUniqueInput,
        include: Optional[types.historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.history,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.historyWhereUniqueInput,
        data: types.historyUpsertInput,
        include: Optional[types.historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.history,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.historyUpdateManyMutationInput,
        where: types.historyWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.history,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.historyWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.history,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class job_expBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.job_expCreateInput,
        include: Optional[types.job_expInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.job_exp,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.job_expCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.job_exp,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.job_expWhereUniqueInput,
        include: Optional[types.job_expInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.job_exp,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.job_expUpdateInput,
        where: types.job_expWhereUniqueInput,
        include: Optional[types.job_expInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.job_exp,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.job_expWhereUniqueInput,
        data: types.job_expUpsertInput,
        include: Optional[types.job_expInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.job_exp,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.job_expUpdateManyMutationInput,
        where: types.job_expWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.job_exp,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.job_expWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.job_exp,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class bookmarkBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.bookmarkCreateInput,
        include: Optional[types.bookmarkInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.bookmark,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.bookmarkCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.bookmark,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.bookmarkWhereUniqueInput,
        include: Optional[types.bookmarkInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.bookmark,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.bookmarkUpdateInput,
        where: types.bookmarkWhereUniqueInput,
        include: Optional[types.bookmarkInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.bookmark,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.bookmarkWhereUniqueInput,
        data: types.bookmarkUpsertInput,
        include: Optional[types.bookmarkInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.bookmark,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.bookmarkUpdateManyMutationInput,
        where: types.bookmarkWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.bookmark,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.bookmarkWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.bookmark,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class postBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.postCreateInput,
        include: Optional[types.postInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.post,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.postCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.post,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.postWhereUniqueInput,
        include: Optional[types.postInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.post,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.postUpdateInput,
        where: types.postWhereUniqueInput,
        include: Optional[types.postInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.post,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.postWhereUniqueInput,
        data: types.postUpsertInput,
        include: Optional[types.postInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.post,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.postUpdateManyMutationInput,
        where: types.postWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.post,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.postWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.post,
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma