# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# user types

class userOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the user create method"""
    user_id: _int
    image: Optional[_str]
    bookmark: 'bookmarkCreateManyNestedWithoutRelationsInput'
    contact: 'contactCreateManyNestedWithoutRelationsInput'
    experience: 'experienceCreateManyNestedWithoutRelationsInput'
    history: 'historyCreateManyNestedWithoutRelationsInput'
    post: 'postCreateManyNestedWithoutRelationsInput'
    rating_com1: 'rating_comCreateManyNestedWithoutRelationsInput'
    rating_com2: 'rating_comCreateManyNestedWithoutRelationsInput'
    rating_user1: 'rating_userCreateManyNestedWithoutRelationsInput'
    rating_users2: 'rating_userCreateManyNestedWithoutRelationsInput'
    user_career: 'user_careerCreateManyNestedWithoutRelationsInput'


class userCreateInput(userOptionalCreateInput):
    """Required arguments to the user create method"""
    first_name: _str
    last_name: _str
    username: _str
    phone_number: _str
    id_card: _str
    email: _str
    password: _str
    role: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class userOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the user create method, without relations"""
    user_id: _int
    image: Optional[_str]


class userCreateWithoutRelationsInput(userOptionalCreateWithoutRelationsInput):
    """Required arguments to the user create method, without relations"""
    first_name: _str
    last_name: _str
    username: _str
    phone_number: _str
    id_card: _str
    email: _str
    password: _str
    role: _str


class userCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'userCreateWithoutRelationsInput'
    connect: 'userWhereUniqueInput'


class userCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['userCreateWithoutRelationsInput', List['userCreateWithoutRelationsInput']]
    connect: Union['userWhereUniqueInput', List['userWhereUniqueInput']]


_userWhereUnique_user_id_Input = TypedDict(
    '_userWhereUnique_user_id_Input',
    {
        'user_id': '_int',
    },
    total=True
)

_userWhereUnique_email_Input = TypedDict(
    '_userWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

userWhereUniqueInput = Union[
    '_userWhereUnique_user_id_Input',
    '_userWhereUnique_email_Input',
]


class userUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    user_id: Union[AtomicIntInput, _int]
    first_name: _str
    last_name: _str
    username: _str
    image: Optional[_str]
    phone_number: _str
    id_card: _str
    email: _str
    password: _str
    role: _str
    bookmark: 'bookmarkUpdateManyWithoutRelationsInput'
    contact: 'contactUpdateManyWithoutRelationsInput'
    experience: 'experienceUpdateManyWithoutRelationsInput'
    history: 'historyUpdateManyWithoutRelationsInput'
    post: 'postUpdateManyWithoutRelationsInput'
    rating_com1: 'rating_comUpdateManyWithoutRelationsInput'
    rating_com2: 'rating_comUpdateManyWithoutRelationsInput'
    rating_user1: 'rating_userUpdateManyWithoutRelationsInput'
    rating_users2: 'rating_userUpdateManyWithoutRelationsInput'
    user_career: 'user_careerUpdateManyWithoutRelationsInput'


class userUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    user_id: Union[AtomicIntInput, _int]
    first_name: _str
    last_name: _str
    username: _str
    image: Optional[_str]
    phone_number: _str
    id_card: _str
    email: _str
    password: _str
    role: _str


class userUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['userCreateWithoutRelationsInput']
    connect: List['userWhereUniqueInput']
    set: List['userWhereUniqueInput']
    disconnect: List['userWhereUniqueInput']
    delete: List['userWhereUniqueInput']

    # TODO
    # update: List['userUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['userUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['userScalarWhereInput']
    # upsert: List['userUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['userCreateOrConnectWithoutRelationsInput']


class userUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'userCreateWithoutRelationsInput'
    connect: 'userWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'userUpdateInput'
    # upsert: 'userUpsertWithoutRelationsInput'
    # connectOrCreate: 'userCreateOrConnectWithoutRelationsInput'


class userUpsertInput(TypedDict):
    create: 'userCreateInput'
    update: 'userUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_user_user_id_OrderByInput = TypedDict(
    '_user_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_user_first_name_OrderByInput = TypedDict(
    '_user_first_name_OrderByInput',
    {
        'first_name': 'SortOrder',
    },
    total=True
)

_user_last_name_OrderByInput = TypedDict(
    '_user_last_name_OrderByInput',
    {
        'last_name': 'SortOrder',
    },
    total=True
)

_user_username_OrderByInput = TypedDict(
    '_user_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_user_image_OrderByInput = TypedDict(
    '_user_image_OrderByInput',
    {
        'image': 'SortOrder',
    },
    total=True
)

_user_phone_number_OrderByInput = TypedDict(
    '_user_phone_number_OrderByInput',
    {
        'phone_number': 'SortOrder',
    },
    total=True
)

_user_id_card_OrderByInput = TypedDict(
    '_user_id_card_OrderByInput',
    {
        'id_card': 'SortOrder',
    },
    total=True
)

_user_email_OrderByInput = TypedDict(
    '_user_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_user_password_OrderByInput = TypedDict(
    '_user_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_user_role_OrderByInput = TypedDict(
    '_user_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

userOrderByInput = Union[
    '_user_user_id_OrderByInput',
    '_user_first_name_OrderByInput',
    '_user_last_name_OrderByInput',
    '_user_username_OrderByInput',
    '_user_image_OrderByInput',
    '_user_phone_number_OrderByInput',
    '_user_id_card_OrderByInput',
    '_user_email_OrderByInput',
    '_user_password_OrderByInput',
    '_user_role_OrderByInput',
]



# recursive user types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

userRelationFilter = TypedDict(
    'userRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class userListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class userInclude(TypedDict, total=False):
    """user relational arguments"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuser']
    contact: Union[bool, 'FindManycontactArgsFromuser']
    experience: Union[bool, 'FindManyexperienceArgsFromuser']
    history: Union[bool, 'FindManyhistoryArgsFromuser']
    post: Union[bool, 'FindManypostArgsFromuser']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromuser']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromuser']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromuser']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromuser']
    user_career: Union[bool, 'FindManyuser_careerArgsFromuser']


    

class userIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuserRecursive1']
    contact: Union[bool, 'FindManycontactArgsFromuserRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFromuserRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromuserRecursive1']
    post: Union[bool, 'FindManypostArgsFromuserRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromuserRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromuserRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromuserRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromuserRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFromuserRecursive1']


class userIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuserRecursive2']
    contact: Union[bool, 'FindManycontactArgsFromuserRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFromuserRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromuserRecursive2']
    post: Union[bool, 'FindManypostArgsFromuserRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromuserRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromuserRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromuserRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromuserRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFromuserRecursive2']


class userIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuserRecursive3']
    contact: Union[bool, 'FindManycontactArgsFromuserRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFromuserRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromuserRecursive3']
    post: Union[bool, 'FindManypostArgsFromuserRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromuserRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromuserRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromuserRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromuserRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFromuserRecursive3']


class userIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuserRecursive4']
    contact: Union[bool, 'FindManycontactArgsFromuserRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFromuserRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromuserRecursive4']
    post: Union[bool, 'FindManypostArgsFromuserRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromuserRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromuserRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromuserRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromuserRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFromuserRecursive4']


class userIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class userArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyuserArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive1']
    user1: Union[bool, 'userArgsFromuserRecursive1']
    user2: Union[bool, 'userArgsFromuserRecursive1']


class rating_userIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive2']
    user1: Union[bool, 'userArgsFromuserRecursive2']
    user2: Union[bool, 'userArgsFromuserRecursive2']


class rating_userIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive3']
    user1: Union[bool, 'userArgsFromuserRecursive3']
    user2: Union[bool, 'userArgsFromuserRecursive3']


class rating_userIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive4']
    user1: Union[bool, 'userArgsFromuserRecursive4']
    user2: Union[bool, 'userArgsFromuserRecursive4']


class rating_userIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class rating_userArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyrating_userArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive1']
    user1: Union[bool, 'userArgsFromuserRecursive1']
    user2: Union[bool, 'userArgsFromuserRecursive1']


class rating_comIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive2']
    user1: Union[bool, 'userArgsFromuserRecursive2']
    user2: Union[bool, 'userArgsFromuserRecursive2']


class rating_comIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive3']
    user1: Union[bool, 'userArgsFromuserRecursive3']
    user2: Union[bool, 'userArgsFromuserRecursive3']


class rating_comIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive4']
    user1: Union[bool, 'userArgsFromuserRecursive4']
    user2: Union[bool, 'userArgsFromuserRecursive4']


class rating_comIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class rating_comArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyrating_comArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    user: Union[bool, 'userArgsFromuserRecursive1']


class contactIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    user: Union[bool, 'userArgsFromuserRecursive2']


class contactIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    user: Union[bool, 'userArgsFromuserRecursive3']


class contactIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    user: Union[bool, 'userArgsFromuserRecursive4']


class contactIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class contactArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManycontactArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    experiences: Union[bool, 'FindManyexperienceArgsFromuserRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuserRecursive1']


class categoryIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    experiences: Union[bool, 'FindManyexperienceArgsFromuserRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuserRecursive2']


class categoryIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    experiences: Union[bool, 'FindManyexperienceArgsFromuserRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuserRecursive3']


class categoryIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    experiences: Union[bool, 'FindManyexperienceArgsFromuserRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuserRecursive4']


class categoryIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class categoryArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManycategoryArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    category: Union[bool, 'categoryArgsFromuserRecursive1']
    user: Union[bool, 'userArgsFromuserRecursive1']


class experienceIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    category: Union[bool, 'categoryArgsFromuserRecursive2']
    user: Union[bool, 'userArgsFromuserRecursive2']


class experienceIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    category: Union[bool, 'categoryArgsFromuserRecursive3']
    user: Union[bool, 'userArgsFromuserRecursive3']


class experienceIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    category: Union[bool, 'categoryArgsFromuserRecursive4']
    user: Union[bool, 'userArgsFromuserRecursive4']


class experienceIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class experienceArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyexperienceArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromuserRecursive1']


class careerIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromuserRecursive2']


class careerIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromuserRecursive3']


class careerIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromuserRecursive4']


class careerIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class careerArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManycareerArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    career: Union[bool, 'careerArgsFromuserRecursive1']
    user: Union[bool, 'userArgsFromuserRecursive1']


class user_careerIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    career: Union[bool, 'careerArgsFromuserRecursive2']
    user: Union[bool, 'userArgsFromuserRecursive2']


class user_careerIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    career: Union[bool, 'careerArgsFromuserRecursive3']
    user: Union[bool, 'userArgsFromuserRecursive3']


class user_careerIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    career: Union[bool, 'careerArgsFromuserRecursive4']
    user: Union[bool, 'userArgsFromuserRecursive4']


class user_careerIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class user_careerArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyuser_careerArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuserRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromuserRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuserRecursive1']
    post: Union[bool, 'FindManypostArgsFromuserRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFromuserRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFromuserRecursive1']


class jobIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuserRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromuserRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuserRecursive2']
    post: Union[bool, 'FindManypostArgsFromuserRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFromuserRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFromuserRecursive2']


class jobIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuserRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromuserRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuserRecursive3']
    post: Union[bool, 'FindManypostArgsFromuserRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFromuserRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFromuserRecursive3']


class jobIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuserRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromuserRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuserRecursive4']
    post: Union[bool, 'FindManypostArgsFromuserRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFromuserRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFromuserRecursive4']


class jobIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class jobArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyjobArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive1']
    user: Union[bool, 'userArgsFromuserRecursive1']


class historyIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive2']
    user: Union[bool, 'userArgsFromuserRecursive2']


class historyIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive3']
    user: Union[bool, 'userArgsFromuserRecursive3']


class historyIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive4']
    user: Union[bool, 'userArgsFromuserRecursive4']


class historyIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class historyArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyhistoryArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    category: Union[bool, 'categoryArgsFromuserRecursive1']
    job: Union[bool, 'jobArgsFromuserRecursive1']


class job_expIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    category: Union[bool, 'categoryArgsFromuserRecursive2']
    job: Union[bool, 'jobArgsFromuserRecursive2']


class job_expIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    category: Union[bool, 'categoryArgsFromuserRecursive3']
    job: Union[bool, 'jobArgsFromuserRecursive3']


class job_expIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    category: Union[bool, 'categoryArgsFromuserRecursive4']
    job: Union[bool, 'jobArgsFromuserRecursive4']


class job_expIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class job_expArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyjob_expArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive1']
    user: Union[bool, 'userArgsFromuserRecursive1']


class bookmarkIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive2']
    user: Union[bool, 'userArgsFromuserRecursive2']


class bookmarkIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive3']
    user: Union[bool, 'userArgsFromuserRecursive3']


class bookmarkIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive4']
    user: Union[bool, 'userArgsFromuserRecursive4']


class bookmarkIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class bookmarkArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManybookmarkArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive1']
    user: Union[bool, 'userArgsFromuserRecursive1']


class postIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive2']
    user: Union[bool, 'userArgsFromuserRecursive2']


class postIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive3']
    user: Union[bool, 'userArgsFromuserRecursive3']


class postIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""
    job: Union[bool, 'jobArgsFromuserRecursive4']
    user: Union[bool, 'userArgsFromuserRecursive4']


class postIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class postArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManypostArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManyuserArgs = FindManyuserArgsFromuser
FindFirstuserArgs = FindManyuserArgsFromuser


    

class userWhereInput(TypedDict, total=False):
    """user arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    first_name: Union[_str, 'types.StringFilter']
    last_name: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    image: Union[None, _str, 'types.StringFilter']
    phone_number: Union[_str, 'types.StringFilter']
    id_card: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    bookmark: 'bookmarkListRelationFilter'
    contact: 'contactListRelationFilter'
    experience: 'experienceListRelationFilter'
    history: 'historyListRelationFilter'
    post: 'postListRelationFilter'
    rating_com1: 'rating_comListRelationFilter'
    rating_com2: 'rating_comListRelationFilter'
    rating_user1: 'rating_userListRelationFilter'
    rating_users2: 'rating_userListRelationFilter'
    user_career: 'user_careerListRelationFilter'

    # should be noted that AND and NOT should be Union['userWhereInputRecursive1', List['userWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive1']
    OR: List['userWhereInputRecursive1']
    NOT: List['userWhereInputRecursive1']


class userWhereInputRecursive1(TypedDict, total=False):
    """user arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    first_name: Union[_str, 'types.StringFilter']
    last_name: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    image: Union[None, _str, 'types.StringFilter']
    phone_number: Union[_str, 'types.StringFilter']
    id_card: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    bookmark: 'bookmarkListRelationFilter'
    contact: 'contactListRelationFilter'
    experience: 'experienceListRelationFilter'
    history: 'historyListRelationFilter'
    post: 'postListRelationFilter'
    rating_com1: 'rating_comListRelationFilter'
    rating_com2: 'rating_comListRelationFilter'
    rating_user1: 'rating_userListRelationFilter'
    rating_users2: 'rating_userListRelationFilter'
    user_career: 'user_careerListRelationFilter'

    # should be noted that AND and NOT should be Union['userWhereInputRecursive2', List['userWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive2']
    OR: List['userWhereInputRecursive2']
    NOT: List['userWhereInputRecursive2']


class userWhereInputRecursive2(TypedDict, total=False):
    """user arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    first_name: Union[_str, 'types.StringFilter']
    last_name: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    image: Union[None, _str, 'types.StringFilter']
    phone_number: Union[_str, 'types.StringFilter']
    id_card: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    bookmark: 'bookmarkListRelationFilter'
    contact: 'contactListRelationFilter'
    experience: 'experienceListRelationFilter'
    history: 'historyListRelationFilter'
    post: 'postListRelationFilter'
    rating_com1: 'rating_comListRelationFilter'
    rating_com2: 'rating_comListRelationFilter'
    rating_user1: 'rating_userListRelationFilter'
    rating_users2: 'rating_userListRelationFilter'
    user_career: 'user_careerListRelationFilter'

    # should be noted that AND and NOT should be Union['userWhereInputRecursive3', List['userWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive3']
    OR: List['userWhereInputRecursive3']
    NOT: List['userWhereInputRecursive3']


class userWhereInputRecursive3(TypedDict, total=False):
    """user arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    first_name: Union[_str, 'types.StringFilter']
    last_name: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    image: Union[None, _str, 'types.StringFilter']
    phone_number: Union[_str, 'types.StringFilter']
    id_card: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    bookmark: 'bookmarkListRelationFilter'
    contact: 'contactListRelationFilter'
    experience: 'experienceListRelationFilter'
    history: 'historyListRelationFilter'
    post: 'postListRelationFilter'
    rating_com1: 'rating_comListRelationFilter'
    rating_com2: 'rating_comListRelationFilter'
    rating_user1: 'rating_userListRelationFilter'
    rating_users2: 'rating_userListRelationFilter'
    user_career: 'user_careerListRelationFilter'

    # should be noted that AND and NOT should be Union['userWhereInputRecursive4', List['userWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive4']
    OR: List['userWhereInputRecursive4']
    NOT: List['userWhereInputRecursive4']


class userWhereInputRecursive4(TypedDict, total=False):
    """user arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    first_name: Union[_str, 'types.StringFilter']
    last_name: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    image: Union[None, _str, 'types.StringFilter']
    phone_number: Union[_str, 'types.StringFilter']
    id_card: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    bookmark: 'bookmarkListRelationFilter'
    contact: 'contactListRelationFilter'
    experience: 'experienceListRelationFilter'
    history: 'historyListRelationFilter'
    post: 'postListRelationFilter'
    rating_com1: 'rating_comListRelationFilter'
    rating_com2: 'rating_comListRelationFilter'
    rating_user1: 'rating_userListRelationFilter'
    rating_users2: 'rating_userListRelationFilter'
    user_career: 'user_careerListRelationFilter'



# aggregate user types


    

class userScalarWhereWithAggregatesInput(TypedDict, total=False):
    """user arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    phone_number: Union[_str, 'types.StringWithAggregatesFilter']
    id_card: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive1']
    OR: List['userScalarWhereWithAggregatesInputRecursive1']
    NOT: List['userScalarWhereWithAggregatesInputRecursive1']


class userScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """user arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    phone_number: Union[_str, 'types.StringWithAggregatesFilter']
    id_card: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive2']
    OR: List['userScalarWhereWithAggregatesInputRecursive2']
    NOT: List['userScalarWhereWithAggregatesInputRecursive2']


class userScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """user arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    phone_number: Union[_str, 'types.StringWithAggregatesFilter']
    id_card: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive3']
    OR: List['userScalarWhereWithAggregatesInputRecursive3']
    NOT: List['userScalarWhereWithAggregatesInputRecursive3']


class userScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """user arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    phone_number: Union[_str, 'types.StringWithAggregatesFilter']
    id_card: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive4']
    OR: List['userScalarWhereWithAggregatesInputRecursive4']
    NOT: List['userScalarWhereWithAggregatesInputRecursive4']


class userScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """user arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    phone_number: Union[_str, 'types.StringWithAggregatesFilter']
    id_card: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']



class userGroupByOutput(TypedDict, total=False):
    user_id: _int
    first_name: _str
    last_name: _str
    username: _str
    image: _str
    phone_number: _str
    id_card: _str
    email: _str
    password: _str
    role: _str
    _sum: 'userSumAggregateOutput'
    _avg: 'userAvgAggregateOutput'
    _min: 'userMinAggregateOutput'
    _max: 'userMaxAggregateOutput'
    _count: 'userCountAggregateOutput'


class userAvgAggregateOutput(TypedDict, total=False):
    """user output for aggregating averages"""
    user_id: float


class userSumAggregateOutput(TypedDict, total=False):
    """user output for aggregating sums"""
    user_id: _int


class userScalarAggregateOutput(TypedDict, total=False):
    """user output including scalar fields"""
    user_id: _int
    first_name: _str
    last_name: _str
    username: _str
    image: _str
    phone_number: _str
    id_card: _str
    email: _str
    password: _str
    role: _str


userMinAggregateOutput = userScalarAggregateOutput
userMaxAggregateOutput = userScalarAggregateOutput


class userMaxAggregateInput(TypedDict, total=False):
    """user input for aggregating by max"""
    user_id: bool
    first_name: bool
    last_name: bool
    username: bool
    image: bool
    phone_number: bool
    id_card: bool
    email: bool
    password: bool
    role: bool


class userMinAggregateInput(TypedDict, total=False):
    """user input for aggregating by min"""
    user_id: bool
    first_name: bool
    last_name: bool
    username: bool
    image: bool
    phone_number: bool
    id_card: bool
    email: bool
    password: bool
    role: bool


class userNumberAggregateInput(TypedDict, total=False):
    """user input for aggregating numbers"""
    user_id: bool


userAvgAggregateInput = userNumberAggregateInput
userSumAggregateInput = userNumberAggregateInput


userCountAggregateInput = TypedDict(
    'userCountAggregateInput',
    {
        'user_id': bool,
        'first_name': bool,
        'last_name': bool,
        'username': bool,
        'image': bool,
        'phone_number': bool,
        'id_card': bool,
        'email': bool,
        'password': bool,
        'role': bool,
        '_all': bool,
    },
    total=False,
)

userCountAggregateOutput = TypedDict(
    'userCountAggregateOutput',
    {
        'user_id': int,
        'first_name': int,
        'last_name': int,
        'username': int,
        'image': int,
        'phone_number': int,
        'id_card': int,
        'email': int,
        'password': int,
        'role': int,
        '_all': int,
    },
    total=False,
)


userKeys = Literal[
    'user_id',
    'first_name',
    'last_name',
    'username',
    'image',
    'phone_number',
    'id_card',
    'email',
    'password',
    'role',
    'bookmark',
    'contact',
    'experience',
    'history',
    'post',
    'rating_com1',
    'rating_com2',
    'rating_user1',
    'rating_users2',
    'user_career',
]
userScalarFieldKeys = Literal[
    'user_id',
    'first_name',
    'last_name',
    'username',
    'image',
    'phone_number',
    'id_card',
    'email',
    'password',
    'role',
]
userScalarFieldKeysT = TypeVar('userScalarFieldKeysT', bound=userScalarFieldKeys)

userRelationalFieldKeys = Literal[
        'bookmark',
        'contact',
        'experience',
        'history',
        'post',
        'rating_com1',
        'rating_com2',
        'rating_user1',
        'rating_users2',
        'user_career',
    ]

# rating_user types

class rating_userOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the rating_user create method"""
    rating_id: _int
    job_id: _int
    friendly_rating: _float
    efficiency_rating: _float
    accuracy_rating: _float
    user_id1: _int
    user_id2: _int
    job: 'jobCreateNestedWithoutRelationsInput'
    user1: 'userCreateNestedWithoutRelationsInput'
    user2: 'userCreateNestedWithoutRelationsInput'


class rating_userCreateInput(rating_userOptionalCreateInput):
    """Required arguments to the rating_user create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class rating_userOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the rating_user create method, without relations"""
    rating_id: _int
    job_id: _int
    friendly_rating: _float
    efficiency_rating: _float
    accuracy_rating: _float
    user_id1: _int
    user_id2: _int


class rating_userCreateWithoutRelationsInput(rating_userOptionalCreateWithoutRelationsInput):
    """Required arguments to the rating_user create method, without relations"""


class rating_userCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'rating_userCreateWithoutRelationsInput'
    connect: 'rating_userWhereUniqueInput'


class rating_userCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['rating_userCreateWithoutRelationsInput', List['rating_userCreateWithoutRelationsInput']]
    connect: Union['rating_userWhereUniqueInput', List['rating_userWhereUniqueInput']]


_rating_userWhereUnique_rating_id_Input = TypedDict(
    '_rating_userWhereUnique_rating_id_Input',
    {
        'rating_id': '_int',
    },
    total=True
)

rating_userWhereUniqueInput = _rating_userWhereUnique_rating_id_Input


class rating_userUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    rating_id: Union[AtomicIntInput, _int]
    friendly_rating: Union[AtomicFloatInput, _float]
    efficiency_rating: Union[AtomicFloatInput, _float]
    accuracy_rating: Union[AtomicFloatInput, _float]
    job: 'jobUpdateOneWithoutRelationsInput'
    user1: 'userUpdateOneWithoutRelationsInput'
    user2: 'userUpdateOneWithoutRelationsInput'


class rating_userUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    rating_id: Union[AtomicIntInput, _int]
    friendly_rating: Union[AtomicFloatInput, _float]
    efficiency_rating: Union[AtomicFloatInput, _float]
    accuracy_rating: Union[AtomicFloatInput, _float]


class rating_userUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['rating_userCreateWithoutRelationsInput']
    connect: List['rating_userWhereUniqueInput']
    set: List['rating_userWhereUniqueInput']
    disconnect: List['rating_userWhereUniqueInput']
    delete: List['rating_userWhereUniqueInput']

    # TODO
    # update: List['rating_userUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['rating_userUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['rating_userScalarWhereInput']
    # upsert: List['rating_userUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['rating_userCreateOrConnectWithoutRelationsInput']


class rating_userUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'rating_userCreateWithoutRelationsInput'
    connect: 'rating_userWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'rating_userUpdateInput'
    # upsert: 'rating_userUpsertWithoutRelationsInput'
    # connectOrCreate: 'rating_userCreateOrConnectWithoutRelationsInput'


class rating_userUpsertInput(TypedDict):
    create: 'rating_userCreateInput'
    update: 'rating_userUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_rating_user_rating_id_OrderByInput = TypedDict(
    '_rating_user_rating_id_OrderByInput',
    {
        'rating_id': 'SortOrder',
    },
    total=True
)

_rating_user_job_id_OrderByInput = TypedDict(
    '_rating_user_job_id_OrderByInput',
    {
        'job_id': 'SortOrder',
    },
    total=True
)

_rating_user_friendly_rating_OrderByInput = TypedDict(
    '_rating_user_friendly_rating_OrderByInput',
    {
        'friendly_rating': 'SortOrder',
    },
    total=True
)

_rating_user_efficiency_rating_OrderByInput = TypedDict(
    '_rating_user_efficiency_rating_OrderByInput',
    {
        'efficiency_rating': 'SortOrder',
    },
    total=True
)

_rating_user_accuracy_rating_OrderByInput = TypedDict(
    '_rating_user_accuracy_rating_OrderByInput',
    {
        'accuracy_rating': 'SortOrder',
    },
    total=True
)

_rating_user_user_id1_OrderByInput = TypedDict(
    '_rating_user_user_id1_OrderByInput',
    {
        'user_id1': 'SortOrder',
    },
    total=True
)

_rating_user_user_id2_OrderByInput = TypedDict(
    '_rating_user_user_id2_OrderByInput',
    {
        'user_id2': 'SortOrder',
    },
    total=True
)

rating_userOrderByInput = Union[
    '_rating_user_rating_id_OrderByInput',
    '_rating_user_job_id_OrderByInput',
    '_rating_user_friendly_rating_OrderByInput',
    '_rating_user_efficiency_rating_OrderByInput',
    '_rating_user_accuracy_rating_OrderByInput',
    '_rating_user_user_id1_OrderByInput',
    '_rating_user_user_id2_OrderByInput',
]



# recursive rating_user types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

rating_userRelationFilter = TypedDict(
    'rating_userRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class rating_userListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class rating_userInclude(TypedDict, total=False):
    """rating_user relational arguments"""
    job: Union[bool, 'jobArgsFromrating_user']
    user1: Union[bool, 'userArgsFromrating_user']
    user2: Union[bool, 'userArgsFromrating_user']


    

class userIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_userRecursive1']
    contact: Union[bool, 'FindManycontactArgsFromrating_userRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFromrating_userRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromrating_userRecursive1']
    post: Union[bool, 'FindManypostArgsFromrating_userRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_userRecursive1']


class userIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_userRecursive2']
    contact: Union[bool, 'FindManycontactArgsFromrating_userRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFromrating_userRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromrating_userRecursive2']
    post: Union[bool, 'FindManypostArgsFromrating_userRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_userRecursive2']


class userIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_userRecursive3']
    contact: Union[bool, 'FindManycontactArgsFromrating_userRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFromrating_userRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromrating_userRecursive3']
    post: Union[bool, 'FindManypostArgsFromrating_userRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_userRecursive3']


class userIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_userRecursive4']
    contact: Union[bool, 'FindManycontactArgsFromrating_userRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFromrating_userRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromrating_userRecursive4']
    post: Union[bool, 'FindManypostArgsFromrating_userRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_userRecursive4']


class userIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class userArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManyuserArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive1']
    user1: Union[bool, 'userArgsFromrating_userRecursive1']
    user2: Union[bool, 'userArgsFromrating_userRecursive1']


class rating_userIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive2']
    user1: Union[bool, 'userArgsFromrating_userRecursive2']
    user2: Union[bool, 'userArgsFromrating_userRecursive2']


class rating_userIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive3']
    user1: Union[bool, 'userArgsFromrating_userRecursive3']
    user2: Union[bool, 'userArgsFromrating_userRecursive3']


class rating_userIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive4']
    user1: Union[bool, 'userArgsFromrating_userRecursive4']
    user2: Union[bool, 'userArgsFromrating_userRecursive4']


class rating_userIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class rating_userArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManyrating_userArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive1']
    user1: Union[bool, 'userArgsFromrating_userRecursive1']
    user2: Union[bool, 'userArgsFromrating_userRecursive1']


class rating_comIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive2']
    user1: Union[bool, 'userArgsFromrating_userRecursive2']
    user2: Union[bool, 'userArgsFromrating_userRecursive2']


class rating_comIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive3']
    user1: Union[bool, 'userArgsFromrating_userRecursive3']
    user2: Union[bool, 'userArgsFromrating_userRecursive3']


class rating_comIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive4']
    user1: Union[bool, 'userArgsFromrating_userRecursive4']
    user2: Union[bool, 'userArgsFromrating_userRecursive4']


class rating_comIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class rating_comArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManyrating_comArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    user: Union[bool, 'userArgsFromrating_userRecursive1']


class contactIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    user: Union[bool, 'userArgsFromrating_userRecursive2']


class contactIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    user: Union[bool, 'userArgsFromrating_userRecursive3']


class contactIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    user: Union[bool, 'userArgsFromrating_userRecursive4']


class contactIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class contactArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManycontactArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    experiences: Union[bool, 'FindManyexperienceArgsFromrating_userRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_userRecursive1']


class categoryIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    experiences: Union[bool, 'FindManyexperienceArgsFromrating_userRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_userRecursive2']


class categoryIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    experiences: Union[bool, 'FindManyexperienceArgsFromrating_userRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_userRecursive3']


class categoryIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    experiences: Union[bool, 'FindManyexperienceArgsFromrating_userRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_userRecursive4']


class categoryIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class categoryArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManycategoryArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    category: Union[bool, 'categoryArgsFromrating_userRecursive1']
    user: Union[bool, 'userArgsFromrating_userRecursive1']


class experienceIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    category: Union[bool, 'categoryArgsFromrating_userRecursive2']
    user: Union[bool, 'userArgsFromrating_userRecursive2']


class experienceIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    category: Union[bool, 'categoryArgsFromrating_userRecursive3']
    user: Union[bool, 'userArgsFromrating_userRecursive3']


class experienceIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    category: Union[bool, 'categoryArgsFromrating_userRecursive4']
    user: Union[bool, 'userArgsFromrating_userRecursive4']


class experienceIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class experienceArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManyexperienceArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_userRecursive1']


class careerIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_userRecursive2']


class careerIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_userRecursive3']


class careerIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_userRecursive4']


class careerIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class careerArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManycareerArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    career: Union[bool, 'careerArgsFromrating_userRecursive1']
    user: Union[bool, 'userArgsFromrating_userRecursive1']


class user_careerIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    career: Union[bool, 'careerArgsFromrating_userRecursive2']
    user: Union[bool, 'userArgsFromrating_userRecursive2']


class user_careerIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    career: Union[bool, 'careerArgsFromrating_userRecursive3']
    user: Union[bool, 'userArgsFromrating_userRecursive3']


class user_careerIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    career: Union[bool, 'careerArgsFromrating_userRecursive4']
    user: Union[bool, 'userArgsFromrating_userRecursive4']


class user_careerIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class user_careerArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManyuser_careerArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_userRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromrating_userRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_userRecursive1']
    post: Union[bool, 'FindManypostArgsFromrating_userRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive1']


class jobIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_userRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromrating_userRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_userRecursive2']
    post: Union[bool, 'FindManypostArgsFromrating_userRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive2']


class jobIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_userRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromrating_userRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_userRecursive3']
    post: Union[bool, 'FindManypostArgsFromrating_userRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive3']


class jobIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_userRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromrating_userRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_userRecursive4']
    post: Union[bool, 'FindManypostArgsFromrating_userRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFromrating_userRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFromrating_userRecursive4']


class jobIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class jobArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManyjobArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive1']
    user: Union[bool, 'userArgsFromrating_userRecursive1']


class historyIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive2']
    user: Union[bool, 'userArgsFromrating_userRecursive2']


class historyIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive3']
    user: Union[bool, 'userArgsFromrating_userRecursive3']


class historyIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive4']
    user: Union[bool, 'userArgsFromrating_userRecursive4']


class historyIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class historyArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManyhistoryArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    category: Union[bool, 'categoryArgsFromrating_userRecursive1']
    job: Union[bool, 'jobArgsFromrating_userRecursive1']


class job_expIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    category: Union[bool, 'categoryArgsFromrating_userRecursive2']
    job: Union[bool, 'jobArgsFromrating_userRecursive2']


class job_expIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    category: Union[bool, 'categoryArgsFromrating_userRecursive3']
    job: Union[bool, 'jobArgsFromrating_userRecursive3']


class job_expIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    category: Union[bool, 'categoryArgsFromrating_userRecursive4']
    job: Union[bool, 'jobArgsFromrating_userRecursive4']


class job_expIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class job_expArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManyjob_expArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive1']
    user: Union[bool, 'userArgsFromrating_userRecursive1']


class bookmarkIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive2']
    user: Union[bool, 'userArgsFromrating_userRecursive2']


class bookmarkIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive3']
    user: Union[bool, 'userArgsFromrating_userRecursive3']


class bookmarkIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive4']
    user: Union[bool, 'userArgsFromrating_userRecursive4']


class bookmarkIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class bookmarkArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManybookmarkArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFromrating_user(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive1']
    user: Union[bool, 'userArgsFromrating_userRecursive1']


class postIncludeFromrating_userRecursive1(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive2']
    user: Union[bool, 'userArgsFromrating_userRecursive2']


class postIncludeFromrating_userRecursive2(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive3']
    user: Union[bool, 'userArgsFromrating_userRecursive3']


class postIncludeFromrating_userRecursive3(TypedDict, total=False):
    """Relational arguments for rating_user"""
    job: Union[bool, 'jobArgsFromrating_userRecursive4']
    user: Union[bool, 'userArgsFromrating_userRecursive4']


class postIncludeFromrating_userRecursive4(TypedDict, total=False):
    """Relational arguments for rating_user"""

    

class postArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    
    

class FindManypostArgsFromrating_user(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFromrating_userRecursive1(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFromrating_userRecursive2(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFromrating_userRecursive3(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFromrating_userRecursive4(TypedDict, total=False):
    """Arguments for rating_user"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManyrating_userArgs = FindManyrating_userArgsFromrating_user
FindFirstrating_userArgs = FindManyrating_userArgsFromrating_user


    

class rating_userWhereInput(TypedDict, total=False):
    """rating_user arguments for searching"""
    rating_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    friendly_rating: Union[_float, 'types.FloatFilter']
    efficiency_rating: Union[_float, 'types.FloatFilter']
    accuracy_rating: Union[_float, 'types.FloatFilter']
    user_id1: Union[_int, 'types.IntFilter']
    user_id2: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user1: 'userRelationFilter'
    user2: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['rating_userWhereInputRecursive1', List['rating_userWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['rating_userWhereInputRecursive1']
    OR: List['rating_userWhereInputRecursive1']
    NOT: List['rating_userWhereInputRecursive1']


class rating_userWhereInputRecursive1(TypedDict, total=False):
    """rating_user arguments for searching"""
    rating_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    friendly_rating: Union[_float, 'types.FloatFilter']
    efficiency_rating: Union[_float, 'types.FloatFilter']
    accuracy_rating: Union[_float, 'types.FloatFilter']
    user_id1: Union[_int, 'types.IntFilter']
    user_id2: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user1: 'userRelationFilter'
    user2: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['rating_userWhereInputRecursive2', List['rating_userWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['rating_userWhereInputRecursive2']
    OR: List['rating_userWhereInputRecursive2']
    NOT: List['rating_userWhereInputRecursive2']


class rating_userWhereInputRecursive2(TypedDict, total=False):
    """rating_user arguments for searching"""
    rating_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    friendly_rating: Union[_float, 'types.FloatFilter']
    efficiency_rating: Union[_float, 'types.FloatFilter']
    accuracy_rating: Union[_float, 'types.FloatFilter']
    user_id1: Union[_int, 'types.IntFilter']
    user_id2: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user1: 'userRelationFilter'
    user2: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['rating_userWhereInputRecursive3', List['rating_userWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['rating_userWhereInputRecursive3']
    OR: List['rating_userWhereInputRecursive3']
    NOT: List['rating_userWhereInputRecursive3']


class rating_userWhereInputRecursive3(TypedDict, total=False):
    """rating_user arguments for searching"""
    rating_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    friendly_rating: Union[_float, 'types.FloatFilter']
    efficiency_rating: Union[_float, 'types.FloatFilter']
    accuracy_rating: Union[_float, 'types.FloatFilter']
    user_id1: Union[_int, 'types.IntFilter']
    user_id2: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user1: 'userRelationFilter'
    user2: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['rating_userWhereInputRecursive4', List['rating_userWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['rating_userWhereInputRecursive4']
    OR: List['rating_userWhereInputRecursive4']
    NOT: List['rating_userWhereInputRecursive4']


class rating_userWhereInputRecursive4(TypedDict, total=False):
    """rating_user arguments for searching"""
    rating_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    friendly_rating: Union[_float, 'types.FloatFilter']
    efficiency_rating: Union[_float, 'types.FloatFilter']
    accuracy_rating: Union[_float, 'types.FloatFilter']
    user_id1: Union[_int, 'types.IntFilter']
    user_id2: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user1: 'userRelationFilter'
    user2: 'userRelationFilter'



# aggregate rating_user types


    

class rating_userScalarWhereWithAggregatesInput(TypedDict, total=False):
    """rating_user arguments for searching"""
    rating_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    friendly_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    efficiency_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    accuracy_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id1: Union[_int, 'types.IntWithAggregatesFilter']
    user_id2: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['rating_userScalarWhereWithAggregatesInputRecursive1']
    OR: List['rating_userScalarWhereWithAggregatesInputRecursive1']
    NOT: List['rating_userScalarWhereWithAggregatesInputRecursive1']


class rating_userScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """rating_user arguments for searching"""
    rating_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    friendly_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    efficiency_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    accuracy_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id1: Union[_int, 'types.IntWithAggregatesFilter']
    user_id2: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['rating_userScalarWhereWithAggregatesInputRecursive2']
    OR: List['rating_userScalarWhereWithAggregatesInputRecursive2']
    NOT: List['rating_userScalarWhereWithAggregatesInputRecursive2']


class rating_userScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """rating_user arguments for searching"""
    rating_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    friendly_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    efficiency_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    accuracy_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id1: Union[_int, 'types.IntWithAggregatesFilter']
    user_id2: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['rating_userScalarWhereWithAggregatesInputRecursive3']
    OR: List['rating_userScalarWhereWithAggregatesInputRecursive3']
    NOT: List['rating_userScalarWhereWithAggregatesInputRecursive3']


class rating_userScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """rating_user arguments for searching"""
    rating_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    friendly_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    efficiency_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    accuracy_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id1: Union[_int, 'types.IntWithAggregatesFilter']
    user_id2: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['rating_userScalarWhereWithAggregatesInputRecursive4']
    OR: List['rating_userScalarWhereWithAggregatesInputRecursive4']
    NOT: List['rating_userScalarWhereWithAggregatesInputRecursive4']


class rating_userScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """rating_user arguments for searching"""
    rating_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    friendly_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    efficiency_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    accuracy_rating: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id1: Union[_int, 'types.IntWithAggregatesFilter']
    user_id2: Union[_int, 'types.IntWithAggregatesFilter']



class rating_userGroupByOutput(TypedDict, total=False):
    rating_id: _int
    job_id: _int
    friendly_rating: _float
    efficiency_rating: _float
    accuracy_rating: _float
    user_id1: _int
    user_id2: _int
    _sum: 'rating_userSumAggregateOutput'
    _avg: 'rating_userAvgAggregateOutput'
    _min: 'rating_userMinAggregateOutput'
    _max: 'rating_userMaxAggregateOutput'
    _count: 'rating_userCountAggregateOutput'


class rating_userAvgAggregateOutput(TypedDict, total=False):
    """rating_user output for aggregating averages"""
    rating_id: float
    job_id: float
    friendly_rating: float
    efficiency_rating: float
    accuracy_rating: float
    user_id1: float
    user_id2: float


class rating_userSumAggregateOutput(TypedDict, total=False):
    """rating_user output for aggregating sums"""
    rating_id: _int
    job_id: _int
    friendly_rating: _float
    efficiency_rating: _float
    accuracy_rating: _float
    user_id1: _int
    user_id2: _int


class rating_userScalarAggregateOutput(TypedDict, total=False):
    """rating_user output including scalar fields"""
    rating_id: _int
    job_id: _int
    friendly_rating: _float
    efficiency_rating: _float
    accuracy_rating: _float
    user_id1: _int
    user_id2: _int


rating_userMinAggregateOutput = rating_userScalarAggregateOutput
rating_userMaxAggregateOutput = rating_userScalarAggregateOutput


class rating_userMaxAggregateInput(TypedDict, total=False):
    """rating_user input for aggregating by max"""
    rating_id: bool
    job_id: bool
    friendly_rating: bool
    efficiency_rating: bool
    accuracy_rating: bool
    user_id1: bool
    user_id2: bool


class rating_userMinAggregateInput(TypedDict, total=False):
    """rating_user input for aggregating by min"""
    rating_id: bool
    job_id: bool
    friendly_rating: bool
    efficiency_rating: bool
    accuracy_rating: bool
    user_id1: bool
    user_id2: bool


class rating_userNumberAggregateInput(TypedDict, total=False):
    """rating_user input for aggregating numbers"""
    rating_id: bool
    job_id: bool
    friendly_rating: bool
    efficiency_rating: bool
    accuracy_rating: bool
    user_id1: bool
    user_id2: bool


rating_userAvgAggregateInput = rating_userNumberAggregateInput
rating_userSumAggregateInput = rating_userNumberAggregateInput


rating_userCountAggregateInput = TypedDict(
    'rating_userCountAggregateInput',
    {
        'rating_id': bool,
        'job_id': bool,
        'friendly_rating': bool,
        'efficiency_rating': bool,
        'accuracy_rating': bool,
        'user_id1': bool,
        'user_id2': bool,
        '_all': bool,
    },
    total=False,
)

rating_userCountAggregateOutput = TypedDict(
    'rating_userCountAggregateOutput',
    {
        'rating_id': int,
        'job_id': int,
        'friendly_rating': int,
        'efficiency_rating': int,
        'accuracy_rating': int,
        'user_id1': int,
        'user_id2': int,
        '_all': int,
    },
    total=False,
)


rating_userKeys = Literal[
    'rating_id',
    'job_id',
    'friendly_rating',
    'efficiency_rating',
    'accuracy_rating',
    'user_id1',
    'user_id2',
    'job',
    'user1',
    'user2',
]
rating_userScalarFieldKeys = Literal[
    'rating_id',
    'job_id',
    'friendly_rating',
    'efficiency_rating',
    'accuracy_rating',
    'user_id1',
    'user_id2',
]
rating_userScalarFieldKeysT = TypeVar('rating_userScalarFieldKeysT', bound=rating_userScalarFieldKeys)

rating_userRelationalFieldKeys = Literal[
        'job',
        'user1',
        'user2',
    ]

# rating_com types

class rating_comOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the rating_com create method"""
    rating_id: _int
    job_id: _int
    rating: _float
    user_id1: _int
    user_id2: _int
    job: 'jobCreateNestedWithoutRelationsInput'
    user1: 'userCreateNestedWithoutRelationsInput'
    user2: 'userCreateNestedWithoutRelationsInput'


class rating_comCreateInput(rating_comOptionalCreateInput):
    """Required arguments to the rating_com create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class rating_comOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the rating_com create method, without relations"""
    rating_id: _int
    job_id: _int
    rating: _float
    user_id1: _int
    user_id2: _int


class rating_comCreateWithoutRelationsInput(rating_comOptionalCreateWithoutRelationsInput):
    """Required arguments to the rating_com create method, without relations"""


class rating_comCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'rating_comCreateWithoutRelationsInput'
    connect: 'rating_comWhereUniqueInput'


class rating_comCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['rating_comCreateWithoutRelationsInput', List['rating_comCreateWithoutRelationsInput']]
    connect: Union['rating_comWhereUniqueInput', List['rating_comWhereUniqueInput']]


_rating_comWhereUnique_rating_id_Input = TypedDict(
    '_rating_comWhereUnique_rating_id_Input',
    {
        'rating_id': '_int',
    },
    total=True
)

rating_comWhereUniqueInput = _rating_comWhereUnique_rating_id_Input


class rating_comUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    rating_id: Union[AtomicIntInput, _int]
    rating: Union[AtomicFloatInput, _float]
    job: 'jobUpdateOneWithoutRelationsInput'
    user1: 'userUpdateOneWithoutRelationsInput'
    user2: 'userUpdateOneWithoutRelationsInput'


class rating_comUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    rating_id: Union[AtomicIntInput, _int]
    rating: Union[AtomicFloatInput, _float]


class rating_comUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['rating_comCreateWithoutRelationsInput']
    connect: List['rating_comWhereUniqueInput']
    set: List['rating_comWhereUniqueInput']
    disconnect: List['rating_comWhereUniqueInput']
    delete: List['rating_comWhereUniqueInput']

    # TODO
    # update: List['rating_comUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['rating_comUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['rating_comScalarWhereInput']
    # upsert: List['rating_comUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['rating_comCreateOrConnectWithoutRelationsInput']


class rating_comUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'rating_comCreateWithoutRelationsInput'
    connect: 'rating_comWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'rating_comUpdateInput'
    # upsert: 'rating_comUpsertWithoutRelationsInput'
    # connectOrCreate: 'rating_comCreateOrConnectWithoutRelationsInput'


class rating_comUpsertInput(TypedDict):
    create: 'rating_comCreateInput'
    update: 'rating_comUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_rating_com_rating_id_OrderByInput = TypedDict(
    '_rating_com_rating_id_OrderByInput',
    {
        'rating_id': 'SortOrder',
    },
    total=True
)

_rating_com_job_id_OrderByInput = TypedDict(
    '_rating_com_job_id_OrderByInput',
    {
        'job_id': 'SortOrder',
    },
    total=True
)

_rating_com_rating_OrderByInput = TypedDict(
    '_rating_com_rating_OrderByInput',
    {
        'rating': 'SortOrder',
    },
    total=True
)

_rating_com_user_id1_OrderByInput = TypedDict(
    '_rating_com_user_id1_OrderByInput',
    {
        'user_id1': 'SortOrder',
    },
    total=True
)

_rating_com_user_id2_OrderByInput = TypedDict(
    '_rating_com_user_id2_OrderByInput',
    {
        'user_id2': 'SortOrder',
    },
    total=True
)

rating_comOrderByInput = Union[
    '_rating_com_rating_id_OrderByInput',
    '_rating_com_job_id_OrderByInput',
    '_rating_com_rating_OrderByInput',
    '_rating_com_user_id1_OrderByInput',
    '_rating_com_user_id2_OrderByInput',
]



# recursive rating_com types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

rating_comRelationFilter = TypedDict(
    'rating_comRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class rating_comListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class rating_comInclude(TypedDict, total=False):
    """rating_com relational arguments"""
    job: Union[bool, 'jobArgsFromrating_com']
    user1: Union[bool, 'userArgsFromrating_com']
    user2: Union[bool, 'userArgsFromrating_com']


    

class userIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_comRecursive1']
    contact: Union[bool, 'FindManycontactArgsFromrating_comRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFromrating_comRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromrating_comRecursive1']
    post: Union[bool, 'FindManypostArgsFromrating_comRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_comRecursive1']


class userIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_comRecursive2']
    contact: Union[bool, 'FindManycontactArgsFromrating_comRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFromrating_comRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromrating_comRecursive2']
    post: Union[bool, 'FindManypostArgsFromrating_comRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_comRecursive2']


class userIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_comRecursive3']
    contact: Union[bool, 'FindManycontactArgsFromrating_comRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFromrating_comRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromrating_comRecursive3']
    post: Union[bool, 'FindManypostArgsFromrating_comRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_comRecursive3']


class userIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_comRecursive4']
    contact: Union[bool, 'FindManycontactArgsFromrating_comRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFromrating_comRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromrating_comRecursive4']
    post: Union[bool, 'FindManypostArgsFromrating_comRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_comRecursive4']


class userIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class userArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManyuserArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive1']
    user1: Union[bool, 'userArgsFromrating_comRecursive1']
    user2: Union[bool, 'userArgsFromrating_comRecursive1']


class rating_userIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive2']
    user1: Union[bool, 'userArgsFromrating_comRecursive2']
    user2: Union[bool, 'userArgsFromrating_comRecursive2']


class rating_userIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive3']
    user1: Union[bool, 'userArgsFromrating_comRecursive3']
    user2: Union[bool, 'userArgsFromrating_comRecursive3']


class rating_userIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive4']
    user1: Union[bool, 'userArgsFromrating_comRecursive4']
    user2: Union[bool, 'userArgsFromrating_comRecursive4']


class rating_userIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class rating_userArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManyrating_userArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive1']
    user1: Union[bool, 'userArgsFromrating_comRecursive1']
    user2: Union[bool, 'userArgsFromrating_comRecursive1']


class rating_comIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive2']
    user1: Union[bool, 'userArgsFromrating_comRecursive2']
    user2: Union[bool, 'userArgsFromrating_comRecursive2']


class rating_comIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive3']
    user1: Union[bool, 'userArgsFromrating_comRecursive3']
    user2: Union[bool, 'userArgsFromrating_comRecursive3']


class rating_comIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive4']
    user1: Union[bool, 'userArgsFromrating_comRecursive4']
    user2: Union[bool, 'userArgsFromrating_comRecursive4']


class rating_comIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class rating_comArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManyrating_comArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    user: Union[bool, 'userArgsFromrating_comRecursive1']


class contactIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    user: Union[bool, 'userArgsFromrating_comRecursive2']


class contactIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    user: Union[bool, 'userArgsFromrating_comRecursive3']


class contactIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    user: Union[bool, 'userArgsFromrating_comRecursive4']


class contactIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class contactArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManycontactArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    experiences: Union[bool, 'FindManyexperienceArgsFromrating_comRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_comRecursive1']


class categoryIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    experiences: Union[bool, 'FindManyexperienceArgsFromrating_comRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_comRecursive2']


class categoryIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    experiences: Union[bool, 'FindManyexperienceArgsFromrating_comRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_comRecursive3']


class categoryIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    experiences: Union[bool, 'FindManyexperienceArgsFromrating_comRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_comRecursive4']


class categoryIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class categoryArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManycategoryArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    category: Union[bool, 'categoryArgsFromrating_comRecursive1']
    user: Union[bool, 'userArgsFromrating_comRecursive1']


class experienceIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    category: Union[bool, 'categoryArgsFromrating_comRecursive2']
    user: Union[bool, 'userArgsFromrating_comRecursive2']


class experienceIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    category: Union[bool, 'categoryArgsFromrating_comRecursive3']
    user: Union[bool, 'userArgsFromrating_comRecursive3']


class experienceIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    category: Union[bool, 'categoryArgsFromrating_comRecursive4']
    user: Union[bool, 'userArgsFromrating_comRecursive4']


class experienceIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class experienceArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManyexperienceArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_comRecursive1']


class careerIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_comRecursive2']


class careerIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_comRecursive3']


class careerIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromrating_comRecursive4']


class careerIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class careerArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManycareerArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    career: Union[bool, 'careerArgsFromrating_comRecursive1']
    user: Union[bool, 'userArgsFromrating_comRecursive1']


class user_careerIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    career: Union[bool, 'careerArgsFromrating_comRecursive2']
    user: Union[bool, 'userArgsFromrating_comRecursive2']


class user_careerIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    career: Union[bool, 'careerArgsFromrating_comRecursive3']
    user: Union[bool, 'userArgsFromrating_comRecursive3']


class user_careerIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    career: Union[bool, 'careerArgsFromrating_comRecursive4']
    user: Union[bool, 'userArgsFromrating_comRecursive4']


class user_careerIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class user_careerArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManyuser_careerArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_comRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromrating_comRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_comRecursive1']
    post: Union[bool, 'FindManypostArgsFromrating_comRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive1']


class jobIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_comRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromrating_comRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_comRecursive2']
    post: Union[bool, 'FindManypostArgsFromrating_comRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive2']


class jobIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_comRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromrating_comRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_comRecursive3']
    post: Union[bool, 'FindManypostArgsFromrating_comRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive3']


class jobIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromrating_comRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromrating_comRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromrating_comRecursive4']
    post: Union[bool, 'FindManypostArgsFromrating_comRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFromrating_comRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFromrating_comRecursive4']


class jobIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class jobArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManyjobArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive1']
    user: Union[bool, 'userArgsFromrating_comRecursive1']


class historyIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive2']
    user: Union[bool, 'userArgsFromrating_comRecursive2']


class historyIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive3']
    user: Union[bool, 'userArgsFromrating_comRecursive3']


class historyIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive4']
    user: Union[bool, 'userArgsFromrating_comRecursive4']


class historyIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class historyArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManyhistoryArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    category: Union[bool, 'categoryArgsFromrating_comRecursive1']
    job: Union[bool, 'jobArgsFromrating_comRecursive1']


class job_expIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    category: Union[bool, 'categoryArgsFromrating_comRecursive2']
    job: Union[bool, 'jobArgsFromrating_comRecursive2']


class job_expIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    category: Union[bool, 'categoryArgsFromrating_comRecursive3']
    job: Union[bool, 'jobArgsFromrating_comRecursive3']


class job_expIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    category: Union[bool, 'categoryArgsFromrating_comRecursive4']
    job: Union[bool, 'jobArgsFromrating_comRecursive4']


class job_expIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class job_expArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManyjob_expArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive1']
    user: Union[bool, 'userArgsFromrating_comRecursive1']


class bookmarkIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive2']
    user: Union[bool, 'userArgsFromrating_comRecursive2']


class bookmarkIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive3']
    user: Union[bool, 'userArgsFromrating_comRecursive3']


class bookmarkIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive4']
    user: Union[bool, 'userArgsFromrating_comRecursive4']


class bookmarkIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class bookmarkArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManybookmarkArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFromrating_com(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive1']
    user: Union[bool, 'userArgsFromrating_comRecursive1']


class postIncludeFromrating_comRecursive1(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive2']
    user: Union[bool, 'userArgsFromrating_comRecursive2']


class postIncludeFromrating_comRecursive2(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive3']
    user: Union[bool, 'userArgsFromrating_comRecursive3']


class postIncludeFromrating_comRecursive3(TypedDict, total=False):
    """Relational arguments for rating_com"""
    job: Union[bool, 'jobArgsFromrating_comRecursive4']
    user: Union[bool, 'userArgsFromrating_comRecursive4']


class postIncludeFromrating_comRecursive4(TypedDict, total=False):
    """Relational arguments for rating_com"""

    

class postArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    
    

class FindManypostArgsFromrating_com(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFromrating_comRecursive1(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFromrating_comRecursive2(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFromrating_comRecursive3(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFromrating_comRecursive4(TypedDict, total=False):
    """Arguments for rating_com"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManyrating_comArgs = FindManyrating_comArgsFromrating_com
FindFirstrating_comArgs = FindManyrating_comArgsFromrating_com


    

class rating_comWhereInput(TypedDict, total=False):
    """rating_com arguments for searching"""
    rating_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    user_id1: Union[_int, 'types.IntFilter']
    user_id2: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user1: 'userRelationFilter'
    user2: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['rating_comWhereInputRecursive1', List['rating_comWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['rating_comWhereInputRecursive1']
    OR: List['rating_comWhereInputRecursive1']
    NOT: List['rating_comWhereInputRecursive1']


class rating_comWhereInputRecursive1(TypedDict, total=False):
    """rating_com arguments for searching"""
    rating_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    user_id1: Union[_int, 'types.IntFilter']
    user_id2: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user1: 'userRelationFilter'
    user2: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['rating_comWhereInputRecursive2', List['rating_comWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['rating_comWhereInputRecursive2']
    OR: List['rating_comWhereInputRecursive2']
    NOT: List['rating_comWhereInputRecursive2']


class rating_comWhereInputRecursive2(TypedDict, total=False):
    """rating_com arguments for searching"""
    rating_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    user_id1: Union[_int, 'types.IntFilter']
    user_id2: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user1: 'userRelationFilter'
    user2: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['rating_comWhereInputRecursive3', List['rating_comWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['rating_comWhereInputRecursive3']
    OR: List['rating_comWhereInputRecursive3']
    NOT: List['rating_comWhereInputRecursive3']


class rating_comWhereInputRecursive3(TypedDict, total=False):
    """rating_com arguments for searching"""
    rating_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    user_id1: Union[_int, 'types.IntFilter']
    user_id2: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user1: 'userRelationFilter'
    user2: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['rating_comWhereInputRecursive4', List['rating_comWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['rating_comWhereInputRecursive4']
    OR: List['rating_comWhereInputRecursive4']
    NOT: List['rating_comWhereInputRecursive4']


class rating_comWhereInputRecursive4(TypedDict, total=False):
    """rating_com arguments for searching"""
    rating_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    user_id1: Union[_int, 'types.IntFilter']
    user_id2: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user1: 'userRelationFilter'
    user2: 'userRelationFilter'



# aggregate rating_com types


    

class rating_comScalarWhereWithAggregatesInput(TypedDict, total=False):
    """rating_com arguments for searching"""
    rating_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id1: Union[_int, 'types.IntWithAggregatesFilter']
    user_id2: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['rating_comScalarWhereWithAggregatesInputRecursive1']
    OR: List['rating_comScalarWhereWithAggregatesInputRecursive1']
    NOT: List['rating_comScalarWhereWithAggregatesInputRecursive1']


class rating_comScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """rating_com arguments for searching"""
    rating_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id1: Union[_int, 'types.IntWithAggregatesFilter']
    user_id2: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['rating_comScalarWhereWithAggregatesInputRecursive2']
    OR: List['rating_comScalarWhereWithAggregatesInputRecursive2']
    NOT: List['rating_comScalarWhereWithAggregatesInputRecursive2']


class rating_comScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """rating_com arguments for searching"""
    rating_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id1: Union[_int, 'types.IntWithAggregatesFilter']
    user_id2: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['rating_comScalarWhereWithAggregatesInputRecursive3']
    OR: List['rating_comScalarWhereWithAggregatesInputRecursive3']
    NOT: List['rating_comScalarWhereWithAggregatesInputRecursive3']


class rating_comScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """rating_com arguments for searching"""
    rating_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id1: Union[_int, 'types.IntWithAggregatesFilter']
    user_id2: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['rating_comScalarWhereWithAggregatesInputRecursive4']
    OR: List['rating_comScalarWhereWithAggregatesInputRecursive4']
    NOT: List['rating_comScalarWhereWithAggregatesInputRecursive4']


class rating_comScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """rating_com arguments for searching"""
    rating_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id1: Union[_int, 'types.IntWithAggregatesFilter']
    user_id2: Union[_int, 'types.IntWithAggregatesFilter']



class rating_comGroupByOutput(TypedDict, total=False):
    rating_id: _int
    job_id: _int
    rating: _float
    user_id1: _int
    user_id2: _int
    _sum: 'rating_comSumAggregateOutput'
    _avg: 'rating_comAvgAggregateOutput'
    _min: 'rating_comMinAggregateOutput'
    _max: 'rating_comMaxAggregateOutput'
    _count: 'rating_comCountAggregateOutput'


class rating_comAvgAggregateOutput(TypedDict, total=False):
    """rating_com output for aggregating averages"""
    rating_id: float
    job_id: float
    rating: float
    user_id1: float
    user_id2: float


class rating_comSumAggregateOutput(TypedDict, total=False):
    """rating_com output for aggregating sums"""
    rating_id: _int
    job_id: _int
    rating: _float
    user_id1: _int
    user_id2: _int


class rating_comScalarAggregateOutput(TypedDict, total=False):
    """rating_com output including scalar fields"""
    rating_id: _int
    job_id: _int
    rating: _float
    user_id1: _int
    user_id2: _int


rating_comMinAggregateOutput = rating_comScalarAggregateOutput
rating_comMaxAggregateOutput = rating_comScalarAggregateOutput


class rating_comMaxAggregateInput(TypedDict, total=False):
    """rating_com input for aggregating by max"""
    rating_id: bool
    job_id: bool
    rating: bool
    user_id1: bool
    user_id2: bool


class rating_comMinAggregateInput(TypedDict, total=False):
    """rating_com input for aggregating by min"""
    rating_id: bool
    job_id: bool
    rating: bool
    user_id1: bool
    user_id2: bool


class rating_comNumberAggregateInput(TypedDict, total=False):
    """rating_com input for aggregating numbers"""
    rating_id: bool
    job_id: bool
    rating: bool
    user_id1: bool
    user_id2: bool


rating_comAvgAggregateInput = rating_comNumberAggregateInput
rating_comSumAggregateInput = rating_comNumberAggregateInput


rating_comCountAggregateInput = TypedDict(
    'rating_comCountAggregateInput',
    {
        'rating_id': bool,
        'job_id': bool,
        'rating': bool,
        'user_id1': bool,
        'user_id2': bool,
        '_all': bool,
    },
    total=False,
)

rating_comCountAggregateOutput = TypedDict(
    'rating_comCountAggregateOutput',
    {
        'rating_id': int,
        'job_id': int,
        'rating': int,
        'user_id1': int,
        'user_id2': int,
        '_all': int,
    },
    total=False,
)


rating_comKeys = Literal[
    'rating_id',
    'job_id',
    'rating',
    'user_id1',
    'user_id2',
    'job',
    'user1',
    'user2',
]
rating_comScalarFieldKeys = Literal[
    'rating_id',
    'job_id',
    'rating',
    'user_id1',
    'user_id2',
]
rating_comScalarFieldKeysT = TypeVar('rating_comScalarFieldKeysT', bound=rating_comScalarFieldKeys)

rating_comRelationalFieldKeys = Literal[
        'job',
        'user1',
        'user2',
    ]

# contact types

class contactOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the contact create method"""
    contact_id: _int
    user_id: _int
    user: 'userCreateNestedWithoutRelationsInput'


class contactCreateInput(contactOptionalCreateInput):
    """Required arguments to the contact create method"""
    facebook: _str
    instagram: _str
    linkedin: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class contactOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the contact create method, without relations"""
    contact_id: _int
    user_id: _int


class contactCreateWithoutRelationsInput(contactOptionalCreateWithoutRelationsInput):
    """Required arguments to the contact create method, without relations"""
    facebook: _str
    instagram: _str
    linkedin: _str


class contactCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'contactCreateWithoutRelationsInput'
    connect: 'contactWhereUniqueInput'


class contactCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['contactCreateWithoutRelationsInput', List['contactCreateWithoutRelationsInput']]
    connect: Union['contactWhereUniqueInput', List['contactWhereUniqueInput']]


_contactWhereUnique_contact_id_Input = TypedDict(
    '_contactWhereUnique_contact_id_Input',
    {
        'contact_id': '_int',
    },
    total=True
)

contactWhereUniqueInput = _contactWhereUnique_contact_id_Input


class contactUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    contact_id: Union[AtomicIntInput, _int]
    facebook: _str
    instagram: _str
    linkedin: _str
    user: 'userUpdateOneWithoutRelationsInput'


class contactUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    contact_id: Union[AtomicIntInput, _int]
    facebook: _str
    instagram: _str
    linkedin: _str


class contactUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['contactCreateWithoutRelationsInput']
    connect: List['contactWhereUniqueInput']
    set: List['contactWhereUniqueInput']
    disconnect: List['contactWhereUniqueInput']
    delete: List['contactWhereUniqueInput']

    # TODO
    # update: List['contactUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['contactUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['contactScalarWhereInput']
    # upsert: List['contactUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['contactCreateOrConnectWithoutRelationsInput']


class contactUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'contactCreateWithoutRelationsInput'
    connect: 'contactWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'contactUpdateInput'
    # upsert: 'contactUpsertWithoutRelationsInput'
    # connectOrCreate: 'contactCreateOrConnectWithoutRelationsInput'


class contactUpsertInput(TypedDict):
    create: 'contactCreateInput'
    update: 'contactUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_contact_contact_id_OrderByInput = TypedDict(
    '_contact_contact_id_OrderByInput',
    {
        'contact_id': 'SortOrder',
    },
    total=True
)

_contact_user_id_OrderByInput = TypedDict(
    '_contact_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_contact_facebook_OrderByInput = TypedDict(
    '_contact_facebook_OrderByInput',
    {
        'facebook': 'SortOrder',
    },
    total=True
)

_contact_instagram_OrderByInput = TypedDict(
    '_contact_instagram_OrderByInput',
    {
        'instagram': 'SortOrder',
    },
    total=True
)

_contact_linkedin_OrderByInput = TypedDict(
    '_contact_linkedin_OrderByInput',
    {
        'linkedin': 'SortOrder',
    },
    total=True
)

contactOrderByInput = Union[
    '_contact_contact_id_OrderByInput',
    '_contact_user_id_OrderByInput',
    '_contact_facebook_OrderByInput',
    '_contact_instagram_OrderByInput',
    '_contact_linkedin_OrderByInput',
]



# recursive contact types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

contactRelationFilter = TypedDict(
    'contactRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class contactListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class contactInclude(TypedDict, total=False):
    """contact relational arguments"""
    user: Union[bool, 'userArgsFromcontact']


    

class userIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcontactRecursive1']
    contact: Union[bool, 'FindManycontactArgsFromcontactRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFromcontactRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromcontactRecursive1']
    post: Union[bool, 'FindManypostArgsFromcontactRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcontactRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcontactRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcontactRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcontactRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcontactRecursive1']


class userIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcontactRecursive2']
    contact: Union[bool, 'FindManycontactArgsFromcontactRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFromcontactRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromcontactRecursive2']
    post: Union[bool, 'FindManypostArgsFromcontactRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcontactRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcontactRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcontactRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcontactRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcontactRecursive2']


class userIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcontactRecursive3']
    contact: Union[bool, 'FindManycontactArgsFromcontactRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFromcontactRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromcontactRecursive3']
    post: Union[bool, 'FindManypostArgsFromcontactRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcontactRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcontactRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcontactRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcontactRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcontactRecursive3']


class userIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcontactRecursive4']
    contact: Union[bool, 'FindManycontactArgsFromcontactRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFromcontactRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromcontactRecursive4']
    post: Union[bool, 'FindManypostArgsFromcontactRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcontactRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcontactRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcontactRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcontactRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcontactRecursive4']


class userIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class userArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManyuserArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive1']
    user1: Union[bool, 'userArgsFromcontactRecursive1']
    user2: Union[bool, 'userArgsFromcontactRecursive1']


class rating_userIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive2']
    user1: Union[bool, 'userArgsFromcontactRecursive2']
    user2: Union[bool, 'userArgsFromcontactRecursive2']


class rating_userIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive3']
    user1: Union[bool, 'userArgsFromcontactRecursive3']
    user2: Union[bool, 'userArgsFromcontactRecursive3']


class rating_userIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive4']
    user1: Union[bool, 'userArgsFromcontactRecursive4']
    user2: Union[bool, 'userArgsFromcontactRecursive4']


class rating_userIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class rating_userArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManyrating_userArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive1']
    user1: Union[bool, 'userArgsFromcontactRecursive1']
    user2: Union[bool, 'userArgsFromcontactRecursive1']


class rating_comIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive2']
    user1: Union[bool, 'userArgsFromcontactRecursive2']
    user2: Union[bool, 'userArgsFromcontactRecursive2']


class rating_comIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive3']
    user1: Union[bool, 'userArgsFromcontactRecursive3']
    user2: Union[bool, 'userArgsFromcontactRecursive3']


class rating_comIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive4']
    user1: Union[bool, 'userArgsFromcontactRecursive4']
    user2: Union[bool, 'userArgsFromcontactRecursive4']


class rating_comIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class rating_comArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManyrating_comArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    user: Union[bool, 'userArgsFromcontactRecursive1']


class contactIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    user: Union[bool, 'userArgsFromcontactRecursive2']


class contactIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    user: Union[bool, 'userArgsFromcontactRecursive3']


class contactIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    user: Union[bool, 'userArgsFromcontactRecursive4']


class contactIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class contactArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManycontactArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcontactRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcontactRecursive1']


class categoryIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcontactRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcontactRecursive2']


class categoryIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcontactRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcontactRecursive3']


class categoryIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcontactRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcontactRecursive4']


class categoryIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class categoryArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManycategoryArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    category: Union[bool, 'categoryArgsFromcontactRecursive1']
    user: Union[bool, 'userArgsFromcontactRecursive1']


class experienceIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    category: Union[bool, 'categoryArgsFromcontactRecursive2']
    user: Union[bool, 'userArgsFromcontactRecursive2']


class experienceIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    category: Union[bool, 'categoryArgsFromcontactRecursive3']
    user: Union[bool, 'userArgsFromcontactRecursive3']


class experienceIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    category: Union[bool, 'categoryArgsFromcontactRecursive4']
    user: Union[bool, 'userArgsFromcontactRecursive4']


class experienceIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class experienceArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManyexperienceArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcontactRecursive1']


class careerIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcontactRecursive2']


class careerIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcontactRecursive3']


class careerIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcontactRecursive4']


class careerIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class careerArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManycareerArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    career: Union[bool, 'careerArgsFromcontactRecursive1']
    user: Union[bool, 'userArgsFromcontactRecursive1']


class user_careerIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    career: Union[bool, 'careerArgsFromcontactRecursive2']
    user: Union[bool, 'userArgsFromcontactRecursive2']


class user_careerIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    career: Union[bool, 'careerArgsFromcontactRecursive3']
    user: Union[bool, 'userArgsFromcontactRecursive3']


class user_careerIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    career: Union[bool, 'careerArgsFromcontactRecursive4']
    user: Union[bool, 'userArgsFromcontactRecursive4']


class user_careerIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class user_careerArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManyuser_careerArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcontactRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromcontactRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcontactRecursive1']
    post: Union[bool, 'FindManypostArgsFromcontactRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcontactRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcontactRecursive1']


class jobIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcontactRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromcontactRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcontactRecursive2']
    post: Union[bool, 'FindManypostArgsFromcontactRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcontactRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcontactRecursive2']


class jobIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcontactRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromcontactRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcontactRecursive3']
    post: Union[bool, 'FindManypostArgsFromcontactRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcontactRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcontactRecursive3']


class jobIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcontactRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromcontactRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcontactRecursive4']
    post: Union[bool, 'FindManypostArgsFromcontactRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcontactRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcontactRecursive4']


class jobIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class jobArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManyjobArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive1']
    user: Union[bool, 'userArgsFromcontactRecursive1']


class historyIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive2']
    user: Union[bool, 'userArgsFromcontactRecursive2']


class historyIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive3']
    user: Union[bool, 'userArgsFromcontactRecursive3']


class historyIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive4']
    user: Union[bool, 'userArgsFromcontactRecursive4']


class historyIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class historyArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManyhistoryArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    category: Union[bool, 'categoryArgsFromcontactRecursive1']
    job: Union[bool, 'jobArgsFromcontactRecursive1']


class job_expIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    category: Union[bool, 'categoryArgsFromcontactRecursive2']
    job: Union[bool, 'jobArgsFromcontactRecursive2']


class job_expIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    category: Union[bool, 'categoryArgsFromcontactRecursive3']
    job: Union[bool, 'jobArgsFromcontactRecursive3']


class job_expIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    category: Union[bool, 'categoryArgsFromcontactRecursive4']
    job: Union[bool, 'jobArgsFromcontactRecursive4']


class job_expIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class job_expArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManyjob_expArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive1']
    user: Union[bool, 'userArgsFromcontactRecursive1']


class bookmarkIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive2']
    user: Union[bool, 'userArgsFromcontactRecursive2']


class bookmarkIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive3']
    user: Union[bool, 'userArgsFromcontactRecursive3']


class bookmarkIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive4']
    user: Union[bool, 'userArgsFromcontactRecursive4']


class bookmarkIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class bookmarkArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManybookmarkArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFromcontact(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive1']
    user: Union[bool, 'userArgsFromcontactRecursive1']


class postIncludeFromcontactRecursive1(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive2']
    user: Union[bool, 'userArgsFromcontactRecursive2']


class postIncludeFromcontactRecursive2(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive3']
    user: Union[bool, 'userArgsFromcontactRecursive3']


class postIncludeFromcontactRecursive3(TypedDict, total=False):
    """Relational arguments for contact"""
    job: Union[bool, 'jobArgsFromcontactRecursive4']
    user: Union[bool, 'userArgsFromcontactRecursive4']


class postIncludeFromcontactRecursive4(TypedDict, total=False):
    """Relational arguments for contact"""

    

class postArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    
    

class FindManypostArgsFromcontact(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFromcontactRecursive1(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFromcontactRecursive2(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFromcontactRecursive3(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFromcontactRecursive4(TypedDict, total=False):
    """Arguments for contact"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManycontactArgs = FindManycontactArgsFromcontact
FindFirstcontactArgs = FindManycontactArgsFromcontact


    

class contactWhereInput(TypedDict, total=False):
    """contact arguments for searching"""
    contact_id: Union[_int, 'types.IntFilter']
    user_id: Union[_int, 'types.IntFilter']
    facebook: Union[_str, 'types.StringFilter']
    instagram: Union[_str, 'types.StringFilter']
    linkedin: Union[_str, 'types.StringFilter']
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['contactWhereInputRecursive1', List['contactWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['contactWhereInputRecursive1']
    OR: List['contactWhereInputRecursive1']
    NOT: List['contactWhereInputRecursive1']


class contactWhereInputRecursive1(TypedDict, total=False):
    """contact arguments for searching"""
    contact_id: Union[_int, 'types.IntFilter']
    user_id: Union[_int, 'types.IntFilter']
    facebook: Union[_str, 'types.StringFilter']
    instagram: Union[_str, 'types.StringFilter']
    linkedin: Union[_str, 'types.StringFilter']
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['contactWhereInputRecursive2', List['contactWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['contactWhereInputRecursive2']
    OR: List['contactWhereInputRecursive2']
    NOT: List['contactWhereInputRecursive2']


class contactWhereInputRecursive2(TypedDict, total=False):
    """contact arguments for searching"""
    contact_id: Union[_int, 'types.IntFilter']
    user_id: Union[_int, 'types.IntFilter']
    facebook: Union[_str, 'types.StringFilter']
    instagram: Union[_str, 'types.StringFilter']
    linkedin: Union[_str, 'types.StringFilter']
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['contactWhereInputRecursive3', List['contactWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['contactWhereInputRecursive3']
    OR: List['contactWhereInputRecursive3']
    NOT: List['contactWhereInputRecursive3']


class contactWhereInputRecursive3(TypedDict, total=False):
    """contact arguments for searching"""
    contact_id: Union[_int, 'types.IntFilter']
    user_id: Union[_int, 'types.IntFilter']
    facebook: Union[_str, 'types.StringFilter']
    instagram: Union[_str, 'types.StringFilter']
    linkedin: Union[_str, 'types.StringFilter']
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['contactWhereInputRecursive4', List['contactWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['contactWhereInputRecursive4']
    OR: List['contactWhereInputRecursive4']
    NOT: List['contactWhereInputRecursive4']


class contactWhereInputRecursive4(TypedDict, total=False):
    """contact arguments for searching"""
    contact_id: Union[_int, 'types.IntFilter']
    user_id: Union[_int, 'types.IntFilter']
    facebook: Union[_str, 'types.StringFilter']
    instagram: Union[_str, 'types.StringFilter']
    linkedin: Union[_str, 'types.StringFilter']
    user: 'userRelationFilter'



# aggregate contact types


    

class contactScalarWhereWithAggregatesInput(TypedDict, total=False):
    """contact arguments for searching"""
    contact_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    facebook: Union[_str, 'types.StringWithAggregatesFilter']
    instagram: Union[_str, 'types.StringWithAggregatesFilter']
    linkedin: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['contactScalarWhereWithAggregatesInputRecursive1']
    OR: List['contactScalarWhereWithAggregatesInputRecursive1']
    NOT: List['contactScalarWhereWithAggregatesInputRecursive1']


class contactScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """contact arguments for searching"""
    contact_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    facebook: Union[_str, 'types.StringWithAggregatesFilter']
    instagram: Union[_str, 'types.StringWithAggregatesFilter']
    linkedin: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['contactScalarWhereWithAggregatesInputRecursive2']
    OR: List['contactScalarWhereWithAggregatesInputRecursive2']
    NOT: List['contactScalarWhereWithAggregatesInputRecursive2']


class contactScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """contact arguments for searching"""
    contact_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    facebook: Union[_str, 'types.StringWithAggregatesFilter']
    instagram: Union[_str, 'types.StringWithAggregatesFilter']
    linkedin: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['contactScalarWhereWithAggregatesInputRecursive3']
    OR: List['contactScalarWhereWithAggregatesInputRecursive3']
    NOT: List['contactScalarWhereWithAggregatesInputRecursive3']


class contactScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """contact arguments for searching"""
    contact_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    facebook: Union[_str, 'types.StringWithAggregatesFilter']
    instagram: Union[_str, 'types.StringWithAggregatesFilter']
    linkedin: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['contactScalarWhereWithAggregatesInputRecursive4']
    OR: List['contactScalarWhereWithAggregatesInputRecursive4']
    NOT: List['contactScalarWhereWithAggregatesInputRecursive4']


class contactScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """contact arguments for searching"""
    contact_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    facebook: Union[_str, 'types.StringWithAggregatesFilter']
    instagram: Union[_str, 'types.StringWithAggregatesFilter']
    linkedin: Union[_str, 'types.StringWithAggregatesFilter']



class contactGroupByOutput(TypedDict, total=False):
    contact_id: _int
    user_id: _int
    facebook: _str
    instagram: _str
    linkedin: _str
    _sum: 'contactSumAggregateOutput'
    _avg: 'contactAvgAggregateOutput'
    _min: 'contactMinAggregateOutput'
    _max: 'contactMaxAggregateOutput'
    _count: 'contactCountAggregateOutput'


class contactAvgAggregateOutput(TypedDict, total=False):
    """contact output for aggregating averages"""
    contact_id: float
    user_id: float


class contactSumAggregateOutput(TypedDict, total=False):
    """contact output for aggregating sums"""
    contact_id: _int
    user_id: _int


class contactScalarAggregateOutput(TypedDict, total=False):
    """contact output including scalar fields"""
    contact_id: _int
    user_id: _int
    facebook: _str
    instagram: _str
    linkedin: _str


contactMinAggregateOutput = contactScalarAggregateOutput
contactMaxAggregateOutput = contactScalarAggregateOutput


class contactMaxAggregateInput(TypedDict, total=False):
    """contact input for aggregating by max"""
    contact_id: bool
    user_id: bool
    facebook: bool
    instagram: bool
    linkedin: bool


class contactMinAggregateInput(TypedDict, total=False):
    """contact input for aggregating by min"""
    contact_id: bool
    user_id: bool
    facebook: bool
    instagram: bool
    linkedin: bool


class contactNumberAggregateInput(TypedDict, total=False):
    """contact input for aggregating numbers"""
    contact_id: bool
    user_id: bool


contactAvgAggregateInput = contactNumberAggregateInput
contactSumAggregateInput = contactNumberAggregateInput


contactCountAggregateInput = TypedDict(
    'contactCountAggregateInput',
    {
        'contact_id': bool,
        'user_id': bool,
        'facebook': bool,
        'instagram': bool,
        'linkedin': bool,
        '_all': bool,
    },
    total=False,
)

contactCountAggregateOutput = TypedDict(
    'contactCountAggregateOutput',
    {
        'contact_id': int,
        'user_id': int,
        'facebook': int,
        'instagram': int,
        'linkedin': int,
        '_all': int,
    },
    total=False,
)


contactKeys = Literal[
    'contact_id',
    'user_id',
    'facebook',
    'instagram',
    'linkedin',
    'user',
]
contactScalarFieldKeys = Literal[
    'contact_id',
    'user_id',
    'facebook',
    'instagram',
    'linkedin',
]
contactScalarFieldKeysT = TypeVar('contactScalarFieldKeysT', bound=contactScalarFieldKeys)

contactRelationalFieldKeys = Literal[
        'user',
    ]

# category types

class categoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the category create method"""
    category_id: _int
    experiences: 'experienceCreateManyNestedWithoutRelationsInput'
    job_exp: 'job_expCreateManyNestedWithoutRelationsInput'


class categoryCreateInput(categoryOptionalCreateInput):
    """Required arguments to the category create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class categoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the category create method, without relations"""
    category_id: _int


class categoryCreateWithoutRelationsInput(categoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the category create method, without relations"""
    name: _str


class categoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'categoryCreateWithoutRelationsInput'
    connect: 'categoryWhereUniqueInput'


class categoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['categoryCreateWithoutRelationsInput', List['categoryCreateWithoutRelationsInput']]
    connect: Union['categoryWhereUniqueInput', List['categoryWhereUniqueInput']]


_categoryWhereUnique_category_id_Input = TypedDict(
    '_categoryWhereUnique_category_id_Input',
    {
        'category_id': '_int',
    },
    total=True
)

categoryWhereUniqueInput = _categoryWhereUnique_category_id_Input


class categoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    category_id: Union[AtomicIntInput, _int]
    name: _str
    experiences: 'experienceUpdateManyWithoutRelationsInput'
    job_exp: 'job_expUpdateManyWithoutRelationsInput'


class categoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    category_id: Union[AtomicIntInput, _int]
    name: _str


class categoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['categoryCreateWithoutRelationsInput']
    connect: List['categoryWhereUniqueInput']
    set: List['categoryWhereUniqueInput']
    disconnect: List['categoryWhereUniqueInput']
    delete: List['categoryWhereUniqueInput']

    # TODO
    # update: List['categoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['categoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['categoryScalarWhereInput']
    # upsert: List['categoryUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['categoryCreateOrConnectWithoutRelationsInput']


class categoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'categoryCreateWithoutRelationsInput'
    connect: 'categoryWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'categoryUpdateInput'
    # upsert: 'categoryUpsertWithoutRelationsInput'
    # connectOrCreate: 'categoryCreateOrConnectWithoutRelationsInput'


class categoryUpsertInput(TypedDict):
    create: 'categoryCreateInput'
    update: 'categoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_category_category_id_OrderByInput = TypedDict(
    '_category_category_id_OrderByInput',
    {
        'category_id': 'SortOrder',
    },
    total=True
)

_category_name_OrderByInput = TypedDict(
    '_category_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

categoryOrderByInput = Union[
    '_category_category_id_OrderByInput',
    '_category_name_OrderByInput',
]



# recursive category types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

categoryRelationFilter = TypedDict(
    'categoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class categoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class categoryInclude(TypedDict, total=False):
    """category relational arguments"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcategory']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcategory']


    

class userIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcategoryRecursive1']
    contact: Union[bool, 'FindManycontactArgsFromcategoryRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFromcategoryRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromcategoryRecursive1']
    post: Union[bool, 'FindManypostArgsFromcategoryRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcategoryRecursive1']


class userIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcategoryRecursive2']
    contact: Union[bool, 'FindManycontactArgsFromcategoryRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFromcategoryRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromcategoryRecursive2']
    post: Union[bool, 'FindManypostArgsFromcategoryRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcategoryRecursive2']


class userIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcategoryRecursive3']
    contact: Union[bool, 'FindManycontactArgsFromcategoryRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFromcategoryRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromcategoryRecursive3']
    post: Union[bool, 'FindManypostArgsFromcategoryRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcategoryRecursive3']


class userIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcategoryRecursive4']
    contact: Union[bool, 'FindManycontactArgsFromcategoryRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFromcategoryRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromcategoryRecursive4']
    post: Union[bool, 'FindManypostArgsFromcategoryRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcategoryRecursive4']


class userIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class userArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManyuserArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive1']
    user1: Union[bool, 'userArgsFromcategoryRecursive1']
    user2: Union[bool, 'userArgsFromcategoryRecursive1']


class rating_userIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive2']
    user1: Union[bool, 'userArgsFromcategoryRecursive2']
    user2: Union[bool, 'userArgsFromcategoryRecursive2']


class rating_userIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive3']
    user1: Union[bool, 'userArgsFromcategoryRecursive3']
    user2: Union[bool, 'userArgsFromcategoryRecursive3']


class rating_userIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive4']
    user1: Union[bool, 'userArgsFromcategoryRecursive4']
    user2: Union[bool, 'userArgsFromcategoryRecursive4']


class rating_userIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class rating_userArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManyrating_userArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive1']
    user1: Union[bool, 'userArgsFromcategoryRecursive1']
    user2: Union[bool, 'userArgsFromcategoryRecursive1']


class rating_comIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive2']
    user1: Union[bool, 'userArgsFromcategoryRecursive2']
    user2: Union[bool, 'userArgsFromcategoryRecursive2']


class rating_comIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive3']
    user1: Union[bool, 'userArgsFromcategoryRecursive3']
    user2: Union[bool, 'userArgsFromcategoryRecursive3']


class rating_comIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive4']
    user1: Union[bool, 'userArgsFromcategoryRecursive4']
    user2: Union[bool, 'userArgsFromcategoryRecursive4']


class rating_comIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class rating_comArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManyrating_comArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    user: Union[bool, 'userArgsFromcategoryRecursive1']


class contactIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    user: Union[bool, 'userArgsFromcategoryRecursive2']


class contactIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    user: Union[bool, 'userArgsFromcategoryRecursive3']


class contactIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    user: Union[bool, 'userArgsFromcategoryRecursive4']


class contactIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class contactArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManycontactArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcategoryRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcategoryRecursive1']


class categoryIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcategoryRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcategoryRecursive2']


class categoryIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcategoryRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcategoryRecursive3']


class categoryIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcategoryRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcategoryRecursive4']


class categoryIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class categoryArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManycategoryArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive1']
    user: Union[bool, 'userArgsFromcategoryRecursive1']


class experienceIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive2']
    user: Union[bool, 'userArgsFromcategoryRecursive2']


class experienceIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive3']
    user: Union[bool, 'userArgsFromcategoryRecursive3']


class experienceIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive4']
    user: Union[bool, 'userArgsFromcategoryRecursive4']


class experienceIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class experienceArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManyexperienceArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcategoryRecursive1']


class careerIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcategoryRecursive2']


class careerIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcategoryRecursive3']


class careerIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcategoryRecursive4']


class careerIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class careerArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManycareerArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    career: Union[bool, 'careerArgsFromcategoryRecursive1']
    user: Union[bool, 'userArgsFromcategoryRecursive1']


class user_careerIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    career: Union[bool, 'careerArgsFromcategoryRecursive2']
    user: Union[bool, 'userArgsFromcategoryRecursive2']


class user_careerIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    career: Union[bool, 'careerArgsFromcategoryRecursive3']
    user: Union[bool, 'userArgsFromcategoryRecursive3']


class user_careerIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    career: Union[bool, 'careerArgsFromcategoryRecursive4']
    user: Union[bool, 'userArgsFromcategoryRecursive4']


class user_careerIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class user_careerArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManyuser_careerArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcategoryRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromcategoryRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcategoryRecursive1']
    post: Union[bool, 'FindManypostArgsFromcategoryRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive1']


class jobIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcategoryRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromcategoryRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcategoryRecursive2']
    post: Union[bool, 'FindManypostArgsFromcategoryRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive2']


class jobIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcategoryRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromcategoryRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcategoryRecursive3']
    post: Union[bool, 'FindManypostArgsFromcategoryRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive3']


class jobIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcategoryRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromcategoryRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcategoryRecursive4']
    post: Union[bool, 'FindManypostArgsFromcategoryRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcategoryRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcategoryRecursive4']


class jobIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class jobArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManyjobArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive1']
    user: Union[bool, 'userArgsFromcategoryRecursive1']


class historyIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive2']
    user: Union[bool, 'userArgsFromcategoryRecursive2']


class historyIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive3']
    user: Union[bool, 'userArgsFromcategoryRecursive3']


class historyIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive4']
    user: Union[bool, 'userArgsFromcategoryRecursive4']


class historyIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class historyArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManyhistoryArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive1']
    job: Union[bool, 'jobArgsFromcategoryRecursive1']


class job_expIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive2']
    job: Union[bool, 'jobArgsFromcategoryRecursive2']


class job_expIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive3']
    job: Union[bool, 'jobArgsFromcategoryRecursive3']


class job_expIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive4']
    job: Union[bool, 'jobArgsFromcategoryRecursive4']


class job_expIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class job_expArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManyjob_expArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive1']
    user: Union[bool, 'userArgsFromcategoryRecursive1']


class bookmarkIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive2']
    user: Union[bool, 'userArgsFromcategoryRecursive2']


class bookmarkIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive3']
    user: Union[bool, 'userArgsFromcategoryRecursive3']


class bookmarkIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive4']
    user: Union[bool, 'userArgsFromcategoryRecursive4']


class bookmarkIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class bookmarkArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManybookmarkArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive1']
    user: Union[bool, 'userArgsFromcategoryRecursive1']


class postIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive2']
    user: Union[bool, 'userArgsFromcategoryRecursive2']


class postIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive3']
    user: Union[bool, 'userArgsFromcategoryRecursive3']


class postIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    job: Union[bool, 'jobArgsFromcategoryRecursive4']
    user: Union[bool, 'userArgsFromcategoryRecursive4']


class postIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class postArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManypostArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManycategoryArgs = FindManycategoryArgsFromcategory
FindFirstcategoryArgs = FindManycategoryArgsFromcategory


    

class categoryWhereInput(TypedDict, total=False):
    """category arguments for searching"""
    category_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    experiences: 'experienceListRelationFilter'
    job_exp: 'job_expListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryWhereInputRecursive1', List['categoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['categoryWhereInputRecursive1']
    OR: List['categoryWhereInputRecursive1']
    NOT: List['categoryWhereInputRecursive1']


class categoryWhereInputRecursive1(TypedDict, total=False):
    """category arguments for searching"""
    category_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    experiences: 'experienceListRelationFilter'
    job_exp: 'job_expListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryWhereInputRecursive2', List['categoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['categoryWhereInputRecursive2']
    OR: List['categoryWhereInputRecursive2']
    NOT: List['categoryWhereInputRecursive2']


class categoryWhereInputRecursive2(TypedDict, total=False):
    """category arguments for searching"""
    category_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    experiences: 'experienceListRelationFilter'
    job_exp: 'job_expListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryWhereInputRecursive3', List['categoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['categoryWhereInputRecursive3']
    OR: List['categoryWhereInputRecursive3']
    NOT: List['categoryWhereInputRecursive3']


class categoryWhereInputRecursive3(TypedDict, total=False):
    """category arguments for searching"""
    category_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    experiences: 'experienceListRelationFilter'
    job_exp: 'job_expListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryWhereInputRecursive4', List['categoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['categoryWhereInputRecursive4']
    OR: List['categoryWhereInputRecursive4']
    NOT: List['categoryWhereInputRecursive4']


class categoryWhereInputRecursive4(TypedDict, total=False):
    """category arguments for searching"""
    category_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    experiences: 'experienceListRelationFilter'
    job_exp: 'job_expListRelationFilter'



# aggregate category types


    

class categoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """category arguments for searching"""
    category_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['categoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['categoryScalarWhereWithAggregatesInputRecursive1']


class categoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """category arguments for searching"""
    category_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['categoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['categoryScalarWhereWithAggregatesInputRecursive2']


class categoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """category arguments for searching"""
    category_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['categoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['categoryScalarWhereWithAggregatesInputRecursive3']


class categoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """category arguments for searching"""
    category_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['categoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['categoryScalarWhereWithAggregatesInputRecursive4']


class categoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """category arguments for searching"""
    category_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class categoryGroupByOutput(TypedDict, total=False):
    category_id: _int
    name: _str
    _sum: 'categorySumAggregateOutput'
    _avg: 'categoryAvgAggregateOutput'
    _min: 'categoryMinAggregateOutput'
    _max: 'categoryMaxAggregateOutput'
    _count: 'categoryCountAggregateOutput'


class categoryAvgAggregateOutput(TypedDict, total=False):
    """category output for aggregating averages"""
    category_id: float


class categorySumAggregateOutput(TypedDict, total=False):
    """category output for aggregating sums"""
    category_id: _int


class categoryScalarAggregateOutput(TypedDict, total=False):
    """category output including scalar fields"""
    category_id: _int
    name: _str


categoryMinAggregateOutput = categoryScalarAggregateOutput
categoryMaxAggregateOutput = categoryScalarAggregateOutput


class categoryMaxAggregateInput(TypedDict, total=False):
    """category input for aggregating by max"""
    category_id: bool
    name: bool


class categoryMinAggregateInput(TypedDict, total=False):
    """category input for aggregating by min"""
    category_id: bool
    name: bool


class categoryNumberAggregateInput(TypedDict, total=False):
    """category input for aggregating numbers"""
    category_id: bool


categoryAvgAggregateInput = categoryNumberAggregateInput
categorySumAggregateInput = categoryNumberAggregateInput


categoryCountAggregateInput = TypedDict(
    'categoryCountAggregateInput',
    {
        'category_id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

categoryCountAggregateOutput = TypedDict(
    'categoryCountAggregateOutput',
    {
        'category_id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


categoryKeys = Literal[
    'category_id',
    'name',
    'experiences',
    'job_exp',
]
categoryScalarFieldKeys = Literal[
    'category_id',
    'name',
]
categoryScalarFieldKeysT = TypeVar('categoryScalarFieldKeysT', bound=categoryScalarFieldKeys)

categoryRelationalFieldKeys = Literal[
        'experiences',
        'job_exp',
    ]

# experience types

class experienceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the experience create method"""
    user_id: _int
    category_id: _int
    category: 'categoryCreateNestedWithoutRelationsInput'
    user: 'userCreateNestedWithoutRelationsInput'


class experienceCreateInput(experienceOptionalCreateInput):
    """Required arguments to the experience create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class experienceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the experience create method, without relations"""
    user_id: _int
    category_id: _int


class experienceCreateWithoutRelationsInput(experienceOptionalCreateWithoutRelationsInput):
    """Required arguments to the experience create method, without relations"""


class experienceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'experienceCreateWithoutRelationsInput'
    connect: 'experienceWhereUniqueInput'


class experienceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['experienceCreateWithoutRelationsInput', List['experienceCreateWithoutRelationsInput']]
    connect: Union['experienceWhereUniqueInput', List['experienceWhereUniqueInput']]


_experienceCompounduser_id_category_idKeyInner = TypedDict(
    '_experienceCompounduser_id_category_idKeyInner',
    {
        'user_id': '_int',
        'category_id': '_int',
    },
    total=True
)

_experienceCompounduser_id_category_idKey = TypedDict(
    '_experienceCompounduser_id_category_idKey',
    {
        'user_id_category_id': '_experienceCompounduser_id_category_idKeyInner',
    },
    total=True
)

experienceWhereUniqueInput = _experienceCompounduser_id_category_idKey


class experienceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    category: 'categoryUpdateOneWithoutRelationsInput'
    user: 'userUpdateOneWithoutRelationsInput'


class experienceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""


class experienceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['experienceCreateWithoutRelationsInput']
    connect: List['experienceWhereUniqueInput']
    set: List['experienceWhereUniqueInput']
    disconnect: List['experienceWhereUniqueInput']
    delete: List['experienceWhereUniqueInput']

    # TODO
    # update: List['experienceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['experienceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['experienceScalarWhereInput']
    # upsert: List['experienceUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['experienceCreateOrConnectWithoutRelationsInput']


class experienceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'experienceCreateWithoutRelationsInput'
    connect: 'experienceWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'experienceUpdateInput'
    # upsert: 'experienceUpsertWithoutRelationsInput'
    # connectOrCreate: 'experienceCreateOrConnectWithoutRelationsInput'


class experienceUpsertInput(TypedDict):
    create: 'experienceCreateInput'
    update: 'experienceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_experience_user_id_OrderByInput = TypedDict(
    '_experience_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_experience_category_id_OrderByInput = TypedDict(
    '_experience_category_id_OrderByInput',
    {
        'category_id': 'SortOrder',
    },
    total=True
)

experienceOrderByInput = Union[
    '_experience_user_id_OrderByInput',
    '_experience_category_id_OrderByInput',
]



# recursive experience types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

experienceRelationFilter = TypedDict(
    'experienceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class experienceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class experienceInclude(TypedDict, total=False):
    """experience relational arguments"""
    category: Union[bool, 'categoryArgsFromexperience']
    user: Union[bool, 'userArgsFromexperience']


    

class userIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromexperienceRecursive1']
    contact: Union[bool, 'FindManycontactArgsFromexperienceRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFromexperienceRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromexperienceRecursive1']
    post: Union[bool, 'FindManypostArgsFromexperienceRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFromexperienceRecursive1']


class userIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromexperienceRecursive2']
    contact: Union[bool, 'FindManycontactArgsFromexperienceRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFromexperienceRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromexperienceRecursive2']
    post: Union[bool, 'FindManypostArgsFromexperienceRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFromexperienceRecursive2']


class userIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromexperienceRecursive3']
    contact: Union[bool, 'FindManycontactArgsFromexperienceRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFromexperienceRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromexperienceRecursive3']
    post: Union[bool, 'FindManypostArgsFromexperienceRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFromexperienceRecursive3']


class userIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromexperienceRecursive4']
    contact: Union[bool, 'FindManycontactArgsFromexperienceRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFromexperienceRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromexperienceRecursive4']
    post: Union[bool, 'FindManypostArgsFromexperienceRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFromexperienceRecursive4']


class userIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class userArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManyuserArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive1']
    user1: Union[bool, 'userArgsFromexperienceRecursive1']
    user2: Union[bool, 'userArgsFromexperienceRecursive1']


class rating_userIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive2']
    user1: Union[bool, 'userArgsFromexperienceRecursive2']
    user2: Union[bool, 'userArgsFromexperienceRecursive2']


class rating_userIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive3']
    user1: Union[bool, 'userArgsFromexperienceRecursive3']
    user2: Union[bool, 'userArgsFromexperienceRecursive3']


class rating_userIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive4']
    user1: Union[bool, 'userArgsFromexperienceRecursive4']
    user2: Union[bool, 'userArgsFromexperienceRecursive4']


class rating_userIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class rating_userArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManyrating_userArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive1']
    user1: Union[bool, 'userArgsFromexperienceRecursive1']
    user2: Union[bool, 'userArgsFromexperienceRecursive1']


class rating_comIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive2']
    user1: Union[bool, 'userArgsFromexperienceRecursive2']
    user2: Union[bool, 'userArgsFromexperienceRecursive2']


class rating_comIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive3']
    user1: Union[bool, 'userArgsFromexperienceRecursive3']
    user2: Union[bool, 'userArgsFromexperienceRecursive3']


class rating_comIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive4']
    user1: Union[bool, 'userArgsFromexperienceRecursive4']
    user2: Union[bool, 'userArgsFromexperienceRecursive4']


class rating_comIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class rating_comArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManyrating_comArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    user: Union[bool, 'userArgsFromexperienceRecursive1']


class contactIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    user: Union[bool, 'userArgsFromexperienceRecursive2']


class contactIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    user: Union[bool, 'userArgsFromexperienceRecursive3']


class contactIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    user: Union[bool, 'userArgsFromexperienceRecursive4']


class contactIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class contactArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManycontactArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    experiences: Union[bool, 'FindManyexperienceArgsFromexperienceRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromexperienceRecursive1']


class categoryIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    experiences: Union[bool, 'FindManyexperienceArgsFromexperienceRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromexperienceRecursive2']


class categoryIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    experiences: Union[bool, 'FindManyexperienceArgsFromexperienceRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromexperienceRecursive3']


class categoryIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    experiences: Union[bool, 'FindManyexperienceArgsFromexperienceRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromexperienceRecursive4']


class categoryIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class categoryArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManycategoryArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    category: Union[bool, 'categoryArgsFromexperienceRecursive1']
    user: Union[bool, 'userArgsFromexperienceRecursive1']


class experienceIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    category: Union[bool, 'categoryArgsFromexperienceRecursive2']
    user: Union[bool, 'userArgsFromexperienceRecursive2']


class experienceIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    category: Union[bool, 'categoryArgsFromexperienceRecursive3']
    user: Union[bool, 'userArgsFromexperienceRecursive3']


class experienceIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    category: Union[bool, 'categoryArgsFromexperienceRecursive4']
    user: Union[bool, 'userArgsFromexperienceRecursive4']


class experienceIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class experienceArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManyexperienceArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromexperienceRecursive1']


class careerIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromexperienceRecursive2']


class careerIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromexperienceRecursive3']


class careerIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromexperienceRecursive4']


class careerIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class careerArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManycareerArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    career: Union[bool, 'careerArgsFromexperienceRecursive1']
    user: Union[bool, 'userArgsFromexperienceRecursive1']


class user_careerIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    career: Union[bool, 'careerArgsFromexperienceRecursive2']
    user: Union[bool, 'userArgsFromexperienceRecursive2']


class user_careerIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    career: Union[bool, 'careerArgsFromexperienceRecursive3']
    user: Union[bool, 'userArgsFromexperienceRecursive3']


class user_careerIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    career: Union[bool, 'careerArgsFromexperienceRecursive4']
    user: Union[bool, 'userArgsFromexperienceRecursive4']


class user_careerIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class user_careerArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManyuser_careerArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromexperienceRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromexperienceRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromexperienceRecursive1']
    post: Union[bool, 'FindManypostArgsFromexperienceRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive1']


class jobIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromexperienceRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromexperienceRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromexperienceRecursive2']
    post: Union[bool, 'FindManypostArgsFromexperienceRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive2']


class jobIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromexperienceRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromexperienceRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromexperienceRecursive3']
    post: Union[bool, 'FindManypostArgsFromexperienceRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive3']


class jobIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromexperienceRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromexperienceRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromexperienceRecursive4']
    post: Union[bool, 'FindManypostArgsFromexperienceRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFromexperienceRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFromexperienceRecursive4']


class jobIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class jobArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManyjobArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive1']
    user: Union[bool, 'userArgsFromexperienceRecursive1']


class historyIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive2']
    user: Union[bool, 'userArgsFromexperienceRecursive2']


class historyIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive3']
    user: Union[bool, 'userArgsFromexperienceRecursive3']


class historyIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive4']
    user: Union[bool, 'userArgsFromexperienceRecursive4']


class historyIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class historyArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManyhistoryArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    category: Union[bool, 'categoryArgsFromexperienceRecursive1']
    job: Union[bool, 'jobArgsFromexperienceRecursive1']


class job_expIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    category: Union[bool, 'categoryArgsFromexperienceRecursive2']
    job: Union[bool, 'jobArgsFromexperienceRecursive2']


class job_expIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    category: Union[bool, 'categoryArgsFromexperienceRecursive3']
    job: Union[bool, 'jobArgsFromexperienceRecursive3']


class job_expIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    category: Union[bool, 'categoryArgsFromexperienceRecursive4']
    job: Union[bool, 'jobArgsFromexperienceRecursive4']


class job_expIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class job_expArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManyjob_expArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive1']
    user: Union[bool, 'userArgsFromexperienceRecursive1']


class bookmarkIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive2']
    user: Union[bool, 'userArgsFromexperienceRecursive2']


class bookmarkIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive3']
    user: Union[bool, 'userArgsFromexperienceRecursive3']


class bookmarkIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive4']
    user: Union[bool, 'userArgsFromexperienceRecursive4']


class bookmarkIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class bookmarkArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManybookmarkArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFromexperience(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive1']
    user: Union[bool, 'userArgsFromexperienceRecursive1']


class postIncludeFromexperienceRecursive1(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive2']
    user: Union[bool, 'userArgsFromexperienceRecursive2']


class postIncludeFromexperienceRecursive2(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive3']
    user: Union[bool, 'userArgsFromexperienceRecursive3']


class postIncludeFromexperienceRecursive3(TypedDict, total=False):
    """Relational arguments for experience"""
    job: Union[bool, 'jobArgsFromexperienceRecursive4']
    user: Union[bool, 'userArgsFromexperienceRecursive4']


class postIncludeFromexperienceRecursive4(TypedDict, total=False):
    """Relational arguments for experience"""

    

class postArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    
    

class FindManypostArgsFromexperience(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFromexperienceRecursive1(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFromexperienceRecursive2(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFromexperienceRecursive3(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFromexperienceRecursive4(TypedDict, total=False):
    """Arguments for experience"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManyexperienceArgs = FindManyexperienceArgsFromexperience
FindFirstexperienceArgs = FindManyexperienceArgsFromexperience


    

class experienceWhereInput(TypedDict, total=False):
    """experience arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    category_id: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['experienceWhereInputRecursive1', List['experienceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['experienceWhereInputRecursive1']
    OR: List['experienceWhereInputRecursive1']
    NOT: List['experienceWhereInputRecursive1']


class experienceWhereInputRecursive1(TypedDict, total=False):
    """experience arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    category_id: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['experienceWhereInputRecursive2', List['experienceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['experienceWhereInputRecursive2']
    OR: List['experienceWhereInputRecursive2']
    NOT: List['experienceWhereInputRecursive2']


class experienceWhereInputRecursive2(TypedDict, total=False):
    """experience arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    category_id: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['experienceWhereInputRecursive3', List['experienceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['experienceWhereInputRecursive3']
    OR: List['experienceWhereInputRecursive3']
    NOT: List['experienceWhereInputRecursive3']


class experienceWhereInputRecursive3(TypedDict, total=False):
    """experience arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    category_id: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['experienceWhereInputRecursive4', List['experienceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['experienceWhereInputRecursive4']
    OR: List['experienceWhereInputRecursive4']
    NOT: List['experienceWhereInputRecursive4']


class experienceWhereInputRecursive4(TypedDict, total=False):
    """experience arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    category_id: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    user: 'userRelationFilter'



# aggregate experience types


    

class experienceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """experience arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['experienceScalarWhereWithAggregatesInputRecursive1']
    OR: List['experienceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['experienceScalarWhereWithAggregatesInputRecursive1']


class experienceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """experience arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['experienceScalarWhereWithAggregatesInputRecursive2']
    OR: List['experienceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['experienceScalarWhereWithAggregatesInputRecursive2']


class experienceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """experience arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['experienceScalarWhereWithAggregatesInputRecursive3']
    OR: List['experienceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['experienceScalarWhereWithAggregatesInputRecursive3']


class experienceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """experience arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['experienceScalarWhereWithAggregatesInputRecursive4']
    OR: List['experienceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['experienceScalarWhereWithAggregatesInputRecursive4']


class experienceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """experience arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']



class experienceGroupByOutput(TypedDict, total=False):
    user_id: _int
    category_id: _int
    _sum: 'experienceSumAggregateOutput'
    _avg: 'experienceAvgAggregateOutput'
    _min: 'experienceMinAggregateOutput'
    _max: 'experienceMaxAggregateOutput'
    _count: 'experienceCountAggregateOutput'


class experienceAvgAggregateOutput(TypedDict, total=False):
    """experience output for aggregating averages"""
    user_id: float
    category_id: float


class experienceSumAggregateOutput(TypedDict, total=False):
    """experience output for aggregating sums"""
    user_id: _int
    category_id: _int


class experienceScalarAggregateOutput(TypedDict, total=False):
    """experience output including scalar fields"""
    user_id: _int
    category_id: _int


experienceMinAggregateOutput = experienceScalarAggregateOutput
experienceMaxAggregateOutput = experienceScalarAggregateOutput


class experienceMaxAggregateInput(TypedDict, total=False):
    """experience input for aggregating by max"""
    user_id: bool
    category_id: bool


class experienceMinAggregateInput(TypedDict, total=False):
    """experience input for aggregating by min"""
    user_id: bool
    category_id: bool


class experienceNumberAggregateInput(TypedDict, total=False):
    """experience input for aggregating numbers"""
    user_id: bool
    category_id: bool


experienceAvgAggregateInput = experienceNumberAggregateInput
experienceSumAggregateInput = experienceNumberAggregateInput


experienceCountAggregateInput = TypedDict(
    'experienceCountAggregateInput',
    {
        'user_id': bool,
        'category_id': bool,
        '_all': bool,
    },
    total=False,
)

experienceCountAggregateOutput = TypedDict(
    'experienceCountAggregateOutput',
    {
        'user_id': int,
        'category_id': int,
        '_all': int,
    },
    total=False,
)


experienceKeys = Literal[
    'user_id',
    'category_id',
    'category',
    'user',
]
experienceScalarFieldKeys = Literal[
    'user_id',
    'category_id',
]
experienceScalarFieldKeysT = TypeVar('experienceScalarFieldKeysT', bound=experienceScalarFieldKeys)

experienceRelationalFieldKeys = Literal[
        'category',
        'user',
    ]

# career types

class careerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the career create method"""
    career_id: _int
    user_career: 'user_careerCreateManyNestedWithoutRelationsInput'


class careerCreateInput(careerOptionalCreateInput):
    """Required arguments to the career create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class careerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the career create method, without relations"""
    career_id: _int


class careerCreateWithoutRelationsInput(careerOptionalCreateWithoutRelationsInput):
    """Required arguments to the career create method, without relations"""
    name: _str


class careerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'careerCreateWithoutRelationsInput'
    connect: 'careerWhereUniqueInput'


class careerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['careerCreateWithoutRelationsInput', List['careerCreateWithoutRelationsInput']]
    connect: Union['careerWhereUniqueInput', List['careerWhereUniqueInput']]


_careerWhereUnique_career_id_Input = TypedDict(
    '_careerWhereUnique_career_id_Input',
    {
        'career_id': '_int',
    },
    total=True
)

careerWhereUniqueInput = _careerWhereUnique_career_id_Input


class careerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    career_id: Union[AtomicIntInput, _int]
    name: _str
    user_career: 'user_careerUpdateManyWithoutRelationsInput'


class careerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    career_id: Union[AtomicIntInput, _int]
    name: _str


class careerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['careerCreateWithoutRelationsInput']
    connect: List['careerWhereUniqueInput']
    set: List['careerWhereUniqueInput']
    disconnect: List['careerWhereUniqueInput']
    delete: List['careerWhereUniqueInput']

    # TODO
    # update: List['careerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['careerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['careerScalarWhereInput']
    # upsert: List['careerUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['careerCreateOrConnectWithoutRelationsInput']


class careerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'careerCreateWithoutRelationsInput'
    connect: 'careerWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'careerUpdateInput'
    # upsert: 'careerUpsertWithoutRelationsInput'
    # connectOrCreate: 'careerCreateOrConnectWithoutRelationsInput'


class careerUpsertInput(TypedDict):
    create: 'careerCreateInput'
    update: 'careerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_career_career_id_OrderByInput = TypedDict(
    '_career_career_id_OrderByInput',
    {
        'career_id': 'SortOrder',
    },
    total=True
)

_career_name_OrderByInput = TypedDict(
    '_career_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

careerOrderByInput = Union[
    '_career_career_id_OrderByInput',
    '_career_name_OrderByInput',
]



# recursive career types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

careerRelationFilter = TypedDict(
    'careerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class careerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class careerInclude(TypedDict, total=False):
    """career relational arguments"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcareer']


    

class userIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcareerRecursive1']
    contact: Union[bool, 'FindManycontactArgsFromcareerRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFromcareerRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromcareerRecursive1']
    post: Union[bool, 'FindManypostArgsFromcareerRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcareerRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcareerRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcareerRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcareerRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcareerRecursive1']


class userIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcareerRecursive2']
    contact: Union[bool, 'FindManycontactArgsFromcareerRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFromcareerRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromcareerRecursive2']
    post: Union[bool, 'FindManypostArgsFromcareerRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcareerRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcareerRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcareerRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcareerRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcareerRecursive2']


class userIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcareerRecursive3']
    contact: Union[bool, 'FindManycontactArgsFromcareerRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFromcareerRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromcareerRecursive3']
    post: Union[bool, 'FindManypostArgsFromcareerRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcareerRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcareerRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcareerRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcareerRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcareerRecursive3']


class userIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcareerRecursive4']
    contact: Union[bool, 'FindManycontactArgsFromcareerRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFromcareerRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromcareerRecursive4']
    post: Union[bool, 'FindManypostArgsFromcareerRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromcareerRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromcareerRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromcareerRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromcareerRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFromcareerRecursive4']


class userIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class userArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManyuserArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive1']
    user1: Union[bool, 'userArgsFromcareerRecursive1']
    user2: Union[bool, 'userArgsFromcareerRecursive1']


class rating_userIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive2']
    user1: Union[bool, 'userArgsFromcareerRecursive2']
    user2: Union[bool, 'userArgsFromcareerRecursive2']


class rating_userIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive3']
    user1: Union[bool, 'userArgsFromcareerRecursive3']
    user2: Union[bool, 'userArgsFromcareerRecursive3']


class rating_userIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive4']
    user1: Union[bool, 'userArgsFromcareerRecursive4']
    user2: Union[bool, 'userArgsFromcareerRecursive4']


class rating_userIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class rating_userArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManyrating_userArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive1']
    user1: Union[bool, 'userArgsFromcareerRecursive1']
    user2: Union[bool, 'userArgsFromcareerRecursive1']


class rating_comIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive2']
    user1: Union[bool, 'userArgsFromcareerRecursive2']
    user2: Union[bool, 'userArgsFromcareerRecursive2']


class rating_comIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive3']
    user1: Union[bool, 'userArgsFromcareerRecursive3']
    user2: Union[bool, 'userArgsFromcareerRecursive3']


class rating_comIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive4']
    user1: Union[bool, 'userArgsFromcareerRecursive4']
    user2: Union[bool, 'userArgsFromcareerRecursive4']


class rating_comIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class rating_comArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManyrating_comArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    user: Union[bool, 'userArgsFromcareerRecursive1']


class contactIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    user: Union[bool, 'userArgsFromcareerRecursive2']


class contactIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    user: Union[bool, 'userArgsFromcareerRecursive3']


class contactIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    user: Union[bool, 'userArgsFromcareerRecursive4']


class contactIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class contactArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManycontactArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcareerRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcareerRecursive1']


class categoryIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcareerRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcareerRecursive2']


class categoryIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcareerRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcareerRecursive3']


class categoryIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    experiences: Union[bool, 'FindManyexperienceArgsFromcareerRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcareerRecursive4']


class categoryIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class categoryArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManycategoryArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    category: Union[bool, 'categoryArgsFromcareerRecursive1']
    user: Union[bool, 'userArgsFromcareerRecursive1']


class experienceIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    category: Union[bool, 'categoryArgsFromcareerRecursive2']
    user: Union[bool, 'userArgsFromcareerRecursive2']


class experienceIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    category: Union[bool, 'categoryArgsFromcareerRecursive3']
    user: Union[bool, 'userArgsFromcareerRecursive3']


class experienceIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    category: Union[bool, 'categoryArgsFromcareerRecursive4']
    user: Union[bool, 'userArgsFromcareerRecursive4']


class experienceIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class experienceArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManyexperienceArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcareerRecursive1']


class careerIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcareerRecursive2']


class careerIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcareerRecursive3']


class careerIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromcareerRecursive4']


class careerIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class careerArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManycareerArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    career: Union[bool, 'careerArgsFromcareerRecursive1']
    user: Union[bool, 'userArgsFromcareerRecursive1']


class user_careerIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    career: Union[bool, 'careerArgsFromcareerRecursive2']
    user: Union[bool, 'userArgsFromcareerRecursive2']


class user_careerIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    career: Union[bool, 'careerArgsFromcareerRecursive3']
    user: Union[bool, 'userArgsFromcareerRecursive3']


class user_careerIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    career: Union[bool, 'careerArgsFromcareerRecursive4']
    user: Union[bool, 'userArgsFromcareerRecursive4']


class user_careerIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class user_careerArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManyuser_careerArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcareerRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromcareerRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcareerRecursive1']
    post: Union[bool, 'FindManypostArgsFromcareerRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcareerRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcareerRecursive1']


class jobIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcareerRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromcareerRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcareerRecursive2']
    post: Union[bool, 'FindManypostArgsFromcareerRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcareerRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcareerRecursive2']


class jobIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcareerRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromcareerRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcareerRecursive3']
    post: Union[bool, 'FindManypostArgsFromcareerRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcareerRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcareerRecursive3']


class jobIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromcareerRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromcareerRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromcareerRecursive4']
    post: Union[bool, 'FindManypostArgsFromcareerRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFromcareerRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFromcareerRecursive4']


class jobIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class jobArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManyjobArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive1']
    user: Union[bool, 'userArgsFromcareerRecursive1']


class historyIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive2']
    user: Union[bool, 'userArgsFromcareerRecursive2']


class historyIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive3']
    user: Union[bool, 'userArgsFromcareerRecursive3']


class historyIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive4']
    user: Union[bool, 'userArgsFromcareerRecursive4']


class historyIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class historyArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManyhistoryArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    category: Union[bool, 'categoryArgsFromcareerRecursive1']
    job: Union[bool, 'jobArgsFromcareerRecursive1']


class job_expIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    category: Union[bool, 'categoryArgsFromcareerRecursive2']
    job: Union[bool, 'jobArgsFromcareerRecursive2']


class job_expIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    category: Union[bool, 'categoryArgsFromcareerRecursive3']
    job: Union[bool, 'jobArgsFromcareerRecursive3']


class job_expIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    category: Union[bool, 'categoryArgsFromcareerRecursive4']
    job: Union[bool, 'jobArgsFromcareerRecursive4']


class job_expIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class job_expArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManyjob_expArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive1']
    user: Union[bool, 'userArgsFromcareerRecursive1']


class bookmarkIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive2']
    user: Union[bool, 'userArgsFromcareerRecursive2']


class bookmarkIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive3']
    user: Union[bool, 'userArgsFromcareerRecursive3']


class bookmarkIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive4']
    user: Union[bool, 'userArgsFromcareerRecursive4']


class bookmarkIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class bookmarkArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManybookmarkArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFromcareer(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive1']
    user: Union[bool, 'userArgsFromcareerRecursive1']


class postIncludeFromcareerRecursive1(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive2']
    user: Union[bool, 'userArgsFromcareerRecursive2']


class postIncludeFromcareerRecursive2(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive3']
    user: Union[bool, 'userArgsFromcareerRecursive3']


class postIncludeFromcareerRecursive3(TypedDict, total=False):
    """Relational arguments for career"""
    job: Union[bool, 'jobArgsFromcareerRecursive4']
    user: Union[bool, 'userArgsFromcareerRecursive4']


class postIncludeFromcareerRecursive4(TypedDict, total=False):
    """Relational arguments for career"""

    

class postArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    
    

class FindManypostArgsFromcareer(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFromcareerRecursive1(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFromcareerRecursive2(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFromcareerRecursive3(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFromcareerRecursive4(TypedDict, total=False):
    """Arguments for career"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManycareerArgs = FindManycareerArgsFromcareer
FindFirstcareerArgs = FindManycareerArgsFromcareer


    

class careerWhereInput(TypedDict, total=False):
    """career arguments for searching"""
    career_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    user_career: 'user_careerListRelationFilter'

    # should be noted that AND and NOT should be Union['careerWhereInputRecursive1', List['careerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['careerWhereInputRecursive1']
    OR: List['careerWhereInputRecursive1']
    NOT: List['careerWhereInputRecursive1']


class careerWhereInputRecursive1(TypedDict, total=False):
    """career arguments for searching"""
    career_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    user_career: 'user_careerListRelationFilter'

    # should be noted that AND and NOT should be Union['careerWhereInputRecursive2', List['careerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['careerWhereInputRecursive2']
    OR: List['careerWhereInputRecursive2']
    NOT: List['careerWhereInputRecursive2']


class careerWhereInputRecursive2(TypedDict, total=False):
    """career arguments for searching"""
    career_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    user_career: 'user_careerListRelationFilter'

    # should be noted that AND and NOT should be Union['careerWhereInputRecursive3', List['careerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['careerWhereInputRecursive3']
    OR: List['careerWhereInputRecursive3']
    NOT: List['careerWhereInputRecursive3']


class careerWhereInputRecursive3(TypedDict, total=False):
    """career arguments for searching"""
    career_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    user_career: 'user_careerListRelationFilter'

    # should be noted that AND and NOT should be Union['careerWhereInputRecursive4', List['careerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['careerWhereInputRecursive4']
    OR: List['careerWhereInputRecursive4']
    NOT: List['careerWhereInputRecursive4']


class careerWhereInputRecursive4(TypedDict, total=False):
    """career arguments for searching"""
    career_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    user_career: 'user_careerListRelationFilter'



# aggregate career types


    

class careerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """career arguments for searching"""
    career_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['careerScalarWhereWithAggregatesInputRecursive1']
    OR: List['careerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['careerScalarWhereWithAggregatesInputRecursive1']


class careerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """career arguments for searching"""
    career_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['careerScalarWhereWithAggregatesInputRecursive2']
    OR: List['careerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['careerScalarWhereWithAggregatesInputRecursive2']


class careerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """career arguments for searching"""
    career_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['careerScalarWhereWithAggregatesInputRecursive3']
    OR: List['careerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['careerScalarWhereWithAggregatesInputRecursive3']


class careerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """career arguments for searching"""
    career_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['careerScalarWhereWithAggregatesInputRecursive4']
    OR: List['careerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['careerScalarWhereWithAggregatesInputRecursive4']


class careerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """career arguments for searching"""
    career_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class careerGroupByOutput(TypedDict, total=False):
    career_id: _int
    name: _str
    _sum: 'careerSumAggregateOutput'
    _avg: 'careerAvgAggregateOutput'
    _min: 'careerMinAggregateOutput'
    _max: 'careerMaxAggregateOutput'
    _count: 'careerCountAggregateOutput'


class careerAvgAggregateOutput(TypedDict, total=False):
    """career output for aggregating averages"""
    career_id: float


class careerSumAggregateOutput(TypedDict, total=False):
    """career output for aggregating sums"""
    career_id: _int


class careerScalarAggregateOutput(TypedDict, total=False):
    """career output including scalar fields"""
    career_id: _int
    name: _str


careerMinAggregateOutput = careerScalarAggregateOutput
careerMaxAggregateOutput = careerScalarAggregateOutput


class careerMaxAggregateInput(TypedDict, total=False):
    """career input for aggregating by max"""
    career_id: bool
    name: bool


class careerMinAggregateInput(TypedDict, total=False):
    """career input for aggregating by min"""
    career_id: bool
    name: bool


class careerNumberAggregateInput(TypedDict, total=False):
    """career input for aggregating numbers"""
    career_id: bool


careerAvgAggregateInput = careerNumberAggregateInput
careerSumAggregateInput = careerNumberAggregateInput


careerCountAggregateInput = TypedDict(
    'careerCountAggregateInput',
    {
        'career_id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

careerCountAggregateOutput = TypedDict(
    'careerCountAggregateOutput',
    {
        'career_id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


careerKeys = Literal[
    'career_id',
    'name',
    'user_career',
]
careerScalarFieldKeys = Literal[
    'career_id',
    'name',
]
careerScalarFieldKeysT = TypeVar('careerScalarFieldKeysT', bound=careerScalarFieldKeys)

careerRelationalFieldKeys = Literal[
        'user_career',
    ]

# user_career types

class user_careerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the user_career create method"""
    user_id: _int
    career_id: _int
    career: 'careerCreateNestedWithoutRelationsInput'
    user: 'userCreateNestedWithoutRelationsInput'


class user_careerCreateInput(user_careerOptionalCreateInput):
    """Required arguments to the user_career create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class user_careerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the user_career create method, without relations"""
    user_id: _int
    career_id: _int


class user_careerCreateWithoutRelationsInput(user_careerOptionalCreateWithoutRelationsInput):
    """Required arguments to the user_career create method, without relations"""


class user_careerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'user_careerCreateWithoutRelationsInput'
    connect: 'user_careerWhereUniqueInput'


class user_careerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['user_careerCreateWithoutRelationsInput', List['user_careerCreateWithoutRelationsInput']]
    connect: Union['user_careerWhereUniqueInput', List['user_careerWhereUniqueInput']]


_user_careerCompounduser_id_career_idKeyInner = TypedDict(
    '_user_careerCompounduser_id_career_idKeyInner',
    {
        'user_id': '_int',
        'career_id': '_int',
    },
    total=True
)

_user_careerCompounduser_id_career_idKey = TypedDict(
    '_user_careerCompounduser_id_career_idKey',
    {
        'user_id_career_id': '_user_careerCompounduser_id_career_idKeyInner',
    },
    total=True
)

user_careerWhereUniqueInput = _user_careerCompounduser_id_career_idKey


class user_careerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    career: 'careerUpdateOneWithoutRelationsInput'
    user: 'userUpdateOneWithoutRelationsInput'


class user_careerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""


class user_careerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['user_careerCreateWithoutRelationsInput']
    connect: List['user_careerWhereUniqueInput']
    set: List['user_careerWhereUniqueInput']
    disconnect: List['user_careerWhereUniqueInput']
    delete: List['user_careerWhereUniqueInput']

    # TODO
    # update: List['user_careerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['user_careerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['user_careerScalarWhereInput']
    # upsert: List['user_careerUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['user_careerCreateOrConnectWithoutRelationsInput']


class user_careerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'user_careerCreateWithoutRelationsInput'
    connect: 'user_careerWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'user_careerUpdateInput'
    # upsert: 'user_careerUpsertWithoutRelationsInput'
    # connectOrCreate: 'user_careerCreateOrConnectWithoutRelationsInput'


class user_careerUpsertInput(TypedDict):
    create: 'user_careerCreateInput'
    update: 'user_careerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_user_career_user_id_OrderByInput = TypedDict(
    '_user_career_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_user_career_career_id_OrderByInput = TypedDict(
    '_user_career_career_id_OrderByInput',
    {
        'career_id': 'SortOrder',
    },
    total=True
)

user_careerOrderByInput = Union[
    '_user_career_user_id_OrderByInput',
    '_user_career_career_id_OrderByInput',
]



# recursive user_career types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

user_careerRelationFilter = TypedDict(
    'user_careerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class user_careerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class user_careerInclude(TypedDict, total=False):
    """user_career relational arguments"""
    career: Union[bool, 'careerArgsFromuser_career']
    user: Union[bool, 'userArgsFromuser_career']


    

class userIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuser_careerRecursive1']
    contact: Union[bool, 'FindManycontactArgsFromuser_careerRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFromuser_careerRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromuser_careerRecursive1']
    post: Union[bool, 'FindManypostArgsFromuser_careerRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFromuser_careerRecursive1']


class userIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuser_careerRecursive2']
    contact: Union[bool, 'FindManycontactArgsFromuser_careerRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFromuser_careerRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromuser_careerRecursive2']
    post: Union[bool, 'FindManypostArgsFromuser_careerRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFromuser_careerRecursive2']


class userIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuser_careerRecursive3']
    contact: Union[bool, 'FindManycontactArgsFromuser_careerRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFromuser_careerRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromuser_careerRecursive3']
    post: Union[bool, 'FindManypostArgsFromuser_careerRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFromuser_careerRecursive3']


class userIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuser_careerRecursive4']
    contact: Union[bool, 'FindManycontactArgsFromuser_careerRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFromuser_careerRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromuser_careerRecursive4']
    post: Union[bool, 'FindManypostArgsFromuser_careerRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFromuser_careerRecursive4']


class userIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class userArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManyuserArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive1']
    user1: Union[bool, 'userArgsFromuser_careerRecursive1']
    user2: Union[bool, 'userArgsFromuser_careerRecursive1']


class rating_userIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive2']
    user1: Union[bool, 'userArgsFromuser_careerRecursive2']
    user2: Union[bool, 'userArgsFromuser_careerRecursive2']


class rating_userIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive3']
    user1: Union[bool, 'userArgsFromuser_careerRecursive3']
    user2: Union[bool, 'userArgsFromuser_careerRecursive3']


class rating_userIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive4']
    user1: Union[bool, 'userArgsFromuser_careerRecursive4']
    user2: Union[bool, 'userArgsFromuser_careerRecursive4']


class rating_userIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class rating_userArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManyrating_userArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive1']
    user1: Union[bool, 'userArgsFromuser_careerRecursive1']
    user2: Union[bool, 'userArgsFromuser_careerRecursive1']


class rating_comIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive2']
    user1: Union[bool, 'userArgsFromuser_careerRecursive2']
    user2: Union[bool, 'userArgsFromuser_careerRecursive2']


class rating_comIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive3']
    user1: Union[bool, 'userArgsFromuser_careerRecursive3']
    user2: Union[bool, 'userArgsFromuser_careerRecursive3']


class rating_comIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive4']
    user1: Union[bool, 'userArgsFromuser_careerRecursive4']
    user2: Union[bool, 'userArgsFromuser_careerRecursive4']


class rating_comIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class rating_comArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManyrating_comArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    user: Union[bool, 'userArgsFromuser_careerRecursive1']


class contactIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    user: Union[bool, 'userArgsFromuser_careerRecursive2']


class contactIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    user: Union[bool, 'userArgsFromuser_careerRecursive3']


class contactIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    user: Union[bool, 'userArgsFromuser_careerRecursive4']


class contactIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class contactArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManycontactArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    experiences: Union[bool, 'FindManyexperienceArgsFromuser_careerRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuser_careerRecursive1']


class categoryIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    experiences: Union[bool, 'FindManyexperienceArgsFromuser_careerRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuser_careerRecursive2']


class categoryIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    experiences: Union[bool, 'FindManyexperienceArgsFromuser_careerRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuser_careerRecursive3']


class categoryIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    experiences: Union[bool, 'FindManyexperienceArgsFromuser_careerRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuser_careerRecursive4']


class categoryIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class categoryArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManycategoryArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    category: Union[bool, 'categoryArgsFromuser_careerRecursive1']
    user: Union[bool, 'userArgsFromuser_careerRecursive1']


class experienceIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    category: Union[bool, 'categoryArgsFromuser_careerRecursive2']
    user: Union[bool, 'userArgsFromuser_careerRecursive2']


class experienceIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    category: Union[bool, 'categoryArgsFromuser_careerRecursive3']
    user: Union[bool, 'userArgsFromuser_careerRecursive3']


class experienceIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    category: Union[bool, 'categoryArgsFromuser_careerRecursive4']
    user: Union[bool, 'userArgsFromuser_careerRecursive4']


class experienceIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class experienceArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManyexperienceArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromuser_careerRecursive1']


class careerIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromuser_careerRecursive2']


class careerIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromuser_careerRecursive3']


class careerIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromuser_careerRecursive4']


class careerIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class careerArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManycareerArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    career: Union[bool, 'careerArgsFromuser_careerRecursive1']
    user: Union[bool, 'userArgsFromuser_careerRecursive1']


class user_careerIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    career: Union[bool, 'careerArgsFromuser_careerRecursive2']
    user: Union[bool, 'userArgsFromuser_careerRecursive2']


class user_careerIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    career: Union[bool, 'careerArgsFromuser_careerRecursive3']
    user: Union[bool, 'userArgsFromuser_careerRecursive3']


class user_careerIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    career: Union[bool, 'careerArgsFromuser_careerRecursive4']
    user: Union[bool, 'userArgsFromuser_careerRecursive4']


class user_careerIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class user_careerArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManyuser_careerArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuser_careerRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromuser_careerRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuser_careerRecursive1']
    post: Union[bool, 'FindManypostArgsFromuser_careerRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive1']


class jobIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuser_careerRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromuser_careerRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuser_careerRecursive2']
    post: Union[bool, 'FindManypostArgsFromuser_careerRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive2']


class jobIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuser_careerRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromuser_careerRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuser_careerRecursive3']
    post: Union[bool, 'FindManypostArgsFromuser_careerRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive3']


class jobIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromuser_careerRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromuser_careerRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromuser_careerRecursive4']
    post: Union[bool, 'FindManypostArgsFromuser_careerRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFromuser_careerRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFromuser_careerRecursive4']


class jobIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class jobArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManyjobArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive1']
    user: Union[bool, 'userArgsFromuser_careerRecursive1']


class historyIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive2']
    user: Union[bool, 'userArgsFromuser_careerRecursive2']


class historyIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive3']
    user: Union[bool, 'userArgsFromuser_careerRecursive3']


class historyIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive4']
    user: Union[bool, 'userArgsFromuser_careerRecursive4']


class historyIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class historyArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManyhistoryArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    category: Union[bool, 'categoryArgsFromuser_careerRecursive1']
    job: Union[bool, 'jobArgsFromuser_careerRecursive1']


class job_expIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    category: Union[bool, 'categoryArgsFromuser_careerRecursive2']
    job: Union[bool, 'jobArgsFromuser_careerRecursive2']


class job_expIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    category: Union[bool, 'categoryArgsFromuser_careerRecursive3']
    job: Union[bool, 'jobArgsFromuser_careerRecursive3']


class job_expIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    category: Union[bool, 'categoryArgsFromuser_careerRecursive4']
    job: Union[bool, 'jobArgsFromuser_careerRecursive4']


class job_expIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class job_expArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManyjob_expArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive1']
    user: Union[bool, 'userArgsFromuser_careerRecursive1']


class bookmarkIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive2']
    user: Union[bool, 'userArgsFromuser_careerRecursive2']


class bookmarkIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive3']
    user: Union[bool, 'userArgsFromuser_careerRecursive3']


class bookmarkIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive4']
    user: Union[bool, 'userArgsFromuser_careerRecursive4']


class bookmarkIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class bookmarkArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManybookmarkArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFromuser_career(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive1']
    user: Union[bool, 'userArgsFromuser_careerRecursive1']


class postIncludeFromuser_careerRecursive1(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive2']
    user: Union[bool, 'userArgsFromuser_careerRecursive2']


class postIncludeFromuser_careerRecursive2(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive3']
    user: Union[bool, 'userArgsFromuser_careerRecursive3']


class postIncludeFromuser_careerRecursive3(TypedDict, total=False):
    """Relational arguments for user_career"""
    job: Union[bool, 'jobArgsFromuser_careerRecursive4']
    user: Union[bool, 'userArgsFromuser_careerRecursive4']


class postIncludeFromuser_careerRecursive4(TypedDict, total=False):
    """Relational arguments for user_career"""

    

class postArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    
    

class FindManypostArgsFromuser_career(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFromuser_careerRecursive1(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFromuser_careerRecursive2(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFromuser_careerRecursive3(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFromuser_careerRecursive4(TypedDict, total=False):
    """Arguments for user_career"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManyuser_careerArgs = FindManyuser_careerArgsFromuser_career
FindFirstuser_careerArgs = FindManyuser_careerArgsFromuser_career


    

class user_careerWhereInput(TypedDict, total=False):
    """user_career arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    career_id: Union[_int, 'types.IntFilter']
    career: 'careerRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['user_careerWhereInputRecursive1', List['user_careerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['user_careerWhereInputRecursive1']
    OR: List['user_careerWhereInputRecursive1']
    NOT: List['user_careerWhereInputRecursive1']


class user_careerWhereInputRecursive1(TypedDict, total=False):
    """user_career arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    career_id: Union[_int, 'types.IntFilter']
    career: 'careerRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['user_careerWhereInputRecursive2', List['user_careerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['user_careerWhereInputRecursive2']
    OR: List['user_careerWhereInputRecursive2']
    NOT: List['user_careerWhereInputRecursive2']


class user_careerWhereInputRecursive2(TypedDict, total=False):
    """user_career arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    career_id: Union[_int, 'types.IntFilter']
    career: 'careerRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['user_careerWhereInputRecursive3', List['user_careerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['user_careerWhereInputRecursive3']
    OR: List['user_careerWhereInputRecursive3']
    NOT: List['user_careerWhereInputRecursive3']


class user_careerWhereInputRecursive3(TypedDict, total=False):
    """user_career arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    career_id: Union[_int, 'types.IntFilter']
    career: 'careerRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['user_careerWhereInputRecursive4', List['user_careerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['user_careerWhereInputRecursive4']
    OR: List['user_careerWhereInputRecursive4']
    NOT: List['user_careerWhereInputRecursive4']


class user_careerWhereInputRecursive4(TypedDict, total=False):
    """user_career arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    career_id: Union[_int, 'types.IntFilter']
    career: 'careerRelationFilter'
    user: 'userRelationFilter'



# aggregate user_career types


    

class user_careerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """user_career arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    career_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['user_careerScalarWhereWithAggregatesInputRecursive1']
    OR: List['user_careerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['user_careerScalarWhereWithAggregatesInputRecursive1']


class user_careerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """user_career arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    career_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['user_careerScalarWhereWithAggregatesInputRecursive2']
    OR: List['user_careerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['user_careerScalarWhereWithAggregatesInputRecursive2']


class user_careerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """user_career arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    career_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['user_careerScalarWhereWithAggregatesInputRecursive3']
    OR: List['user_careerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['user_careerScalarWhereWithAggregatesInputRecursive3']


class user_careerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """user_career arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    career_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['user_careerScalarWhereWithAggregatesInputRecursive4']
    OR: List['user_careerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['user_careerScalarWhereWithAggregatesInputRecursive4']


class user_careerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """user_career arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    career_id: Union[_int, 'types.IntWithAggregatesFilter']



class user_careerGroupByOutput(TypedDict, total=False):
    user_id: _int
    career_id: _int
    _sum: 'user_careerSumAggregateOutput'
    _avg: 'user_careerAvgAggregateOutput'
    _min: 'user_careerMinAggregateOutput'
    _max: 'user_careerMaxAggregateOutput'
    _count: 'user_careerCountAggregateOutput'


class user_careerAvgAggregateOutput(TypedDict, total=False):
    """user_career output for aggregating averages"""
    user_id: float
    career_id: float


class user_careerSumAggregateOutput(TypedDict, total=False):
    """user_career output for aggregating sums"""
    user_id: _int
    career_id: _int


class user_careerScalarAggregateOutput(TypedDict, total=False):
    """user_career output including scalar fields"""
    user_id: _int
    career_id: _int


user_careerMinAggregateOutput = user_careerScalarAggregateOutput
user_careerMaxAggregateOutput = user_careerScalarAggregateOutput


class user_careerMaxAggregateInput(TypedDict, total=False):
    """user_career input for aggregating by max"""
    user_id: bool
    career_id: bool


class user_careerMinAggregateInput(TypedDict, total=False):
    """user_career input for aggregating by min"""
    user_id: bool
    career_id: bool


class user_careerNumberAggregateInput(TypedDict, total=False):
    """user_career input for aggregating numbers"""
    user_id: bool
    career_id: bool


user_careerAvgAggregateInput = user_careerNumberAggregateInput
user_careerSumAggregateInput = user_careerNumberAggregateInput


user_careerCountAggregateInput = TypedDict(
    'user_careerCountAggregateInput',
    {
        'user_id': bool,
        'career_id': bool,
        '_all': bool,
    },
    total=False,
)

user_careerCountAggregateOutput = TypedDict(
    'user_careerCountAggregateOutput',
    {
        'user_id': int,
        'career_id': int,
        '_all': int,
    },
    total=False,
)


user_careerKeys = Literal[
    'user_id',
    'career_id',
    'career',
    'user',
]
user_careerScalarFieldKeys = Literal[
    'user_id',
    'career_id',
]
user_careerScalarFieldKeysT = TypeVar('user_careerScalarFieldKeysT', bound=user_careerScalarFieldKeys)

user_careerRelationalFieldKeys = Literal[
        'career',
        'user',
    ]

# job types

class jobOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the job create method"""
    job_id: _int
    posted_date: datetime.datetime
    submitted_date: Optional[datetime.datetime]
    status: _str
    bookmark: 'bookmarkCreateManyNestedWithoutRelationsInput'
    history: 'historyCreateManyNestedWithoutRelationsInput'
    job_exp: 'job_expCreateManyNestedWithoutRelationsInput'
    post: 'postCreateManyNestedWithoutRelationsInput'
    rating_com: 'rating_comCreateManyNestedWithoutRelationsInput'
    rating_user: 'rating_userCreateManyNestedWithoutRelationsInput'


class jobCreateInput(jobOptionalCreateInput):
    """Required arguments to the job create method"""
    title: _str
    description: _str
    budget: _int
    type: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class jobOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the job create method, without relations"""
    job_id: _int
    posted_date: datetime.datetime
    submitted_date: Optional[datetime.datetime]
    status: _str


class jobCreateWithoutRelationsInput(jobOptionalCreateWithoutRelationsInput):
    """Required arguments to the job create method, without relations"""
    title: _str
    description: _str
    budget: _int
    type: _str


class jobCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'jobCreateWithoutRelationsInput'
    connect: 'jobWhereUniqueInput'


class jobCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['jobCreateWithoutRelationsInput', List['jobCreateWithoutRelationsInput']]
    connect: Union['jobWhereUniqueInput', List['jobWhereUniqueInput']]


_jobWhereUnique_job_id_Input = TypedDict(
    '_jobWhereUnique_job_id_Input',
    {
        'job_id': '_int',
    },
    total=True
)

jobWhereUniqueInput = _jobWhereUnique_job_id_Input


class jobUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    job_id: Union[AtomicIntInput, _int]
    title: _str
    description: _str
    budget: Union[AtomicIntInput, _int]
    type: _str
    posted_date: datetime.datetime
    submitted_date: Optional[datetime.datetime]
    status: _str
    bookmark: 'bookmarkUpdateManyWithoutRelationsInput'
    history: 'historyUpdateManyWithoutRelationsInput'
    job_exp: 'job_expUpdateManyWithoutRelationsInput'
    post: 'postUpdateManyWithoutRelationsInput'
    rating_com: 'rating_comUpdateManyWithoutRelationsInput'
    rating_user: 'rating_userUpdateManyWithoutRelationsInput'


class jobUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    job_id: Union[AtomicIntInput, _int]
    title: _str
    description: _str
    budget: Union[AtomicIntInput, _int]
    type: _str
    posted_date: datetime.datetime
    submitted_date: Optional[datetime.datetime]
    status: _str


class jobUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['jobCreateWithoutRelationsInput']
    connect: List['jobWhereUniqueInput']
    set: List['jobWhereUniqueInput']
    disconnect: List['jobWhereUniqueInput']
    delete: List['jobWhereUniqueInput']

    # TODO
    # update: List['jobUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['jobUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['jobScalarWhereInput']
    # upsert: List['jobUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['jobCreateOrConnectWithoutRelationsInput']


class jobUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'jobCreateWithoutRelationsInput'
    connect: 'jobWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'jobUpdateInput'
    # upsert: 'jobUpsertWithoutRelationsInput'
    # connectOrCreate: 'jobCreateOrConnectWithoutRelationsInput'


class jobUpsertInput(TypedDict):
    create: 'jobCreateInput'
    update: 'jobUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_job_job_id_OrderByInput = TypedDict(
    '_job_job_id_OrderByInput',
    {
        'job_id': 'SortOrder',
    },
    total=True
)

_job_title_OrderByInput = TypedDict(
    '_job_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_job_description_OrderByInput = TypedDict(
    '_job_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_job_budget_OrderByInput = TypedDict(
    '_job_budget_OrderByInput',
    {
        'budget': 'SortOrder',
    },
    total=True
)

_job_type_OrderByInput = TypedDict(
    '_job_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_job_posted_date_OrderByInput = TypedDict(
    '_job_posted_date_OrderByInput',
    {
        'posted_date': 'SortOrder',
    },
    total=True
)

_job_submitted_date_OrderByInput = TypedDict(
    '_job_submitted_date_OrderByInput',
    {
        'submitted_date': 'SortOrder',
    },
    total=True
)

_job_status_OrderByInput = TypedDict(
    '_job_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

jobOrderByInput = Union[
    '_job_job_id_OrderByInput',
    '_job_title_OrderByInput',
    '_job_description_OrderByInput',
    '_job_budget_OrderByInput',
    '_job_type_OrderByInput',
    '_job_posted_date_OrderByInput',
    '_job_submitted_date_OrderByInput',
    '_job_status_OrderByInput',
]



# recursive job types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

jobRelationFilter = TypedDict(
    'jobRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class jobListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class jobInclude(TypedDict, total=False):
    """job relational arguments"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjob']
    history: Union[bool, 'FindManyhistoryArgsFromjob']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjob']
    post: Union[bool, 'FindManypostArgsFromjob']
    rating_com: Union[bool, 'FindManyrating_comArgsFromjob']
    rating_user: Union[bool, 'FindManyrating_userArgsFromjob']


    

class userIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjobRecursive1']
    contact: Union[bool, 'FindManycontactArgsFromjobRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFromjobRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromjobRecursive1']
    post: Union[bool, 'FindManypostArgsFromjobRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromjobRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromjobRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromjobRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromjobRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFromjobRecursive1']


class userIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjobRecursive2']
    contact: Union[bool, 'FindManycontactArgsFromjobRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFromjobRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromjobRecursive2']
    post: Union[bool, 'FindManypostArgsFromjobRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromjobRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromjobRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromjobRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromjobRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFromjobRecursive2']


class userIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjobRecursive3']
    contact: Union[bool, 'FindManycontactArgsFromjobRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFromjobRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromjobRecursive3']
    post: Union[bool, 'FindManypostArgsFromjobRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromjobRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromjobRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromjobRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromjobRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFromjobRecursive3']


class userIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjobRecursive4']
    contact: Union[bool, 'FindManycontactArgsFromjobRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFromjobRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromjobRecursive4']
    post: Union[bool, 'FindManypostArgsFromjobRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromjobRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromjobRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromjobRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromjobRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFromjobRecursive4']


class userIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class userArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManyuserArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive1']
    user1: Union[bool, 'userArgsFromjobRecursive1']
    user2: Union[bool, 'userArgsFromjobRecursive1']


class rating_userIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive2']
    user1: Union[bool, 'userArgsFromjobRecursive2']
    user2: Union[bool, 'userArgsFromjobRecursive2']


class rating_userIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive3']
    user1: Union[bool, 'userArgsFromjobRecursive3']
    user2: Union[bool, 'userArgsFromjobRecursive3']


class rating_userIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive4']
    user1: Union[bool, 'userArgsFromjobRecursive4']
    user2: Union[bool, 'userArgsFromjobRecursive4']


class rating_userIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class rating_userArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManyrating_userArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive1']
    user1: Union[bool, 'userArgsFromjobRecursive1']
    user2: Union[bool, 'userArgsFromjobRecursive1']


class rating_comIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive2']
    user1: Union[bool, 'userArgsFromjobRecursive2']
    user2: Union[bool, 'userArgsFromjobRecursive2']


class rating_comIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive3']
    user1: Union[bool, 'userArgsFromjobRecursive3']
    user2: Union[bool, 'userArgsFromjobRecursive3']


class rating_comIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive4']
    user1: Union[bool, 'userArgsFromjobRecursive4']
    user2: Union[bool, 'userArgsFromjobRecursive4']


class rating_comIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class rating_comArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManyrating_comArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    user: Union[bool, 'userArgsFromjobRecursive1']


class contactIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    user: Union[bool, 'userArgsFromjobRecursive2']


class contactIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    user: Union[bool, 'userArgsFromjobRecursive3']


class contactIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    user: Union[bool, 'userArgsFromjobRecursive4']


class contactIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class contactArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManycontactArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    experiences: Union[bool, 'FindManyexperienceArgsFromjobRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjobRecursive1']


class categoryIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    experiences: Union[bool, 'FindManyexperienceArgsFromjobRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjobRecursive2']


class categoryIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    experiences: Union[bool, 'FindManyexperienceArgsFromjobRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjobRecursive3']


class categoryIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    experiences: Union[bool, 'FindManyexperienceArgsFromjobRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjobRecursive4']


class categoryIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class categoryArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManycategoryArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    category: Union[bool, 'categoryArgsFromjobRecursive1']
    user: Union[bool, 'userArgsFromjobRecursive1']


class experienceIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    category: Union[bool, 'categoryArgsFromjobRecursive2']
    user: Union[bool, 'userArgsFromjobRecursive2']


class experienceIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    category: Union[bool, 'categoryArgsFromjobRecursive3']
    user: Union[bool, 'userArgsFromjobRecursive3']


class experienceIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    category: Union[bool, 'categoryArgsFromjobRecursive4']
    user: Union[bool, 'userArgsFromjobRecursive4']


class experienceIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class experienceArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManyexperienceArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromjobRecursive1']


class careerIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromjobRecursive2']


class careerIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromjobRecursive3']


class careerIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromjobRecursive4']


class careerIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class careerArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManycareerArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    career: Union[bool, 'careerArgsFromjobRecursive1']
    user: Union[bool, 'userArgsFromjobRecursive1']


class user_careerIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    career: Union[bool, 'careerArgsFromjobRecursive2']
    user: Union[bool, 'userArgsFromjobRecursive2']


class user_careerIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    career: Union[bool, 'careerArgsFromjobRecursive3']
    user: Union[bool, 'userArgsFromjobRecursive3']


class user_careerIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    career: Union[bool, 'careerArgsFromjobRecursive4']
    user: Union[bool, 'userArgsFromjobRecursive4']


class user_careerIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class user_careerArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManyuser_careerArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjobRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromjobRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjobRecursive1']
    post: Union[bool, 'FindManypostArgsFromjobRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFromjobRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFromjobRecursive1']


class jobIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjobRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromjobRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjobRecursive2']
    post: Union[bool, 'FindManypostArgsFromjobRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFromjobRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFromjobRecursive2']


class jobIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjobRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromjobRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjobRecursive3']
    post: Union[bool, 'FindManypostArgsFromjobRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFromjobRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFromjobRecursive3']


class jobIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjobRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromjobRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjobRecursive4']
    post: Union[bool, 'FindManypostArgsFromjobRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFromjobRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFromjobRecursive4']


class jobIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class jobArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManyjobArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive1']
    user: Union[bool, 'userArgsFromjobRecursive1']


class historyIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive2']
    user: Union[bool, 'userArgsFromjobRecursive2']


class historyIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive3']
    user: Union[bool, 'userArgsFromjobRecursive3']


class historyIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive4']
    user: Union[bool, 'userArgsFromjobRecursive4']


class historyIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class historyArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManyhistoryArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    category: Union[bool, 'categoryArgsFromjobRecursive1']
    job: Union[bool, 'jobArgsFromjobRecursive1']


class job_expIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    category: Union[bool, 'categoryArgsFromjobRecursive2']
    job: Union[bool, 'jobArgsFromjobRecursive2']


class job_expIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    category: Union[bool, 'categoryArgsFromjobRecursive3']
    job: Union[bool, 'jobArgsFromjobRecursive3']


class job_expIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    category: Union[bool, 'categoryArgsFromjobRecursive4']
    job: Union[bool, 'jobArgsFromjobRecursive4']


class job_expIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class job_expArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManyjob_expArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive1']
    user: Union[bool, 'userArgsFromjobRecursive1']


class bookmarkIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive2']
    user: Union[bool, 'userArgsFromjobRecursive2']


class bookmarkIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive3']
    user: Union[bool, 'userArgsFromjobRecursive3']


class bookmarkIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive4']
    user: Union[bool, 'userArgsFromjobRecursive4']


class bookmarkIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class bookmarkArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManybookmarkArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFromjob(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive1']
    user: Union[bool, 'userArgsFromjobRecursive1']


class postIncludeFromjobRecursive1(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive2']
    user: Union[bool, 'userArgsFromjobRecursive2']


class postIncludeFromjobRecursive2(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive3']
    user: Union[bool, 'userArgsFromjobRecursive3']


class postIncludeFromjobRecursive3(TypedDict, total=False):
    """Relational arguments for job"""
    job: Union[bool, 'jobArgsFromjobRecursive4']
    user: Union[bool, 'userArgsFromjobRecursive4']


class postIncludeFromjobRecursive4(TypedDict, total=False):
    """Relational arguments for job"""

    

class postArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    
    

class FindManypostArgsFromjob(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFromjobRecursive1(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFromjobRecursive2(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFromjobRecursive3(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFromjobRecursive4(TypedDict, total=False):
    """Arguments for job"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManyjobArgs = FindManyjobArgsFromjob
FindFirstjobArgs = FindManyjobArgsFromjob


    

class jobWhereInput(TypedDict, total=False):
    """job arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    budget: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    posted_date: Union[datetime.datetime, 'types.DateTimeFilter']
    submitted_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_str, 'types.StringFilter']
    bookmark: 'bookmarkListRelationFilter'
    history: 'historyListRelationFilter'
    job_exp: 'job_expListRelationFilter'
    post: 'postListRelationFilter'
    rating_com: 'rating_comListRelationFilter'
    rating_user: 'rating_userListRelationFilter'

    # should be noted that AND and NOT should be Union['jobWhereInputRecursive1', List['jobWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['jobWhereInputRecursive1']
    OR: List['jobWhereInputRecursive1']
    NOT: List['jobWhereInputRecursive1']


class jobWhereInputRecursive1(TypedDict, total=False):
    """job arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    budget: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    posted_date: Union[datetime.datetime, 'types.DateTimeFilter']
    submitted_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_str, 'types.StringFilter']
    bookmark: 'bookmarkListRelationFilter'
    history: 'historyListRelationFilter'
    job_exp: 'job_expListRelationFilter'
    post: 'postListRelationFilter'
    rating_com: 'rating_comListRelationFilter'
    rating_user: 'rating_userListRelationFilter'

    # should be noted that AND and NOT should be Union['jobWhereInputRecursive2', List['jobWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['jobWhereInputRecursive2']
    OR: List['jobWhereInputRecursive2']
    NOT: List['jobWhereInputRecursive2']


class jobWhereInputRecursive2(TypedDict, total=False):
    """job arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    budget: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    posted_date: Union[datetime.datetime, 'types.DateTimeFilter']
    submitted_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_str, 'types.StringFilter']
    bookmark: 'bookmarkListRelationFilter'
    history: 'historyListRelationFilter'
    job_exp: 'job_expListRelationFilter'
    post: 'postListRelationFilter'
    rating_com: 'rating_comListRelationFilter'
    rating_user: 'rating_userListRelationFilter'

    # should be noted that AND and NOT should be Union['jobWhereInputRecursive3', List['jobWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['jobWhereInputRecursive3']
    OR: List['jobWhereInputRecursive3']
    NOT: List['jobWhereInputRecursive3']


class jobWhereInputRecursive3(TypedDict, total=False):
    """job arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    budget: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    posted_date: Union[datetime.datetime, 'types.DateTimeFilter']
    submitted_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_str, 'types.StringFilter']
    bookmark: 'bookmarkListRelationFilter'
    history: 'historyListRelationFilter'
    job_exp: 'job_expListRelationFilter'
    post: 'postListRelationFilter'
    rating_com: 'rating_comListRelationFilter'
    rating_user: 'rating_userListRelationFilter'

    # should be noted that AND and NOT should be Union['jobWhereInputRecursive4', List['jobWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['jobWhereInputRecursive4']
    OR: List['jobWhereInputRecursive4']
    NOT: List['jobWhereInputRecursive4']


class jobWhereInputRecursive4(TypedDict, total=False):
    """job arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    budget: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    posted_date: Union[datetime.datetime, 'types.DateTimeFilter']
    submitted_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_str, 'types.StringFilter']
    bookmark: 'bookmarkListRelationFilter'
    history: 'historyListRelationFilter'
    job_exp: 'job_expListRelationFilter'
    post: 'postListRelationFilter'
    rating_com: 'rating_comListRelationFilter'
    rating_user: 'rating_userListRelationFilter'



# aggregate job types


    

class jobScalarWhereWithAggregatesInput(TypedDict, total=False):
    """job arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    budget: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    posted_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    submitted_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['jobScalarWhereWithAggregatesInputRecursive1']
    OR: List['jobScalarWhereWithAggregatesInputRecursive1']
    NOT: List['jobScalarWhereWithAggregatesInputRecursive1']


class jobScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """job arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    budget: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    posted_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    submitted_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['jobScalarWhereWithAggregatesInputRecursive2']
    OR: List['jobScalarWhereWithAggregatesInputRecursive2']
    NOT: List['jobScalarWhereWithAggregatesInputRecursive2']


class jobScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """job arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    budget: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    posted_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    submitted_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['jobScalarWhereWithAggregatesInputRecursive3']
    OR: List['jobScalarWhereWithAggregatesInputRecursive3']
    NOT: List['jobScalarWhereWithAggregatesInputRecursive3']


class jobScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """job arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    budget: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    posted_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    submitted_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['jobScalarWhereWithAggregatesInputRecursive4']
    OR: List['jobScalarWhereWithAggregatesInputRecursive4']
    NOT: List['jobScalarWhereWithAggregatesInputRecursive4']


class jobScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """job arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    budget: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    posted_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    submitted_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']



class jobGroupByOutput(TypedDict, total=False):
    job_id: _int
    title: _str
    description: _str
    budget: _int
    type: _str
    posted_date: datetime.datetime
    submitted_date: datetime.datetime
    status: _str
    _sum: 'jobSumAggregateOutput'
    _avg: 'jobAvgAggregateOutput'
    _min: 'jobMinAggregateOutput'
    _max: 'jobMaxAggregateOutput'
    _count: 'jobCountAggregateOutput'


class jobAvgAggregateOutput(TypedDict, total=False):
    """job output for aggregating averages"""
    job_id: float
    budget: float


class jobSumAggregateOutput(TypedDict, total=False):
    """job output for aggregating sums"""
    job_id: _int
    budget: _int


class jobScalarAggregateOutput(TypedDict, total=False):
    """job output including scalar fields"""
    job_id: _int
    title: _str
    description: _str
    budget: _int
    type: _str
    posted_date: datetime.datetime
    submitted_date: datetime.datetime
    status: _str


jobMinAggregateOutput = jobScalarAggregateOutput
jobMaxAggregateOutput = jobScalarAggregateOutput


class jobMaxAggregateInput(TypedDict, total=False):
    """job input for aggregating by max"""
    job_id: bool
    title: bool
    description: bool
    budget: bool
    type: bool
    posted_date: bool
    submitted_date: bool
    status: bool


class jobMinAggregateInput(TypedDict, total=False):
    """job input for aggregating by min"""
    job_id: bool
    title: bool
    description: bool
    budget: bool
    type: bool
    posted_date: bool
    submitted_date: bool
    status: bool


class jobNumberAggregateInput(TypedDict, total=False):
    """job input for aggregating numbers"""
    job_id: bool
    budget: bool


jobAvgAggregateInput = jobNumberAggregateInput
jobSumAggregateInput = jobNumberAggregateInput


jobCountAggregateInput = TypedDict(
    'jobCountAggregateInput',
    {
        'job_id': bool,
        'title': bool,
        'description': bool,
        'budget': bool,
        'type': bool,
        'posted_date': bool,
        'submitted_date': bool,
        'status': bool,
        '_all': bool,
    },
    total=False,
)

jobCountAggregateOutput = TypedDict(
    'jobCountAggregateOutput',
    {
        'job_id': int,
        'title': int,
        'description': int,
        'budget': int,
        'type': int,
        'posted_date': int,
        'submitted_date': int,
        'status': int,
        '_all': int,
    },
    total=False,
)


jobKeys = Literal[
    'job_id',
    'title',
    'description',
    'budget',
    'type',
    'posted_date',
    'submitted_date',
    'status',
    'bookmark',
    'history',
    'job_exp',
    'post',
    'rating_com',
    'rating_user',
]
jobScalarFieldKeys = Literal[
    'job_id',
    'title',
    'description',
    'budget',
    'type',
    'posted_date',
    'submitted_date',
    'status',
]
jobScalarFieldKeysT = TypeVar('jobScalarFieldKeysT', bound=jobScalarFieldKeys)

jobRelationalFieldKeys = Literal[
        'bookmark',
        'history',
        'job_exp',
        'post',
        'rating_com',
        'rating_user',
    ]

# history types

class historyOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the history create method"""
    user_id: _int
    job_id: _int
    status: _str
    job: 'jobCreateNestedWithoutRelationsInput'
    user: 'userCreateNestedWithoutRelationsInput'


class historyCreateInput(historyOptionalCreateInput):
    """Required arguments to the history create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class historyOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the history create method, without relations"""
    user_id: _int
    job_id: _int
    status: _str


class historyCreateWithoutRelationsInput(historyOptionalCreateWithoutRelationsInput):
    """Required arguments to the history create method, without relations"""


class historyCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'historyCreateWithoutRelationsInput'
    connect: 'historyWhereUniqueInput'


class historyCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['historyCreateWithoutRelationsInput', List['historyCreateWithoutRelationsInput']]
    connect: Union['historyWhereUniqueInput', List['historyWhereUniqueInput']]


_historyCompounduser_id_job_idKeyInner = TypedDict(
    '_historyCompounduser_id_job_idKeyInner',
    {
        'user_id': '_int',
        'job_id': '_int',
    },
    total=True
)

_historyCompounduser_id_job_idKey = TypedDict(
    '_historyCompounduser_id_job_idKey',
    {
        'user_id_job_id': '_historyCompounduser_id_job_idKeyInner',
    },
    total=True
)

historyWhereUniqueInput = _historyCompounduser_id_job_idKey


class historyUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    status: _str
    job: 'jobUpdateOneWithoutRelationsInput'
    user: 'userUpdateOneWithoutRelationsInput'


class historyUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    status: _str


class historyUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['historyCreateWithoutRelationsInput']
    connect: List['historyWhereUniqueInput']
    set: List['historyWhereUniqueInput']
    disconnect: List['historyWhereUniqueInput']
    delete: List['historyWhereUniqueInput']

    # TODO
    # update: List['historyUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['historyUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['historyScalarWhereInput']
    # upsert: List['historyUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['historyCreateOrConnectWithoutRelationsInput']


class historyUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'historyCreateWithoutRelationsInput'
    connect: 'historyWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'historyUpdateInput'
    # upsert: 'historyUpsertWithoutRelationsInput'
    # connectOrCreate: 'historyCreateOrConnectWithoutRelationsInput'


class historyUpsertInput(TypedDict):
    create: 'historyCreateInput'
    update: 'historyUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_history_user_id_OrderByInput = TypedDict(
    '_history_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_history_job_id_OrderByInput = TypedDict(
    '_history_job_id_OrderByInput',
    {
        'job_id': 'SortOrder',
    },
    total=True
)

_history_status_OrderByInput = TypedDict(
    '_history_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

historyOrderByInput = Union[
    '_history_user_id_OrderByInput',
    '_history_job_id_OrderByInput',
    '_history_status_OrderByInput',
]



# recursive history types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

historyRelationFilter = TypedDict(
    'historyRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class historyListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class historyInclude(TypedDict, total=False):
    """history relational arguments"""
    job: Union[bool, 'jobArgsFromhistory']
    user: Union[bool, 'userArgsFromhistory']


    

class userIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromhistoryRecursive1']
    contact: Union[bool, 'FindManycontactArgsFromhistoryRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFromhistoryRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromhistoryRecursive1']
    post: Union[bool, 'FindManypostArgsFromhistoryRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFromhistoryRecursive1']


class userIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromhistoryRecursive2']
    contact: Union[bool, 'FindManycontactArgsFromhistoryRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFromhistoryRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromhistoryRecursive2']
    post: Union[bool, 'FindManypostArgsFromhistoryRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFromhistoryRecursive2']


class userIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromhistoryRecursive3']
    contact: Union[bool, 'FindManycontactArgsFromhistoryRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFromhistoryRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromhistoryRecursive3']
    post: Union[bool, 'FindManypostArgsFromhistoryRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFromhistoryRecursive3']


class userIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromhistoryRecursive4']
    contact: Union[bool, 'FindManycontactArgsFromhistoryRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFromhistoryRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromhistoryRecursive4']
    post: Union[bool, 'FindManypostArgsFromhistoryRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFromhistoryRecursive4']


class userIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class userArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManyuserArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive1']
    user1: Union[bool, 'userArgsFromhistoryRecursive1']
    user2: Union[bool, 'userArgsFromhistoryRecursive1']


class rating_userIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive2']
    user1: Union[bool, 'userArgsFromhistoryRecursive2']
    user2: Union[bool, 'userArgsFromhistoryRecursive2']


class rating_userIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive3']
    user1: Union[bool, 'userArgsFromhistoryRecursive3']
    user2: Union[bool, 'userArgsFromhistoryRecursive3']


class rating_userIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive4']
    user1: Union[bool, 'userArgsFromhistoryRecursive4']
    user2: Union[bool, 'userArgsFromhistoryRecursive4']


class rating_userIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class rating_userArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManyrating_userArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive1']
    user1: Union[bool, 'userArgsFromhistoryRecursive1']
    user2: Union[bool, 'userArgsFromhistoryRecursive1']


class rating_comIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive2']
    user1: Union[bool, 'userArgsFromhistoryRecursive2']
    user2: Union[bool, 'userArgsFromhistoryRecursive2']


class rating_comIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive3']
    user1: Union[bool, 'userArgsFromhistoryRecursive3']
    user2: Union[bool, 'userArgsFromhistoryRecursive3']


class rating_comIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive4']
    user1: Union[bool, 'userArgsFromhistoryRecursive4']
    user2: Union[bool, 'userArgsFromhistoryRecursive4']


class rating_comIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class rating_comArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManyrating_comArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    user: Union[bool, 'userArgsFromhistoryRecursive1']


class contactIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    user: Union[bool, 'userArgsFromhistoryRecursive2']


class contactIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    user: Union[bool, 'userArgsFromhistoryRecursive3']


class contactIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    user: Union[bool, 'userArgsFromhistoryRecursive4']


class contactIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class contactArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManycontactArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    experiences: Union[bool, 'FindManyexperienceArgsFromhistoryRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromhistoryRecursive1']


class categoryIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    experiences: Union[bool, 'FindManyexperienceArgsFromhistoryRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromhistoryRecursive2']


class categoryIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    experiences: Union[bool, 'FindManyexperienceArgsFromhistoryRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromhistoryRecursive3']


class categoryIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    experiences: Union[bool, 'FindManyexperienceArgsFromhistoryRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromhistoryRecursive4']


class categoryIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class categoryArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManycategoryArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    category: Union[bool, 'categoryArgsFromhistoryRecursive1']
    user: Union[bool, 'userArgsFromhistoryRecursive1']


class experienceIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    category: Union[bool, 'categoryArgsFromhistoryRecursive2']
    user: Union[bool, 'userArgsFromhistoryRecursive2']


class experienceIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    category: Union[bool, 'categoryArgsFromhistoryRecursive3']
    user: Union[bool, 'userArgsFromhistoryRecursive3']


class experienceIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    category: Union[bool, 'categoryArgsFromhistoryRecursive4']
    user: Union[bool, 'userArgsFromhistoryRecursive4']


class experienceIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class experienceArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManyexperienceArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromhistoryRecursive1']


class careerIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromhistoryRecursive2']


class careerIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromhistoryRecursive3']


class careerIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromhistoryRecursive4']


class careerIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class careerArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManycareerArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    career: Union[bool, 'careerArgsFromhistoryRecursive1']
    user: Union[bool, 'userArgsFromhistoryRecursive1']


class user_careerIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    career: Union[bool, 'careerArgsFromhistoryRecursive2']
    user: Union[bool, 'userArgsFromhistoryRecursive2']


class user_careerIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    career: Union[bool, 'careerArgsFromhistoryRecursive3']
    user: Union[bool, 'userArgsFromhistoryRecursive3']


class user_careerIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    career: Union[bool, 'careerArgsFromhistoryRecursive4']
    user: Union[bool, 'userArgsFromhistoryRecursive4']


class user_careerIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class user_careerArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManyuser_careerArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromhistoryRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromhistoryRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromhistoryRecursive1']
    post: Union[bool, 'FindManypostArgsFromhistoryRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive1']


class jobIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromhistoryRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromhistoryRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromhistoryRecursive2']
    post: Union[bool, 'FindManypostArgsFromhistoryRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive2']


class jobIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromhistoryRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromhistoryRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromhistoryRecursive3']
    post: Union[bool, 'FindManypostArgsFromhistoryRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive3']


class jobIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromhistoryRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromhistoryRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromhistoryRecursive4']
    post: Union[bool, 'FindManypostArgsFromhistoryRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFromhistoryRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFromhistoryRecursive4']


class jobIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class jobArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManyjobArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive1']
    user: Union[bool, 'userArgsFromhistoryRecursive1']


class historyIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive2']
    user: Union[bool, 'userArgsFromhistoryRecursive2']


class historyIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive3']
    user: Union[bool, 'userArgsFromhistoryRecursive3']


class historyIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive4']
    user: Union[bool, 'userArgsFromhistoryRecursive4']


class historyIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class historyArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManyhistoryArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    category: Union[bool, 'categoryArgsFromhistoryRecursive1']
    job: Union[bool, 'jobArgsFromhistoryRecursive1']


class job_expIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    category: Union[bool, 'categoryArgsFromhistoryRecursive2']
    job: Union[bool, 'jobArgsFromhistoryRecursive2']


class job_expIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    category: Union[bool, 'categoryArgsFromhistoryRecursive3']
    job: Union[bool, 'jobArgsFromhistoryRecursive3']


class job_expIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    category: Union[bool, 'categoryArgsFromhistoryRecursive4']
    job: Union[bool, 'jobArgsFromhistoryRecursive4']


class job_expIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class job_expArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManyjob_expArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive1']
    user: Union[bool, 'userArgsFromhistoryRecursive1']


class bookmarkIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive2']
    user: Union[bool, 'userArgsFromhistoryRecursive2']


class bookmarkIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive3']
    user: Union[bool, 'userArgsFromhistoryRecursive3']


class bookmarkIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive4']
    user: Union[bool, 'userArgsFromhistoryRecursive4']


class bookmarkIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class bookmarkArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManybookmarkArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFromhistory(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive1']
    user: Union[bool, 'userArgsFromhistoryRecursive1']


class postIncludeFromhistoryRecursive1(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive2']
    user: Union[bool, 'userArgsFromhistoryRecursive2']


class postIncludeFromhistoryRecursive2(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive3']
    user: Union[bool, 'userArgsFromhistoryRecursive3']


class postIncludeFromhistoryRecursive3(TypedDict, total=False):
    """Relational arguments for history"""
    job: Union[bool, 'jobArgsFromhistoryRecursive4']
    user: Union[bool, 'userArgsFromhistoryRecursive4']


class postIncludeFromhistoryRecursive4(TypedDict, total=False):
    """Relational arguments for history"""

    

class postArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    
    

class FindManypostArgsFromhistory(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFromhistoryRecursive1(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFromhistoryRecursive2(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFromhistoryRecursive3(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFromhistoryRecursive4(TypedDict, total=False):
    """Arguments for history"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManyhistoryArgs = FindManyhistoryArgsFromhistory
FindFirsthistoryArgs = FindManyhistoryArgsFromhistory


    

class historyWhereInput(TypedDict, total=False):
    """history arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['historyWhereInputRecursive1', List['historyWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['historyWhereInputRecursive1']
    OR: List['historyWhereInputRecursive1']
    NOT: List['historyWhereInputRecursive1']


class historyWhereInputRecursive1(TypedDict, total=False):
    """history arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['historyWhereInputRecursive2', List['historyWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['historyWhereInputRecursive2']
    OR: List['historyWhereInputRecursive2']
    NOT: List['historyWhereInputRecursive2']


class historyWhereInputRecursive2(TypedDict, total=False):
    """history arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['historyWhereInputRecursive3', List['historyWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['historyWhereInputRecursive3']
    OR: List['historyWhereInputRecursive3']
    NOT: List['historyWhereInputRecursive3']


class historyWhereInputRecursive3(TypedDict, total=False):
    """history arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['historyWhereInputRecursive4', List['historyWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['historyWhereInputRecursive4']
    OR: List['historyWhereInputRecursive4']
    NOT: List['historyWhereInputRecursive4']


class historyWhereInputRecursive4(TypedDict, total=False):
    """history arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'



# aggregate history types


    

class historyScalarWhereWithAggregatesInput(TypedDict, total=False):
    """history arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['historyScalarWhereWithAggregatesInputRecursive1']
    OR: List['historyScalarWhereWithAggregatesInputRecursive1']
    NOT: List['historyScalarWhereWithAggregatesInputRecursive1']


class historyScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """history arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['historyScalarWhereWithAggregatesInputRecursive2']
    OR: List['historyScalarWhereWithAggregatesInputRecursive2']
    NOT: List['historyScalarWhereWithAggregatesInputRecursive2']


class historyScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """history arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['historyScalarWhereWithAggregatesInputRecursive3']
    OR: List['historyScalarWhereWithAggregatesInputRecursive3']
    NOT: List['historyScalarWhereWithAggregatesInputRecursive3']


class historyScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """history arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['historyScalarWhereWithAggregatesInputRecursive4']
    OR: List['historyScalarWhereWithAggregatesInputRecursive4']
    NOT: List['historyScalarWhereWithAggregatesInputRecursive4']


class historyScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """history arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']



class historyGroupByOutput(TypedDict, total=False):
    user_id: _int
    job_id: _int
    status: _str
    _sum: 'historySumAggregateOutput'
    _avg: 'historyAvgAggregateOutput'
    _min: 'historyMinAggregateOutput'
    _max: 'historyMaxAggregateOutput'
    _count: 'historyCountAggregateOutput'


class historyAvgAggregateOutput(TypedDict, total=False):
    """history output for aggregating averages"""
    user_id: float
    job_id: float


class historySumAggregateOutput(TypedDict, total=False):
    """history output for aggregating sums"""
    user_id: _int
    job_id: _int


class historyScalarAggregateOutput(TypedDict, total=False):
    """history output including scalar fields"""
    user_id: _int
    job_id: _int
    status: _str


historyMinAggregateOutput = historyScalarAggregateOutput
historyMaxAggregateOutput = historyScalarAggregateOutput


class historyMaxAggregateInput(TypedDict, total=False):
    """history input for aggregating by max"""
    user_id: bool
    job_id: bool
    status: bool


class historyMinAggregateInput(TypedDict, total=False):
    """history input for aggregating by min"""
    user_id: bool
    job_id: bool
    status: bool


class historyNumberAggregateInput(TypedDict, total=False):
    """history input for aggregating numbers"""
    user_id: bool
    job_id: bool


historyAvgAggregateInput = historyNumberAggregateInput
historySumAggregateInput = historyNumberAggregateInput


historyCountAggregateInput = TypedDict(
    'historyCountAggregateInput',
    {
        'user_id': bool,
        'job_id': bool,
        'status': bool,
        '_all': bool,
    },
    total=False,
)

historyCountAggregateOutput = TypedDict(
    'historyCountAggregateOutput',
    {
        'user_id': int,
        'job_id': int,
        'status': int,
        '_all': int,
    },
    total=False,
)


historyKeys = Literal[
    'user_id',
    'job_id',
    'status',
    'job',
    'user',
]
historyScalarFieldKeys = Literal[
    'user_id',
    'job_id',
    'status',
]
historyScalarFieldKeysT = TypeVar('historyScalarFieldKeysT', bound=historyScalarFieldKeys)

historyRelationalFieldKeys = Literal[
        'job',
        'user',
    ]

# job_exp types

class job_expOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the job_exp create method"""
    job_id: _int
    category_id: _int
    category: 'categoryCreateNestedWithoutRelationsInput'
    job: 'jobCreateNestedWithoutRelationsInput'


class job_expCreateInput(job_expOptionalCreateInput):
    """Required arguments to the job_exp create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class job_expOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the job_exp create method, without relations"""
    job_id: _int
    category_id: _int


class job_expCreateWithoutRelationsInput(job_expOptionalCreateWithoutRelationsInput):
    """Required arguments to the job_exp create method, without relations"""


class job_expCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'job_expCreateWithoutRelationsInput'
    connect: 'job_expWhereUniqueInput'


class job_expCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['job_expCreateWithoutRelationsInput', List['job_expCreateWithoutRelationsInput']]
    connect: Union['job_expWhereUniqueInput', List['job_expWhereUniqueInput']]


_job_expCompoundjob_id_category_idKeyInner = TypedDict(
    '_job_expCompoundjob_id_category_idKeyInner',
    {
        'job_id': '_int',
        'category_id': '_int',
    },
    total=True
)

_job_expCompoundjob_id_category_idKey = TypedDict(
    '_job_expCompoundjob_id_category_idKey',
    {
        'job_id_category_id': '_job_expCompoundjob_id_category_idKeyInner',
    },
    total=True
)

job_expWhereUniqueInput = _job_expCompoundjob_id_category_idKey


class job_expUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    category: 'categoryUpdateOneWithoutRelationsInput'
    job: 'jobUpdateOneWithoutRelationsInput'


class job_expUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""


class job_expUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['job_expCreateWithoutRelationsInput']
    connect: List['job_expWhereUniqueInput']
    set: List['job_expWhereUniqueInput']
    disconnect: List['job_expWhereUniqueInput']
    delete: List['job_expWhereUniqueInput']

    # TODO
    # update: List['job_expUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['job_expUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['job_expScalarWhereInput']
    # upsert: List['job_expUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['job_expCreateOrConnectWithoutRelationsInput']


class job_expUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'job_expCreateWithoutRelationsInput'
    connect: 'job_expWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'job_expUpdateInput'
    # upsert: 'job_expUpsertWithoutRelationsInput'
    # connectOrCreate: 'job_expCreateOrConnectWithoutRelationsInput'


class job_expUpsertInput(TypedDict):
    create: 'job_expCreateInput'
    update: 'job_expUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_job_exp_job_id_OrderByInput = TypedDict(
    '_job_exp_job_id_OrderByInput',
    {
        'job_id': 'SortOrder',
    },
    total=True
)

_job_exp_category_id_OrderByInput = TypedDict(
    '_job_exp_category_id_OrderByInput',
    {
        'category_id': 'SortOrder',
    },
    total=True
)

job_expOrderByInput = Union[
    '_job_exp_job_id_OrderByInput',
    '_job_exp_category_id_OrderByInput',
]



# recursive job_exp types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

job_expRelationFilter = TypedDict(
    'job_expRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class job_expListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class job_expInclude(TypedDict, total=False):
    """job_exp relational arguments"""
    category: Union[bool, 'categoryArgsFromjob_exp']
    job: Union[bool, 'jobArgsFromjob_exp']


    

class userIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjob_expRecursive1']
    contact: Union[bool, 'FindManycontactArgsFromjob_expRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFromjob_expRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromjob_expRecursive1']
    post: Union[bool, 'FindManypostArgsFromjob_expRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFromjob_expRecursive1']


class userIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjob_expRecursive2']
    contact: Union[bool, 'FindManycontactArgsFromjob_expRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFromjob_expRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromjob_expRecursive2']
    post: Union[bool, 'FindManypostArgsFromjob_expRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFromjob_expRecursive2']


class userIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjob_expRecursive3']
    contact: Union[bool, 'FindManycontactArgsFromjob_expRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFromjob_expRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromjob_expRecursive3']
    post: Union[bool, 'FindManypostArgsFromjob_expRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFromjob_expRecursive3']


class userIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjob_expRecursive4']
    contact: Union[bool, 'FindManycontactArgsFromjob_expRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFromjob_expRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromjob_expRecursive4']
    post: Union[bool, 'FindManypostArgsFromjob_expRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFromjob_expRecursive4']


class userIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class userArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManyuserArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive1']
    user1: Union[bool, 'userArgsFromjob_expRecursive1']
    user2: Union[bool, 'userArgsFromjob_expRecursive1']


class rating_userIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive2']
    user1: Union[bool, 'userArgsFromjob_expRecursive2']
    user2: Union[bool, 'userArgsFromjob_expRecursive2']


class rating_userIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive3']
    user1: Union[bool, 'userArgsFromjob_expRecursive3']
    user2: Union[bool, 'userArgsFromjob_expRecursive3']


class rating_userIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive4']
    user1: Union[bool, 'userArgsFromjob_expRecursive4']
    user2: Union[bool, 'userArgsFromjob_expRecursive4']


class rating_userIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class rating_userArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManyrating_userArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive1']
    user1: Union[bool, 'userArgsFromjob_expRecursive1']
    user2: Union[bool, 'userArgsFromjob_expRecursive1']


class rating_comIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive2']
    user1: Union[bool, 'userArgsFromjob_expRecursive2']
    user2: Union[bool, 'userArgsFromjob_expRecursive2']


class rating_comIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive3']
    user1: Union[bool, 'userArgsFromjob_expRecursive3']
    user2: Union[bool, 'userArgsFromjob_expRecursive3']


class rating_comIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive4']
    user1: Union[bool, 'userArgsFromjob_expRecursive4']
    user2: Union[bool, 'userArgsFromjob_expRecursive4']


class rating_comIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class rating_comArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManyrating_comArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    user: Union[bool, 'userArgsFromjob_expRecursive1']


class contactIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    user: Union[bool, 'userArgsFromjob_expRecursive2']


class contactIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    user: Union[bool, 'userArgsFromjob_expRecursive3']


class contactIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    user: Union[bool, 'userArgsFromjob_expRecursive4']


class contactIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class contactArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManycontactArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    experiences: Union[bool, 'FindManyexperienceArgsFromjob_expRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjob_expRecursive1']


class categoryIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    experiences: Union[bool, 'FindManyexperienceArgsFromjob_expRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjob_expRecursive2']


class categoryIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    experiences: Union[bool, 'FindManyexperienceArgsFromjob_expRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjob_expRecursive3']


class categoryIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    experiences: Union[bool, 'FindManyexperienceArgsFromjob_expRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjob_expRecursive4']


class categoryIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class categoryArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManycategoryArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    category: Union[bool, 'categoryArgsFromjob_expRecursive1']
    user: Union[bool, 'userArgsFromjob_expRecursive1']


class experienceIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    category: Union[bool, 'categoryArgsFromjob_expRecursive2']
    user: Union[bool, 'userArgsFromjob_expRecursive2']


class experienceIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    category: Union[bool, 'categoryArgsFromjob_expRecursive3']
    user: Union[bool, 'userArgsFromjob_expRecursive3']


class experienceIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    category: Union[bool, 'categoryArgsFromjob_expRecursive4']
    user: Union[bool, 'userArgsFromjob_expRecursive4']


class experienceIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class experienceArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManyexperienceArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromjob_expRecursive1']


class careerIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromjob_expRecursive2']


class careerIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromjob_expRecursive3']


class careerIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    user_career: Union[bool, 'FindManyuser_careerArgsFromjob_expRecursive4']


class careerIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class careerArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManycareerArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    career: Union[bool, 'careerArgsFromjob_expRecursive1']
    user: Union[bool, 'userArgsFromjob_expRecursive1']


class user_careerIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    career: Union[bool, 'careerArgsFromjob_expRecursive2']
    user: Union[bool, 'userArgsFromjob_expRecursive2']


class user_careerIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    career: Union[bool, 'careerArgsFromjob_expRecursive3']
    user: Union[bool, 'userArgsFromjob_expRecursive3']


class user_careerIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    career: Union[bool, 'careerArgsFromjob_expRecursive4']
    user: Union[bool, 'userArgsFromjob_expRecursive4']


class user_careerIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class user_careerArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManyuser_careerArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjob_expRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFromjob_expRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjob_expRecursive1']
    post: Union[bool, 'FindManypostArgsFromjob_expRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive1']


class jobIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjob_expRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFromjob_expRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjob_expRecursive2']
    post: Union[bool, 'FindManypostArgsFromjob_expRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive2']


class jobIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjob_expRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFromjob_expRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjob_expRecursive3']
    post: Union[bool, 'FindManypostArgsFromjob_expRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive3']


class jobIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    bookmark: Union[bool, 'FindManybookmarkArgsFromjob_expRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFromjob_expRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFromjob_expRecursive4']
    post: Union[bool, 'FindManypostArgsFromjob_expRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFromjob_expRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFromjob_expRecursive4']


class jobIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class jobArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManyjobArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive1']
    user: Union[bool, 'userArgsFromjob_expRecursive1']


class historyIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive2']
    user: Union[bool, 'userArgsFromjob_expRecursive2']


class historyIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive3']
    user: Union[bool, 'userArgsFromjob_expRecursive3']


class historyIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive4']
    user: Union[bool, 'userArgsFromjob_expRecursive4']


class historyIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class historyArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManyhistoryArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    category: Union[bool, 'categoryArgsFromjob_expRecursive1']
    job: Union[bool, 'jobArgsFromjob_expRecursive1']


class job_expIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    category: Union[bool, 'categoryArgsFromjob_expRecursive2']
    job: Union[bool, 'jobArgsFromjob_expRecursive2']


class job_expIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    category: Union[bool, 'categoryArgsFromjob_expRecursive3']
    job: Union[bool, 'jobArgsFromjob_expRecursive3']


class job_expIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    category: Union[bool, 'categoryArgsFromjob_expRecursive4']
    job: Union[bool, 'jobArgsFromjob_expRecursive4']


class job_expIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class job_expArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManyjob_expArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive1']
    user: Union[bool, 'userArgsFromjob_expRecursive1']


class bookmarkIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive2']
    user: Union[bool, 'userArgsFromjob_expRecursive2']


class bookmarkIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive3']
    user: Union[bool, 'userArgsFromjob_expRecursive3']


class bookmarkIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive4']
    user: Union[bool, 'userArgsFromjob_expRecursive4']


class bookmarkIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class bookmarkArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManybookmarkArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFromjob_exp(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive1']
    user: Union[bool, 'userArgsFromjob_expRecursive1']


class postIncludeFromjob_expRecursive1(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive2']
    user: Union[bool, 'userArgsFromjob_expRecursive2']


class postIncludeFromjob_expRecursive2(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive3']
    user: Union[bool, 'userArgsFromjob_expRecursive3']


class postIncludeFromjob_expRecursive3(TypedDict, total=False):
    """Relational arguments for job_exp"""
    job: Union[bool, 'jobArgsFromjob_expRecursive4']
    user: Union[bool, 'userArgsFromjob_expRecursive4']


class postIncludeFromjob_expRecursive4(TypedDict, total=False):
    """Relational arguments for job_exp"""

    

class postArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    
    

class FindManypostArgsFromjob_exp(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFromjob_expRecursive1(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFromjob_expRecursive2(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFromjob_expRecursive3(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFromjob_expRecursive4(TypedDict, total=False):
    """Arguments for job_exp"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManyjob_expArgs = FindManyjob_expArgsFromjob_exp
FindFirstjob_expArgs = FindManyjob_expArgsFromjob_exp


    

class job_expWhereInput(TypedDict, total=False):
    """job_exp arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    category_id: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    job: 'jobRelationFilter'

    # should be noted that AND and NOT should be Union['job_expWhereInputRecursive1', List['job_expWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['job_expWhereInputRecursive1']
    OR: List['job_expWhereInputRecursive1']
    NOT: List['job_expWhereInputRecursive1']


class job_expWhereInputRecursive1(TypedDict, total=False):
    """job_exp arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    category_id: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    job: 'jobRelationFilter'

    # should be noted that AND and NOT should be Union['job_expWhereInputRecursive2', List['job_expWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['job_expWhereInputRecursive2']
    OR: List['job_expWhereInputRecursive2']
    NOT: List['job_expWhereInputRecursive2']


class job_expWhereInputRecursive2(TypedDict, total=False):
    """job_exp arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    category_id: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    job: 'jobRelationFilter'

    # should be noted that AND and NOT should be Union['job_expWhereInputRecursive3', List['job_expWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['job_expWhereInputRecursive3']
    OR: List['job_expWhereInputRecursive3']
    NOT: List['job_expWhereInputRecursive3']


class job_expWhereInputRecursive3(TypedDict, total=False):
    """job_exp arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    category_id: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    job: 'jobRelationFilter'

    # should be noted that AND and NOT should be Union['job_expWhereInputRecursive4', List['job_expWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['job_expWhereInputRecursive4']
    OR: List['job_expWhereInputRecursive4']
    NOT: List['job_expWhereInputRecursive4']


class job_expWhereInputRecursive4(TypedDict, total=False):
    """job_exp arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    category_id: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    job: 'jobRelationFilter'



# aggregate job_exp types


    

class job_expScalarWhereWithAggregatesInput(TypedDict, total=False):
    """job_exp arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['job_expScalarWhereWithAggregatesInputRecursive1']
    OR: List['job_expScalarWhereWithAggregatesInputRecursive1']
    NOT: List['job_expScalarWhereWithAggregatesInputRecursive1']


class job_expScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """job_exp arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['job_expScalarWhereWithAggregatesInputRecursive2']
    OR: List['job_expScalarWhereWithAggregatesInputRecursive2']
    NOT: List['job_expScalarWhereWithAggregatesInputRecursive2']


class job_expScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """job_exp arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['job_expScalarWhereWithAggregatesInputRecursive3']
    OR: List['job_expScalarWhereWithAggregatesInputRecursive3']
    NOT: List['job_expScalarWhereWithAggregatesInputRecursive3']


class job_expScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """job_exp arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['job_expScalarWhereWithAggregatesInputRecursive4']
    OR: List['job_expScalarWhereWithAggregatesInputRecursive4']
    NOT: List['job_expScalarWhereWithAggregatesInputRecursive4']


class job_expScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """job_exp arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']



class job_expGroupByOutput(TypedDict, total=False):
    job_id: _int
    category_id: _int
    _sum: 'job_expSumAggregateOutput'
    _avg: 'job_expAvgAggregateOutput'
    _min: 'job_expMinAggregateOutput'
    _max: 'job_expMaxAggregateOutput'
    _count: 'job_expCountAggregateOutput'


class job_expAvgAggregateOutput(TypedDict, total=False):
    """job_exp output for aggregating averages"""
    job_id: float
    category_id: float


class job_expSumAggregateOutput(TypedDict, total=False):
    """job_exp output for aggregating sums"""
    job_id: _int
    category_id: _int


class job_expScalarAggregateOutput(TypedDict, total=False):
    """job_exp output including scalar fields"""
    job_id: _int
    category_id: _int


job_expMinAggregateOutput = job_expScalarAggregateOutput
job_expMaxAggregateOutput = job_expScalarAggregateOutput


class job_expMaxAggregateInput(TypedDict, total=False):
    """job_exp input for aggregating by max"""
    job_id: bool
    category_id: bool


class job_expMinAggregateInput(TypedDict, total=False):
    """job_exp input for aggregating by min"""
    job_id: bool
    category_id: bool


class job_expNumberAggregateInput(TypedDict, total=False):
    """job_exp input for aggregating numbers"""
    job_id: bool
    category_id: bool


job_expAvgAggregateInput = job_expNumberAggregateInput
job_expSumAggregateInput = job_expNumberAggregateInput


job_expCountAggregateInput = TypedDict(
    'job_expCountAggregateInput',
    {
        'job_id': bool,
        'category_id': bool,
        '_all': bool,
    },
    total=False,
)

job_expCountAggregateOutput = TypedDict(
    'job_expCountAggregateOutput',
    {
        'job_id': int,
        'category_id': int,
        '_all': int,
    },
    total=False,
)


job_expKeys = Literal[
    'job_id',
    'category_id',
    'category',
    'job',
]
job_expScalarFieldKeys = Literal[
    'job_id',
    'category_id',
]
job_expScalarFieldKeysT = TypeVar('job_expScalarFieldKeysT', bound=job_expScalarFieldKeys)

job_expRelationalFieldKeys = Literal[
        'category',
        'job',
    ]

# bookmark types

class bookmarkOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the bookmark create method"""
    user_id: _int
    job_id: _int
    book_id: _int
    job: 'jobCreateNestedWithoutRelationsInput'
    user: 'userCreateNestedWithoutRelationsInput'


class bookmarkCreateInput(bookmarkOptionalCreateInput):
    """Required arguments to the bookmark create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class bookmarkOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the bookmark create method, without relations"""
    user_id: _int
    job_id: _int
    book_id: _int


class bookmarkCreateWithoutRelationsInput(bookmarkOptionalCreateWithoutRelationsInput):
    """Required arguments to the bookmark create method, without relations"""


class bookmarkCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'bookmarkCreateWithoutRelationsInput'
    connect: 'bookmarkWhereUniqueInput'


class bookmarkCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['bookmarkCreateWithoutRelationsInput', List['bookmarkCreateWithoutRelationsInput']]
    connect: Union['bookmarkWhereUniqueInput', List['bookmarkWhereUniqueInput']]


_bookmarkWhereUnique_book_id_Input = TypedDict(
    '_bookmarkWhereUnique_book_id_Input',
    {
        'book_id': '_int',
    },
    total=True
)

_bookmarkCompounduser_id_job_idKeyInner = TypedDict(
    '_bookmarkCompounduser_id_job_idKeyInner',
    {
        'user_id': '_int',
        'job_id': '_int',
    },
    total=True
)

_bookmarkCompounduser_id_job_idKey = TypedDict(
    '_bookmarkCompounduser_id_job_idKey',
    {
        'user_id_job_id': '_bookmarkCompounduser_id_job_idKeyInner',
    },
    total=True
)

bookmarkWhereUniqueInput = Union[
    '_bookmarkWhereUnique_book_id_Input',
    '_bookmarkCompounduser_id_job_idKey',
]


class bookmarkUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    book_id: Union[AtomicIntInput, _int]
    job: 'jobUpdateOneWithoutRelationsInput'
    user: 'userUpdateOneWithoutRelationsInput'


class bookmarkUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    book_id: Union[AtomicIntInput, _int]


class bookmarkUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['bookmarkCreateWithoutRelationsInput']
    connect: List['bookmarkWhereUniqueInput']
    set: List['bookmarkWhereUniqueInput']
    disconnect: List['bookmarkWhereUniqueInput']
    delete: List['bookmarkWhereUniqueInput']

    # TODO
    # update: List['bookmarkUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['bookmarkUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['bookmarkScalarWhereInput']
    # upsert: List['bookmarkUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['bookmarkCreateOrConnectWithoutRelationsInput']


class bookmarkUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'bookmarkCreateWithoutRelationsInput'
    connect: 'bookmarkWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'bookmarkUpdateInput'
    # upsert: 'bookmarkUpsertWithoutRelationsInput'
    # connectOrCreate: 'bookmarkCreateOrConnectWithoutRelationsInput'


class bookmarkUpsertInput(TypedDict):
    create: 'bookmarkCreateInput'
    update: 'bookmarkUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_bookmark_user_id_OrderByInput = TypedDict(
    '_bookmark_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_bookmark_job_id_OrderByInput = TypedDict(
    '_bookmark_job_id_OrderByInput',
    {
        'job_id': 'SortOrder',
    },
    total=True
)

_bookmark_book_id_OrderByInput = TypedDict(
    '_bookmark_book_id_OrderByInput',
    {
        'book_id': 'SortOrder',
    },
    total=True
)

bookmarkOrderByInput = Union[
    '_bookmark_user_id_OrderByInput',
    '_bookmark_job_id_OrderByInput',
    '_bookmark_book_id_OrderByInput',
]



# recursive bookmark types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

bookmarkRelationFilter = TypedDict(
    'bookmarkRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class bookmarkListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class bookmarkInclude(TypedDict, total=False):
    """bookmark relational arguments"""
    job: Union[bool, 'jobArgsFrombookmark']
    user: Union[bool, 'userArgsFrombookmark']


    

class userIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrombookmarkRecursive1']
    contact: Union[bool, 'FindManycontactArgsFrombookmarkRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFrombookmarkRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFrombookmarkRecursive1']
    post: Union[bool, 'FindManypostArgsFrombookmarkRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFrombookmarkRecursive1']


class userIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrombookmarkRecursive2']
    contact: Union[bool, 'FindManycontactArgsFrombookmarkRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFrombookmarkRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFrombookmarkRecursive2']
    post: Union[bool, 'FindManypostArgsFrombookmarkRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFrombookmarkRecursive2']


class userIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrombookmarkRecursive3']
    contact: Union[bool, 'FindManycontactArgsFrombookmarkRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFrombookmarkRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFrombookmarkRecursive3']
    post: Union[bool, 'FindManypostArgsFrombookmarkRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFrombookmarkRecursive3']


class userIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrombookmarkRecursive4']
    contact: Union[bool, 'FindManycontactArgsFrombookmarkRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFrombookmarkRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFrombookmarkRecursive4']
    post: Union[bool, 'FindManypostArgsFrombookmarkRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFrombookmarkRecursive4']


class userIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class userArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManyuserArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive1']
    user1: Union[bool, 'userArgsFrombookmarkRecursive1']
    user2: Union[bool, 'userArgsFrombookmarkRecursive1']


class rating_userIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive2']
    user1: Union[bool, 'userArgsFrombookmarkRecursive2']
    user2: Union[bool, 'userArgsFrombookmarkRecursive2']


class rating_userIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive3']
    user1: Union[bool, 'userArgsFrombookmarkRecursive3']
    user2: Union[bool, 'userArgsFrombookmarkRecursive3']


class rating_userIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive4']
    user1: Union[bool, 'userArgsFrombookmarkRecursive4']
    user2: Union[bool, 'userArgsFrombookmarkRecursive4']


class rating_userIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class rating_userArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManyrating_userArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive1']
    user1: Union[bool, 'userArgsFrombookmarkRecursive1']
    user2: Union[bool, 'userArgsFrombookmarkRecursive1']


class rating_comIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive2']
    user1: Union[bool, 'userArgsFrombookmarkRecursive2']
    user2: Union[bool, 'userArgsFrombookmarkRecursive2']


class rating_comIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive3']
    user1: Union[bool, 'userArgsFrombookmarkRecursive3']
    user2: Union[bool, 'userArgsFrombookmarkRecursive3']


class rating_comIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive4']
    user1: Union[bool, 'userArgsFrombookmarkRecursive4']
    user2: Union[bool, 'userArgsFrombookmarkRecursive4']


class rating_comIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class rating_comArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManyrating_comArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    user: Union[bool, 'userArgsFrombookmarkRecursive1']


class contactIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    user: Union[bool, 'userArgsFrombookmarkRecursive2']


class contactIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    user: Union[bool, 'userArgsFrombookmarkRecursive3']


class contactIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    user: Union[bool, 'userArgsFrombookmarkRecursive4']


class contactIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class contactArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManycontactArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    experiences: Union[bool, 'FindManyexperienceArgsFrombookmarkRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFrombookmarkRecursive1']


class categoryIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    experiences: Union[bool, 'FindManyexperienceArgsFrombookmarkRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFrombookmarkRecursive2']


class categoryIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    experiences: Union[bool, 'FindManyexperienceArgsFrombookmarkRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFrombookmarkRecursive3']


class categoryIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    experiences: Union[bool, 'FindManyexperienceArgsFrombookmarkRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFrombookmarkRecursive4']


class categoryIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class categoryArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManycategoryArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    category: Union[bool, 'categoryArgsFrombookmarkRecursive1']
    user: Union[bool, 'userArgsFrombookmarkRecursive1']


class experienceIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    category: Union[bool, 'categoryArgsFrombookmarkRecursive2']
    user: Union[bool, 'userArgsFrombookmarkRecursive2']


class experienceIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    category: Union[bool, 'categoryArgsFrombookmarkRecursive3']
    user: Union[bool, 'userArgsFrombookmarkRecursive3']


class experienceIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    category: Union[bool, 'categoryArgsFrombookmarkRecursive4']
    user: Union[bool, 'userArgsFrombookmarkRecursive4']


class experienceIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class experienceArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManyexperienceArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    user_career: Union[bool, 'FindManyuser_careerArgsFrombookmarkRecursive1']


class careerIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    user_career: Union[bool, 'FindManyuser_careerArgsFrombookmarkRecursive2']


class careerIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    user_career: Union[bool, 'FindManyuser_careerArgsFrombookmarkRecursive3']


class careerIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    user_career: Union[bool, 'FindManyuser_careerArgsFrombookmarkRecursive4']


class careerIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class careerArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManycareerArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    career: Union[bool, 'careerArgsFrombookmarkRecursive1']
    user: Union[bool, 'userArgsFrombookmarkRecursive1']


class user_careerIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    career: Union[bool, 'careerArgsFrombookmarkRecursive2']
    user: Union[bool, 'userArgsFrombookmarkRecursive2']


class user_careerIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    career: Union[bool, 'careerArgsFrombookmarkRecursive3']
    user: Union[bool, 'userArgsFrombookmarkRecursive3']


class user_careerIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    career: Union[bool, 'careerArgsFrombookmarkRecursive4']
    user: Union[bool, 'userArgsFrombookmarkRecursive4']


class user_careerIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class user_careerArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManyuser_careerArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrombookmarkRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFrombookmarkRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFrombookmarkRecursive1']
    post: Union[bool, 'FindManypostArgsFrombookmarkRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive1']


class jobIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrombookmarkRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFrombookmarkRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFrombookmarkRecursive2']
    post: Union[bool, 'FindManypostArgsFrombookmarkRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive2']


class jobIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrombookmarkRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFrombookmarkRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFrombookmarkRecursive3']
    post: Union[bool, 'FindManypostArgsFrombookmarkRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive3']


class jobIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrombookmarkRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFrombookmarkRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFrombookmarkRecursive4']
    post: Union[bool, 'FindManypostArgsFrombookmarkRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFrombookmarkRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFrombookmarkRecursive4']


class jobIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class jobArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManyjobArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive1']
    user: Union[bool, 'userArgsFrombookmarkRecursive1']


class historyIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive2']
    user: Union[bool, 'userArgsFrombookmarkRecursive2']


class historyIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive3']
    user: Union[bool, 'userArgsFrombookmarkRecursive3']


class historyIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive4']
    user: Union[bool, 'userArgsFrombookmarkRecursive4']


class historyIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class historyArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManyhistoryArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    category: Union[bool, 'categoryArgsFrombookmarkRecursive1']
    job: Union[bool, 'jobArgsFrombookmarkRecursive1']


class job_expIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    category: Union[bool, 'categoryArgsFrombookmarkRecursive2']
    job: Union[bool, 'jobArgsFrombookmarkRecursive2']


class job_expIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    category: Union[bool, 'categoryArgsFrombookmarkRecursive3']
    job: Union[bool, 'jobArgsFrombookmarkRecursive3']


class job_expIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    category: Union[bool, 'categoryArgsFrombookmarkRecursive4']
    job: Union[bool, 'jobArgsFrombookmarkRecursive4']


class job_expIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class job_expArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManyjob_expArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive1']
    user: Union[bool, 'userArgsFrombookmarkRecursive1']


class bookmarkIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive2']
    user: Union[bool, 'userArgsFrombookmarkRecursive2']


class bookmarkIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive3']
    user: Union[bool, 'userArgsFrombookmarkRecursive3']


class bookmarkIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive4']
    user: Union[bool, 'userArgsFrombookmarkRecursive4']


class bookmarkIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class bookmarkArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManybookmarkArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFrombookmark(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive1']
    user: Union[bool, 'userArgsFrombookmarkRecursive1']


class postIncludeFrombookmarkRecursive1(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive2']
    user: Union[bool, 'userArgsFrombookmarkRecursive2']


class postIncludeFrombookmarkRecursive2(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive3']
    user: Union[bool, 'userArgsFrombookmarkRecursive3']


class postIncludeFrombookmarkRecursive3(TypedDict, total=False):
    """Relational arguments for bookmark"""
    job: Union[bool, 'jobArgsFrombookmarkRecursive4']
    user: Union[bool, 'userArgsFrombookmarkRecursive4']


class postIncludeFrombookmarkRecursive4(TypedDict, total=False):
    """Relational arguments for bookmark"""

    

class postArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    
    

class FindManypostArgsFrombookmark(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFrombookmarkRecursive1(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFrombookmarkRecursive2(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFrombookmarkRecursive3(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFrombookmarkRecursive4(TypedDict, total=False):
    """Arguments for bookmark"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManybookmarkArgs = FindManybookmarkArgsFrombookmark
FindFirstbookmarkArgs = FindManybookmarkArgsFrombookmark


    

class bookmarkWhereInput(TypedDict, total=False):
    """bookmark arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    book_id: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['bookmarkWhereInputRecursive1', List['bookmarkWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['bookmarkWhereInputRecursive1']
    OR: List['bookmarkWhereInputRecursive1']
    NOT: List['bookmarkWhereInputRecursive1']


class bookmarkWhereInputRecursive1(TypedDict, total=False):
    """bookmark arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    book_id: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['bookmarkWhereInputRecursive2', List['bookmarkWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['bookmarkWhereInputRecursive2']
    OR: List['bookmarkWhereInputRecursive2']
    NOT: List['bookmarkWhereInputRecursive2']


class bookmarkWhereInputRecursive2(TypedDict, total=False):
    """bookmark arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    book_id: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['bookmarkWhereInputRecursive3', List['bookmarkWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['bookmarkWhereInputRecursive3']
    OR: List['bookmarkWhereInputRecursive3']
    NOT: List['bookmarkWhereInputRecursive3']


class bookmarkWhereInputRecursive3(TypedDict, total=False):
    """bookmark arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    book_id: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['bookmarkWhereInputRecursive4', List['bookmarkWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['bookmarkWhereInputRecursive4']
    OR: List['bookmarkWhereInputRecursive4']
    NOT: List['bookmarkWhereInputRecursive4']


class bookmarkWhereInputRecursive4(TypedDict, total=False):
    """bookmark arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    job_id: Union[_int, 'types.IntFilter']
    book_id: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'



# aggregate bookmark types


    

class bookmarkScalarWhereWithAggregatesInput(TypedDict, total=False):
    """bookmark arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    book_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['bookmarkScalarWhereWithAggregatesInputRecursive1']
    OR: List['bookmarkScalarWhereWithAggregatesInputRecursive1']
    NOT: List['bookmarkScalarWhereWithAggregatesInputRecursive1']


class bookmarkScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """bookmark arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    book_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['bookmarkScalarWhereWithAggregatesInputRecursive2']
    OR: List['bookmarkScalarWhereWithAggregatesInputRecursive2']
    NOT: List['bookmarkScalarWhereWithAggregatesInputRecursive2']


class bookmarkScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """bookmark arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    book_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['bookmarkScalarWhereWithAggregatesInputRecursive3']
    OR: List['bookmarkScalarWhereWithAggregatesInputRecursive3']
    NOT: List['bookmarkScalarWhereWithAggregatesInputRecursive3']


class bookmarkScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """bookmark arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    book_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['bookmarkScalarWhereWithAggregatesInputRecursive4']
    OR: List['bookmarkScalarWhereWithAggregatesInputRecursive4']
    NOT: List['bookmarkScalarWhereWithAggregatesInputRecursive4']


class bookmarkScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """bookmark arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    book_id: Union[_int, 'types.IntWithAggregatesFilter']



class bookmarkGroupByOutput(TypedDict, total=False):
    user_id: _int
    job_id: _int
    book_id: _int
    _sum: 'bookmarkSumAggregateOutput'
    _avg: 'bookmarkAvgAggregateOutput'
    _min: 'bookmarkMinAggregateOutput'
    _max: 'bookmarkMaxAggregateOutput'
    _count: 'bookmarkCountAggregateOutput'


class bookmarkAvgAggregateOutput(TypedDict, total=False):
    """bookmark output for aggregating averages"""
    user_id: float
    job_id: float
    book_id: float


class bookmarkSumAggregateOutput(TypedDict, total=False):
    """bookmark output for aggregating sums"""
    user_id: _int
    job_id: _int
    book_id: _int


class bookmarkScalarAggregateOutput(TypedDict, total=False):
    """bookmark output including scalar fields"""
    user_id: _int
    job_id: _int
    book_id: _int


bookmarkMinAggregateOutput = bookmarkScalarAggregateOutput
bookmarkMaxAggregateOutput = bookmarkScalarAggregateOutput


class bookmarkMaxAggregateInput(TypedDict, total=False):
    """bookmark input for aggregating by max"""
    user_id: bool
    job_id: bool
    book_id: bool


class bookmarkMinAggregateInput(TypedDict, total=False):
    """bookmark input for aggregating by min"""
    user_id: bool
    job_id: bool
    book_id: bool


class bookmarkNumberAggregateInput(TypedDict, total=False):
    """bookmark input for aggregating numbers"""
    user_id: bool
    job_id: bool
    book_id: bool


bookmarkAvgAggregateInput = bookmarkNumberAggregateInput
bookmarkSumAggregateInput = bookmarkNumberAggregateInput


bookmarkCountAggregateInput = TypedDict(
    'bookmarkCountAggregateInput',
    {
        'user_id': bool,
        'job_id': bool,
        'book_id': bool,
        '_all': bool,
    },
    total=False,
)

bookmarkCountAggregateOutput = TypedDict(
    'bookmarkCountAggregateOutput',
    {
        'user_id': int,
        'job_id': int,
        'book_id': int,
        '_all': int,
    },
    total=False,
)


bookmarkKeys = Literal[
    'user_id',
    'job_id',
    'book_id',
    'job',
    'user',
]
bookmarkScalarFieldKeys = Literal[
    'user_id',
    'job_id',
    'book_id',
]
bookmarkScalarFieldKeysT = TypeVar('bookmarkScalarFieldKeysT', bound=bookmarkScalarFieldKeys)

bookmarkRelationalFieldKeys = Literal[
        'job',
        'user',
    ]

# post types

class postOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the post create method"""
    job_id: _int
    user_id: _int
    job: 'jobCreateNestedWithoutRelationsInput'
    user: 'userCreateNestedWithoutRelationsInput'


class postCreateInput(postOptionalCreateInput):
    """Required arguments to the post create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class postOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the post create method, without relations"""
    job_id: _int
    user_id: _int


class postCreateWithoutRelationsInput(postOptionalCreateWithoutRelationsInput):
    """Required arguments to the post create method, without relations"""


class postCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'postCreateWithoutRelationsInput'
    connect: 'postWhereUniqueInput'


class postCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['postCreateWithoutRelationsInput', List['postCreateWithoutRelationsInput']]
    connect: Union['postWhereUniqueInput', List['postWhereUniqueInput']]


_postCompounduser_id_job_idKeyInner = TypedDict(
    '_postCompounduser_id_job_idKeyInner',
    {
        'user_id': '_int',
        'job_id': '_int',
    },
    total=True
)

_postCompounduser_id_job_idKey = TypedDict(
    '_postCompounduser_id_job_idKey',
    {
        'user_id_job_id': '_postCompounduser_id_job_idKeyInner',
    },
    total=True
)

postWhereUniqueInput = _postCompounduser_id_job_idKey


class postUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    job: 'jobUpdateOneWithoutRelationsInput'
    user: 'userUpdateOneWithoutRelationsInput'


class postUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""


class postUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['postCreateWithoutRelationsInput']
    connect: List['postWhereUniqueInput']
    set: List['postWhereUniqueInput']
    disconnect: List['postWhereUniqueInput']
    delete: List['postWhereUniqueInput']

    # TODO
    # update: List['postUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['postUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['postScalarWhereInput']
    # upsert: List['postUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['postCreateOrConnectWithoutRelationsInput']


class postUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'postCreateWithoutRelationsInput'
    connect: 'postWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'postUpdateInput'
    # upsert: 'postUpsertWithoutRelationsInput'
    # connectOrCreate: 'postCreateOrConnectWithoutRelationsInput'


class postUpsertInput(TypedDict):
    create: 'postCreateInput'
    update: 'postUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_post_job_id_OrderByInput = TypedDict(
    '_post_job_id_OrderByInput',
    {
        'job_id': 'SortOrder',
    },
    total=True
)

_post_user_id_OrderByInput = TypedDict(
    '_post_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

postOrderByInput = Union[
    '_post_job_id_OrderByInput',
    '_post_user_id_OrderByInput',
]



# recursive post types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

postRelationFilter = TypedDict(
    'postRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class postListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class postInclude(TypedDict, total=False):
    """post relational arguments"""
    job: Union[bool, 'jobArgsFrompost']
    user: Union[bool, 'userArgsFrompost']


    

class userIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrompostRecursive1']
    contact: Union[bool, 'FindManycontactArgsFrompostRecursive1']
    experience: Union[bool, 'FindManyexperienceArgsFrompostRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFrompostRecursive1']
    post: Union[bool, 'FindManypostArgsFrompostRecursive1']
    rating_com1: Union[bool, 'FindManyrating_comArgsFrompostRecursive1']
    rating_com2: Union[bool, 'FindManyrating_comArgsFrompostRecursive1']
    rating_user1: Union[bool, 'FindManyrating_userArgsFrompostRecursive1']
    rating_users2: Union[bool, 'FindManyrating_userArgsFrompostRecursive1']
    user_career: Union[bool, 'FindManyuser_careerArgsFrompostRecursive1']


class userIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrompostRecursive2']
    contact: Union[bool, 'FindManycontactArgsFrompostRecursive2']
    experience: Union[bool, 'FindManyexperienceArgsFrompostRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFrompostRecursive2']
    post: Union[bool, 'FindManypostArgsFrompostRecursive2']
    rating_com1: Union[bool, 'FindManyrating_comArgsFrompostRecursive2']
    rating_com2: Union[bool, 'FindManyrating_comArgsFrompostRecursive2']
    rating_user1: Union[bool, 'FindManyrating_userArgsFrompostRecursive2']
    rating_users2: Union[bool, 'FindManyrating_userArgsFrompostRecursive2']
    user_career: Union[bool, 'FindManyuser_careerArgsFrompostRecursive2']


class userIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrompostRecursive3']
    contact: Union[bool, 'FindManycontactArgsFrompostRecursive3']
    experience: Union[bool, 'FindManyexperienceArgsFrompostRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFrompostRecursive3']
    post: Union[bool, 'FindManypostArgsFrompostRecursive3']
    rating_com1: Union[bool, 'FindManyrating_comArgsFrompostRecursive3']
    rating_com2: Union[bool, 'FindManyrating_comArgsFrompostRecursive3']
    rating_user1: Union[bool, 'FindManyrating_userArgsFrompostRecursive3']
    rating_users2: Union[bool, 'FindManyrating_userArgsFrompostRecursive3']
    user_career: Union[bool, 'FindManyuser_careerArgsFrompostRecursive3']


class userIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrompostRecursive4']
    contact: Union[bool, 'FindManycontactArgsFrompostRecursive4']
    experience: Union[bool, 'FindManyexperienceArgsFrompostRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFrompostRecursive4']
    post: Union[bool, 'FindManypostArgsFrompostRecursive4']
    rating_com1: Union[bool, 'FindManyrating_comArgsFrompostRecursive4']
    rating_com2: Union[bool, 'FindManyrating_comArgsFrompostRecursive4']
    rating_user1: Union[bool, 'FindManyrating_userArgsFrompostRecursive4']
    rating_users2: Union[bool, 'FindManyrating_userArgsFrompostRecursive4']
    user_career: Union[bool, 'FindManyuser_careerArgsFrompostRecursive4']


class userIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class userArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManyuserArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class rating_userIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive1']
    user1: Union[bool, 'userArgsFrompostRecursive1']
    user2: Union[bool, 'userArgsFrompostRecursive1']


class rating_userIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive2']
    user1: Union[bool, 'userArgsFrompostRecursive2']
    user2: Union[bool, 'userArgsFrompostRecursive2']


class rating_userIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive3']
    user1: Union[bool, 'userArgsFrompostRecursive3']
    user2: Union[bool, 'userArgsFrompostRecursive3']


class rating_userIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive4']
    user1: Union[bool, 'userArgsFrompostRecursive4']
    user2: Union[bool, 'userArgsFrompostRecursive4']


class rating_userIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class rating_userArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'rating_userIncludeFromrating_userRecursive1'


class rating_userArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'rating_userIncludeFromrating_userRecursive2'


class rating_userArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'rating_userIncludeFromrating_userRecursive3'


class rating_userArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'rating_userIncludeFromrating_userRecursive4'


class rating_userArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManyrating_userArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive1'


class FindManyrating_userArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive2'


class FindManyrating_userArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive3'


class FindManyrating_userArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    include: 'rating_userIncludeFromrating_userRecursive4'


class FindManyrating_userArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['rating_userOrderByInput', List['rating_userOrderByInput']]
    where: 'rating_userWhereInput'
    cursor: 'rating_userWhereUniqueInput'
    distinct: List['rating_userScalarFieldKeys']
    
    

class rating_comIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive1']
    user1: Union[bool, 'userArgsFrompostRecursive1']
    user2: Union[bool, 'userArgsFrompostRecursive1']


class rating_comIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive2']
    user1: Union[bool, 'userArgsFrompostRecursive2']
    user2: Union[bool, 'userArgsFrompostRecursive2']


class rating_comIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive3']
    user1: Union[bool, 'userArgsFrompostRecursive3']
    user2: Union[bool, 'userArgsFrompostRecursive3']


class rating_comIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive4']
    user1: Union[bool, 'userArgsFrompostRecursive4']
    user2: Union[bool, 'userArgsFrompostRecursive4']


class rating_comIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class rating_comArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'rating_comIncludeFromrating_comRecursive1'


class rating_comArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'rating_comIncludeFromrating_comRecursive2'


class rating_comArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'rating_comIncludeFromrating_comRecursive3'


class rating_comArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'rating_comIncludeFromrating_comRecursive4'


class rating_comArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManyrating_comArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive1'


class FindManyrating_comArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive2'


class FindManyrating_comArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive3'


class FindManyrating_comArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    include: 'rating_comIncludeFromrating_comRecursive4'


class FindManyrating_comArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['rating_comOrderByInput', List['rating_comOrderByInput']]
    where: 'rating_comWhereInput'
    cursor: 'rating_comWhereUniqueInput'
    distinct: List['rating_comScalarFieldKeys']
    
    

class contactIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    user: Union[bool, 'userArgsFrompostRecursive1']


class contactIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    user: Union[bool, 'userArgsFrompostRecursive2']


class contactIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    user: Union[bool, 'userArgsFrompostRecursive3']


class contactIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    user: Union[bool, 'userArgsFrompostRecursive4']


class contactIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class contactArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'contactIncludeFromcontactRecursive1'


class contactArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'contactIncludeFromcontactRecursive2'


class contactArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'contactIncludeFromcontactRecursive3'


class contactArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'contactIncludeFromcontactRecursive4'


class contactArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManycontactArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive1'


class FindManycontactArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive2'


class FindManycontactArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive3'


class FindManycontactArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    include: 'contactIncludeFromcontactRecursive4'


class FindManycontactArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['contactOrderByInput', List['contactOrderByInput']]
    where: 'contactWhereInput'
    cursor: 'contactWhereUniqueInput'
    distinct: List['contactScalarFieldKeys']
    
    

class categoryIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    experiences: Union[bool, 'FindManyexperienceArgsFrompostRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFrompostRecursive1']


class categoryIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    experiences: Union[bool, 'FindManyexperienceArgsFrompostRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFrompostRecursive2']


class categoryIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    experiences: Union[bool, 'FindManyexperienceArgsFrompostRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFrompostRecursive3']


class categoryIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    experiences: Union[bool, 'FindManyexperienceArgsFrompostRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFrompostRecursive4']


class categoryIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class categoryArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManycategoryArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class experienceIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    category: Union[bool, 'categoryArgsFrompostRecursive1']
    user: Union[bool, 'userArgsFrompostRecursive1']


class experienceIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    category: Union[bool, 'categoryArgsFrompostRecursive2']
    user: Union[bool, 'userArgsFrompostRecursive2']


class experienceIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    category: Union[bool, 'categoryArgsFrompostRecursive3']
    user: Union[bool, 'userArgsFrompostRecursive3']


class experienceIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    category: Union[bool, 'categoryArgsFrompostRecursive4']
    user: Union[bool, 'userArgsFrompostRecursive4']


class experienceIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class experienceArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'experienceIncludeFromexperienceRecursive1'


class experienceArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'experienceIncludeFromexperienceRecursive2'


class experienceArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'experienceIncludeFromexperienceRecursive3'


class experienceArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'experienceIncludeFromexperienceRecursive4'


class experienceArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManyexperienceArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive1'


class FindManyexperienceArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive2'


class FindManyexperienceArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive3'


class FindManyexperienceArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    include: 'experienceIncludeFromexperienceRecursive4'


class FindManyexperienceArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['experienceOrderByInput', List['experienceOrderByInput']]
    where: 'experienceWhereInput'
    cursor: 'experienceWhereUniqueInput'
    distinct: List['experienceScalarFieldKeys']
    
    

class careerIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    user_career: Union[bool, 'FindManyuser_careerArgsFrompostRecursive1']


class careerIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    user_career: Union[bool, 'FindManyuser_careerArgsFrompostRecursive2']


class careerIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    user_career: Union[bool, 'FindManyuser_careerArgsFrompostRecursive3']


class careerIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    user_career: Union[bool, 'FindManyuser_careerArgsFrompostRecursive4']


class careerIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class careerArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'careerIncludeFromcareerRecursive1'


class careerArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'careerIncludeFromcareerRecursive2'


class careerArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'careerIncludeFromcareerRecursive3'


class careerArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'careerIncludeFromcareerRecursive4'


class careerArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManycareerArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive1'


class FindManycareerArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive2'


class FindManycareerArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive3'


class FindManycareerArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    include: 'careerIncludeFromcareerRecursive4'


class FindManycareerArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['careerOrderByInput', List['careerOrderByInput']]
    where: 'careerWhereInput'
    cursor: 'careerWhereUniqueInput'
    distinct: List['careerScalarFieldKeys']
    
    

class user_careerIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    career: Union[bool, 'careerArgsFrompostRecursive1']
    user: Union[bool, 'userArgsFrompostRecursive1']


class user_careerIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    career: Union[bool, 'careerArgsFrompostRecursive2']
    user: Union[bool, 'userArgsFrompostRecursive2']


class user_careerIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    career: Union[bool, 'careerArgsFrompostRecursive3']
    user: Union[bool, 'userArgsFrompostRecursive3']


class user_careerIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    career: Union[bool, 'careerArgsFrompostRecursive4']
    user: Union[bool, 'userArgsFrompostRecursive4']


class user_careerIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class user_careerArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'user_careerIncludeFromuser_careerRecursive1'


class user_careerArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'user_careerIncludeFromuser_careerRecursive2'


class user_careerArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'user_careerIncludeFromuser_careerRecursive3'


class user_careerArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'user_careerIncludeFromuser_careerRecursive4'


class user_careerArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManyuser_careerArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive1'


class FindManyuser_careerArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive2'


class FindManyuser_careerArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive3'


class FindManyuser_careerArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    include: 'user_careerIncludeFromuser_careerRecursive4'


class FindManyuser_careerArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['user_careerOrderByInput', List['user_careerOrderByInput']]
    where: 'user_careerWhereInput'
    cursor: 'user_careerWhereUniqueInput'
    distinct: List['user_careerScalarFieldKeys']
    
    

class jobIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrompostRecursive1']
    history: Union[bool, 'FindManyhistoryArgsFrompostRecursive1']
    job_exp: Union[bool, 'FindManyjob_expArgsFrompostRecursive1']
    post: Union[bool, 'FindManypostArgsFrompostRecursive1']
    rating_com: Union[bool, 'FindManyrating_comArgsFrompostRecursive1']
    rating_user: Union[bool, 'FindManyrating_userArgsFrompostRecursive1']


class jobIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrompostRecursive2']
    history: Union[bool, 'FindManyhistoryArgsFrompostRecursive2']
    job_exp: Union[bool, 'FindManyjob_expArgsFrompostRecursive2']
    post: Union[bool, 'FindManypostArgsFrompostRecursive2']
    rating_com: Union[bool, 'FindManyrating_comArgsFrompostRecursive2']
    rating_user: Union[bool, 'FindManyrating_userArgsFrompostRecursive2']


class jobIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrompostRecursive3']
    history: Union[bool, 'FindManyhistoryArgsFrompostRecursive3']
    job_exp: Union[bool, 'FindManyjob_expArgsFrompostRecursive3']
    post: Union[bool, 'FindManypostArgsFrompostRecursive3']
    rating_com: Union[bool, 'FindManyrating_comArgsFrompostRecursive3']
    rating_user: Union[bool, 'FindManyrating_userArgsFrompostRecursive3']


class jobIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    bookmark: Union[bool, 'FindManybookmarkArgsFrompostRecursive4']
    history: Union[bool, 'FindManyhistoryArgsFrompostRecursive4']
    job_exp: Union[bool, 'FindManyjob_expArgsFrompostRecursive4']
    post: Union[bool, 'FindManypostArgsFrompostRecursive4']
    rating_com: Union[bool, 'FindManyrating_comArgsFrompostRecursive4']
    rating_user: Union[bool, 'FindManyrating_userArgsFrompostRecursive4']


class jobIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class jobArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'jobIncludeFromjobRecursive1'


class jobArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'jobIncludeFromjobRecursive2'


class jobArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'jobIncludeFromjobRecursive3'


class jobArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'jobIncludeFromjobRecursive4'


class jobArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManyjobArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive1'


class FindManyjobArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive2'


class FindManyjobArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive3'


class FindManyjobArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    include: 'jobIncludeFromjobRecursive4'


class FindManyjobArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['jobOrderByInput', List['jobOrderByInput']]
    where: 'jobWhereInput'
    cursor: 'jobWhereUniqueInput'
    distinct: List['jobScalarFieldKeys']
    
    

class historyIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive1']
    user: Union[bool, 'userArgsFrompostRecursive1']


class historyIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive2']
    user: Union[bool, 'userArgsFrompostRecursive2']


class historyIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive3']
    user: Union[bool, 'userArgsFrompostRecursive3']


class historyIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive4']
    user: Union[bool, 'userArgsFrompostRecursive4']


class historyIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class historyArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'historyIncludeFromhistoryRecursive1'


class historyArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'historyIncludeFromhistoryRecursive2'


class historyArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'historyIncludeFromhistoryRecursive3'


class historyArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'historyIncludeFromhistoryRecursive4'


class historyArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManyhistoryArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive1'


class FindManyhistoryArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive2'


class FindManyhistoryArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive3'


class FindManyhistoryArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    include: 'historyIncludeFromhistoryRecursive4'


class FindManyhistoryArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['historyOrderByInput', List['historyOrderByInput']]
    where: 'historyWhereInput'
    cursor: 'historyWhereUniqueInput'
    distinct: List['historyScalarFieldKeys']
    
    

class job_expIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    category: Union[bool, 'categoryArgsFrompostRecursive1']
    job: Union[bool, 'jobArgsFrompostRecursive1']


class job_expIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    category: Union[bool, 'categoryArgsFrompostRecursive2']
    job: Union[bool, 'jobArgsFrompostRecursive2']


class job_expIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    category: Union[bool, 'categoryArgsFrompostRecursive3']
    job: Union[bool, 'jobArgsFrompostRecursive3']


class job_expIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    category: Union[bool, 'categoryArgsFrompostRecursive4']
    job: Union[bool, 'jobArgsFrompostRecursive4']


class job_expIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class job_expArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'job_expIncludeFromjob_expRecursive1'


class job_expArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'job_expIncludeFromjob_expRecursive2'


class job_expArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'job_expIncludeFromjob_expRecursive3'


class job_expArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'job_expIncludeFromjob_expRecursive4'


class job_expArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManyjob_expArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive1'


class FindManyjob_expArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive2'


class FindManyjob_expArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive3'


class FindManyjob_expArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    include: 'job_expIncludeFromjob_expRecursive4'


class FindManyjob_expArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['job_expOrderByInput', List['job_expOrderByInput']]
    where: 'job_expWhereInput'
    cursor: 'job_expWhereUniqueInput'
    distinct: List['job_expScalarFieldKeys']
    
    

class bookmarkIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive1']
    user: Union[bool, 'userArgsFrompostRecursive1']


class bookmarkIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive2']
    user: Union[bool, 'userArgsFrompostRecursive2']


class bookmarkIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive3']
    user: Union[bool, 'userArgsFrompostRecursive3']


class bookmarkIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive4']
    user: Union[bool, 'userArgsFrompostRecursive4']


class bookmarkIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class bookmarkArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class bookmarkArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class bookmarkArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class bookmarkArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class bookmarkArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManybookmarkArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive1'


class FindManybookmarkArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive2'


class FindManybookmarkArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive3'


class FindManybookmarkArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    include: 'bookmarkIncludeFrombookmarkRecursive4'


class FindManybookmarkArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['bookmarkOrderByInput', List['bookmarkOrderByInput']]
    where: 'bookmarkWhereInput'
    cursor: 'bookmarkWhereUniqueInput'
    distinct: List['bookmarkScalarFieldKeys']
    
    

class postIncludeFrompost(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive1']
    user: Union[bool, 'userArgsFrompostRecursive1']


class postIncludeFrompostRecursive1(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive2']
    user: Union[bool, 'userArgsFrompostRecursive2']


class postIncludeFrompostRecursive2(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive3']
    user: Union[bool, 'userArgsFrompostRecursive3']


class postIncludeFrompostRecursive3(TypedDict, total=False):
    """Relational arguments for post"""
    job: Union[bool, 'jobArgsFrompostRecursive4']
    user: Union[bool, 'userArgsFrompostRecursive4']


class postIncludeFrompostRecursive4(TypedDict, total=False):
    """Relational arguments for post"""

    

class postArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    include: 'postIncludeFrompostRecursive1'


class postArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    include: 'postIncludeFrompostRecursive2'


class postArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    include: 'postIncludeFrompostRecursive3'


class postArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    include: 'postIncludeFrompostRecursive4'


class postArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    
    

class FindManypostArgsFrompost(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive1'


class FindManypostArgsFrompostRecursive1(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive2'


class FindManypostArgsFrompostRecursive2(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive3'


class FindManypostArgsFrompostRecursive3(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    include: 'postIncludeFrompostRecursive4'


class FindManypostArgsFrompostRecursive4(TypedDict, total=False):
    """Arguments for post"""
    take: int
    skip: int
    order_by: Union['postOrderByInput', List['postOrderByInput']]
    where: 'postWhereInput'
    cursor: 'postWhereUniqueInput'
    distinct: List['postScalarFieldKeys']
    


FindManypostArgs = FindManypostArgsFrompost
FindFirstpostArgs = FindManypostArgsFrompost


    

class postWhereInput(TypedDict, total=False):
    """post arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    user_id: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['postWhereInputRecursive1', List['postWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['postWhereInputRecursive1']
    OR: List['postWhereInputRecursive1']
    NOT: List['postWhereInputRecursive1']


class postWhereInputRecursive1(TypedDict, total=False):
    """post arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    user_id: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['postWhereInputRecursive2', List['postWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['postWhereInputRecursive2']
    OR: List['postWhereInputRecursive2']
    NOT: List['postWhereInputRecursive2']


class postWhereInputRecursive2(TypedDict, total=False):
    """post arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    user_id: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['postWhereInputRecursive3', List['postWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['postWhereInputRecursive3']
    OR: List['postWhereInputRecursive3']
    NOT: List['postWhereInputRecursive3']


class postWhereInputRecursive3(TypedDict, total=False):
    """post arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    user_id: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'

    # should be noted that AND and NOT should be Union['postWhereInputRecursive4', List['postWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['postWhereInputRecursive4']
    OR: List['postWhereInputRecursive4']
    NOT: List['postWhereInputRecursive4']


class postWhereInputRecursive4(TypedDict, total=False):
    """post arguments for searching"""
    job_id: Union[_int, 'types.IntFilter']
    user_id: Union[_int, 'types.IntFilter']
    job: 'jobRelationFilter'
    user: 'userRelationFilter'



# aggregate post types


    

class postScalarWhereWithAggregatesInput(TypedDict, total=False):
    """post arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['postScalarWhereWithAggregatesInputRecursive1']
    OR: List['postScalarWhereWithAggregatesInputRecursive1']
    NOT: List['postScalarWhereWithAggregatesInputRecursive1']


class postScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """post arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['postScalarWhereWithAggregatesInputRecursive2']
    OR: List['postScalarWhereWithAggregatesInputRecursive2']
    NOT: List['postScalarWhereWithAggregatesInputRecursive2']


class postScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """post arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['postScalarWhereWithAggregatesInputRecursive3']
    OR: List['postScalarWhereWithAggregatesInputRecursive3']
    NOT: List['postScalarWhereWithAggregatesInputRecursive3']


class postScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """post arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['postScalarWhereWithAggregatesInputRecursive4']
    OR: List['postScalarWhereWithAggregatesInputRecursive4']
    NOT: List['postScalarWhereWithAggregatesInputRecursive4']


class postScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """post arguments for searching"""
    job_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']



class postGroupByOutput(TypedDict, total=False):
    job_id: _int
    user_id: _int
    _sum: 'postSumAggregateOutput'
    _avg: 'postAvgAggregateOutput'
    _min: 'postMinAggregateOutput'
    _max: 'postMaxAggregateOutput'
    _count: 'postCountAggregateOutput'


class postAvgAggregateOutput(TypedDict, total=False):
    """post output for aggregating averages"""
    job_id: float
    user_id: float


class postSumAggregateOutput(TypedDict, total=False):
    """post output for aggregating sums"""
    job_id: _int
    user_id: _int


class postScalarAggregateOutput(TypedDict, total=False):
    """post output including scalar fields"""
    job_id: _int
    user_id: _int


postMinAggregateOutput = postScalarAggregateOutput
postMaxAggregateOutput = postScalarAggregateOutput


class postMaxAggregateInput(TypedDict, total=False):
    """post input for aggregating by max"""
    job_id: bool
    user_id: bool


class postMinAggregateInput(TypedDict, total=False):
    """post input for aggregating by min"""
    job_id: bool
    user_id: bool


class postNumberAggregateInput(TypedDict, total=False):
    """post input for aggregating numbers"""
    job_id: bool
    user_id: bool


postAvgAggregateInput = postNumberAggregateInput
postSumAggregateInput = postNumberAggregateInput


postCountAggregateInput = TypedDict(
    'postCountAggregateInput',
    {
        'job_id': bool,
        'user_id': bool,
        '_all': bool,
    },
    total=False,
)

postCountAggregateOutput = TypedDict(
    'postCountAggregateOutput',
    {
        'job_id': int,
        'user_id': int,
        '_all': int,
    },
    total=False,
)


postKeys = Literal[
    'job_id',
    'user_id',
    'job',
    'user',
]
postScalarFieldKeys = Literal[
    'job_id',
    'user_id',
]
postScalarFieldKeysT = TypeVar('postScalarFieldKeysT', bound=postScalarFieldKeys)

postRelationalFieldKeys = Literal[
        'job',
        'user',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields