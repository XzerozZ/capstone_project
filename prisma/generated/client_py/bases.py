# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class Baseuser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['user']] = 'user'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.userActions[_PrismaModelT]':
        from .client import get_client

        return actions.userActions[_PrismaModelT](client or get_client(), cls)


class Baserating_user(_PrismaModel):
    __prisma_model__: ClassVar[Literal['rating_user']] = 'rating_user'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.rating_userActions[_PrismaModelT]':
        from .client import get_client

        return actions.rating_userActions[_PrismaModelT](client or get_client(), cls)


class Baserating_com(_PrismaModel):
    __prisma_model__: ClassVar[Literal['rating_com']] = 'rating_com'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.rating_comActions[_PrismaModelT]':
        from .client import get_client

        return actions.rating_comActions[_PrismaModelT](client or get_client(), cls)


class Basecontact(_PrismaModel):
    __prisma_model__: ClassVar[Literal['contact']] = 'contact'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.contactActions[_PrismaModelT]':
        from .client import get_client

        return actions.contactActions[_PrismaModelT](client or get_client(), cls)


class Basecategory(_PrismaModel):
    __prisma_model__: ClassVar[Literal['category']] = 'category'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.categoryActions[_PrismaModelT]':
        from .client import get_client

        return actions.categoryActions[_PrismaModelT](client or get_client(), cls)


class Baseexperience(_PrismaModel):
    __prisma_model__: ClassVar[Literal['experience']] = 'experience'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.experienceActions[_PrismaModelT]':
        from .client import get_client

        return actions.experienceActions[_PrismaModelT](client or get_client(), cls)


class Basecareer(_PrismaModel):
    __prisma_model__: ClassVar[Literal['career']] = 'career'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.careerActions[_PrismaModelT]':
        from .client import get_client

        return actions.careerActions[_PrismaModelT](client or get_client(), cls)


class Baseuser_career(_PrismaModel):
    __prisma_model__: ClassVar[Literal['user_career']] = 'user_career'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.user_careerActions[_PrismaModelT]':
        from .client import get_client

        return actions.user_careerActions[_PrismaModelT](client or get_client(), cls)


class Basejob(_PrismaModel):
    __prisma_model__: ClassVar[Literal['job']] = 'job'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.jobActions[_PrismaModelT]':
        from .client import get_client

        return actions.jobActions[_PrismaModelT](client or get_client(), cls)


class Basehistory(_PrismaModel):
    __prisma_model__: ClassVar[Literal['history']] = 'history'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.historyActions[_PrismaModelT]':
        from .client import get_client

        return actions.historyActions[_PrismaModelT](client or get_client(), cls)


class Basejob_exp(_PrismaModel):
    __prisma_model__: ClassVar[Literal['job_exp']] = 'job_exp'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.job_expActions[_PrismaModelT]':
        from .client import get_client

        return actions.job_expActions[_PrismaModelT](client or get_client(), cls)


class Basebookmark(_PrismaModel):
    __prisma_model__: ClassVar[Literal['bookmark']] = 'bookmark'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.bookmarkActions[_PrismaModelT]':
        from .client import get_client

        return actions.bookmarkActions[_PrismaModelT](client or get_client(), cls)


class Basepost(_PrismaModel):
    __prisma_model__: ClassVar[Literal['post']] = 'post'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.postActions[_PrismaModelT]':
        from .client import get_client

        return actions.postActions[_PrismaModelT](client or get_client(), cls)


